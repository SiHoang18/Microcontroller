
FSM_TrafficLight.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d30  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e3c  08002e3c  00003e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e60  08002e60  000040bc  2**0
                  CONTENTS
  4 .ARM          00000000  08002e60  08002e60  000040bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002e60  08002e60  000040bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e60  08002e60  00003e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e64  08002e64  00003e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  08002e68  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  200000bc  08002f24  000040bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08002f24  0000417c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000040bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008997  00000000  00000000  000040e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e2b  00000000  00000000  0000ca7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0000e8a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007a6  00000000  00000000  0000f2c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016eeb  00000000  00000000  0000fa6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9a2  00000000  00000000  00026959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082429  00000000  00000000  000332fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5724  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027d8  00000000  00000000  000b5768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000b7f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000bc 	.word	0x200000bc
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e24 	.word	0x08002e24

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000c0 	.word	0x200000c0
 8000148:	08002e24 	.word	0x08002e24

0800014c <display7SEG>:
 *  Created on: Oct 2, 2024
 *      Author: LENOVO
 */
#include "Control_7SEG.h"

void display7SEG(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(num){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 8180 	bhi.w	800045c <display7SEG+0x310>
 800015c:	a201      	add	r2, pc, #4	@ (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001d5 	.word	0x080001d5
 800016c:	0800021d 	.word	0x0800021d
 8000170:	08000265 	.word	0x08000265
 8000174:	080002ad 	.word	0x080002ad
 8000178:	080002f5 	.word	0x080002f5
 800017c:	0800033d 	.word	0x0800033d
 8000180:	08000385 	.word	0x08000385
 8000184:	080003cd 	.word	0x080003cd
 8000188:	08000415 	.word	0x08000415
		case 0:
			HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	2102      	movs	r1, #2
 8000190:	48b5      	ldr	r0, [pc, #724]	@ (8000468 <display7SEG+0x31c>)
 8000192:	f001 fe30 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, RESET);
 8000196:	2200      	movs	r2, #0
 8000198:	2104      	movs	r1, #4
 800019a:	48b3      	ldr	r0, [pc, #716]	@ (8000468 <display7SEG+0x31c>)
 800019c:	f001 fe2b 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 80001a0:	2200      	movs	r2, #0
 80001a2:	2108      	movs	r1, #8
 80001a4:	48b0      	ldr	r0, [pc, #704]	@ (8000468 <display7SEG+0x31c>)
 80001a6:	f001 fe26 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, RESET);
 80001aa:	2200      	movs	r2, #0
 80001ac:	2110      	movs	r1, #16
 80001ae:	48ae      	ldr	r0, [pc, #696]	@ (8000468 <display7SEG+0x31c>)
 80001b0:	f001 fe21 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, RESET);
 80001b4:	2200      	movs	r2, #0
 80001b6:	2120      	movs	r1, #32
 80001b8:	48ab      	ldr	r0, [pc, #684]	@ (8000468 <display7SEG+0x31c>)
 80001ba:	f001 fe1c 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, RESET);
 80001be:	2200      	movs	r2, #0
 80001c0:	2140      	movs	r1, #64	@ 0x40
 80001c2:	48a9      	ldr	r0, [pc, #676]	@ (8000468 <display7SEG+0x31c>)
 80001c4:	f001 fe17 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, SET);
 80001c8:	2201      	movs	r2, #1
 80001ca:	2180      	movs	r1, #128	@ 0x80
 80001cc:	48a6      	ldr	r0, [pc, #664]	@ (8000468 <display7SEG+0x31c>)
 80001ce:	f001 fe12 	bl	8001df6 <HAL_GPIO_WritePin>
			break;
 80001d2:	e144      	b.n	800045e <display7SEG+0x312>
		case 1:
			HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	2102      	movs	r1, #2
 80001d8:	48a3      	ldr	r0, [pc, #652]	@ (8000468 <display7SEG+0x31c>)
 80001da:	f001 fe0c 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, RESET);
 80001de:	2200      	movs	r2, #0
 80001e0:	2104      	movs	r1, #4
 80001e2:	48a1      	ldr	r0, [pc, #644]	@ (8000468 <display7SEG+0x31c>)
 80001e4:	f001 fe07 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 80001e8:	2200      	movs	r2, #0
 80001ea:	2108      	movs	r1, #8
 80001ec:	489e      	ldr	r0, [pc, #632]	@ (8000468 <display7SEG+0x31c>)
 80001ee:	f001 fe02 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, SET);
 80001f2:	2201      	movs	r2, #1
 80001f4:	2110      	movs	r1, #16
 80001f6:	489c      	ldr	r0, [pc, #624]	@ (8000468 <display7SEG+0x31c>)
 80001f8:	f001 fdfd 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, SET);
 80001fc:	2201      	movs	r2, #1
 80001fe:	2120      	movs	r1, #32
 8000200:	4899      	ldr	r0, [pc, #612]	@ (8000468 <display7SEG+0x31c>)
 8000202:	f001 fdf8 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, SET);
 8000206:	2201      	movs	r2, #1
 8000208:	2140      	movs	r1, #64	@ 0x40
 800020a:	4897      	ldr	r0, [pc, #604]	@ (8000468 <display7SEG+0x31c>)
 800020c:	f001 fdf3 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, SET);
 8000210:	2201      	movs	r2, #1
 8000212:	2180      	movs	r1, #128	@ 0x80
 8000214:	4894      	ldr	r0, [pc, #592]	@ (8000468 <display7SEG+0x31c>)
 8000216:	f001 fdee 	bl	8001df6 <HAL_GPIO_WritePin>
			break;
 800021a:	e120      	b.n	800045e <display7SEG+0x312>
		case 2:
			HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, RESET);
 800021c:	2200      	movs	r2, #0
 800021e:	2102      	movs	r1, #2
 8000220:	4891      	ldr	r0, [pc, #580]	@ (8000468 <display7SEG+0x31c>)
 8000222:	f001 fde8 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, RESET);
 8000226:	2200      	movs	r2, #0
 8000228:	2104      	movs	r1, #4
 800022a:	488f      	ldr	r0, [pc, #572]	@ (8000468 <display7SEG+0x31c>)
 800022c:	f001 fde3 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, SET);
 8000230:	2201      	movs	r2, #1
 8000232:	2108      	movs	r1, #8
 8000234:	488c      	ldr	r0, [pc, #560]	@ (8000468 <display7SEG+0x31c>)
 8000236:	f001 fdde 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, RESET);
 800023a:	2200      	movs	r2, #0
 800023c:	2110      	movs	r1, #16
 800023e:	488a      	ldr	r0, [pc, #552]	@ (8000468 <display7SEG+0x31c>)
 8000240:	f001 fdd9 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	2120      	movs	r1, #32
 8000248:	4887      	ldr	r0, [pc, #540]	@ (8000468 <display7SEG+0x31c>)
 800024a:	f001 fdd4 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, SET);
 800024e:	2201      	movs	r2, #1
 8000250:	2140      	movs	r1, #64	@ 0x40
 8000252:	4885      	ldr	r0, [pc, #532]	@ (8000468 <display7SEG+0x31c>)
 8000254:	f001 fdcf 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, RESET);
 8000258:	2200      	movs	r2, #0
 800025a:	2180      	movs	r1, #128	@ 0x80
 800025c:	4882      	ldr	r0, [pc, #520]	@ (8000468 <display7SEG+0x31c>)
 800025e:	f001 fdca 	bl	8001df6 <HAL_GPIO_WritePin>
			break;
 8000262:	e0fc      	b.n	800045e <display7SEG+0x312>
		case 3:
			HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, RESET);
 8000264:	2200      	movs	r2, #0
 8000266:	2102      	movs	r1, #2
 8000268:	487f      	ldr	r0, [pc, #508]	@ (8000468 <display7SEG+0x31c>)
 800026a:	f001 fdc4 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	2104      	movs	r1, #4
 8000272:	487d      	ldr	r0, [pc, #500]	@ (8000468 <display7SEG+0x31c>)
 8000274:	f001 fdbf 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	2108      	movs	r1, #8
 800027c:	487a      	ldr	r0, [pc, #488]	@ (8000468 <display7SEG+0x31c>)
 800027e:	f001 fdba 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, RESET);
 8000282:	2200      	movs	r2, #0
 8000284:	2110      	movs	r1, #16
 8000286:	4878      	ldr	r0, [pc, #480]	@ (8000468 <display7SEG+0x31c>)
 8000288:	f001 fdb5 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, SET);
 800028c:	2201      	movs	r2, #1
 800028e:	2120      	movs	r1, #32
 8000290:	4875      	ldr	r0, [pc, #468]	@ (8000468 <display7SEG+0x31c>)
 8000292:	f001 fdb0 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, SET);
 8000296:	2201      	movs	r2, #1
 8000298:	2140      	movs	r1, #64	@ 0x40
 800029a:	4873      	ldr	r0, [pc, #460]	@ (8000468 <display7SEG+0x31c>)
 800029c:	f001 fdab 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	2180      	movs	r1, #128	@ 0x80
 80002a4:	4870      	ldr	r0, [pc, #448]	@ (8000468 <display7SEG+0x31c>)
 80002a6:	f001 fda6 	bl	8001df6 <HAL_GPIO_WritePin>
			break;
 80002aa:	e0d8      	b.n	800045e <display7SEG+0x312>
		case 4:
			HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, SET);
 80002ac:	2201      	movs	r2, #1
 80002ae:	2102      	movs	r1, #2
 80002b0:	486d      	ldr	r0, [pc, #436]	@ (8000468 <display7SEG+0x31c>)
 80002b2:	f001 fda0 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, RESET);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2104      	movs	r1, #4
 80002ba:	486b      	ldr	r0, [pc, #428]	@ (8000468 <display7SEG+0x31c>)
 80002bc:	f001 fd9b 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 80002c0:	2200      	movs	r2, #0
 80002c2:	2108      	movs	r1, #8
 80002c4:	4868      	ldr	r0, [pc, #416]	@ (8000468 <display7SEG+0x31c>)
 80002c6:	f001 fd96 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	2110      	movs	r1, #16
 80002ce:	4866      	ldr	r0, [pc, #408]	@ (8000468 <display7SEG+0x31c>)
 80002d0:	f001 fd91 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, SET);
 80002d4:	2201      	movs	r2, #1
 80002d6:	2120      	movs	r1, #32
 80002d8:	4863      	ldr	r0, [pc, #396]	@ (8000468 <display7SEG+0x31c>)
 80002da:	f001 fd8c 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2140      	movs	r1, #64	@ 0x40
 80002e2:	4861      	ldr	r0, [pc, #388]	@ (8000468 <display7SEG+0x31c>)
 80002e4:	f001 fd87 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, RESET);
 80002e8:	2200      	movs	r2, #0
 80002ea:	2180      	movs	r1, #128	@ 0x80
 80002ec:	485e      	ldr	r0, [pc, #376]	@ (8000468 <display7SEG+0x31c>)
 80002ee:	f001 fd82 	bl	8001df6 <HAL_GPIO_WritePin>
			break;
 80002f2:	e0b4      	b.n	800045e <display7SEG+0x312>
		case 5:
			HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2102      	movs	r1, #2
 80002f8:	485b      	ldr	r0, [pc, #364]	@ (8000468 <display7SEG+0x31c>)
 80002fa:	f001 fd7c 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2104      	movs	r1, #4
 8000302:	4859      	ldr	r0, [pc, #356]	@ (8000468 <display7SEG+0x31c>)
 8000304:	f001 fd77 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2108      	movs	r1, #8
 800030c:	4856      	ldr	r0, [pc, #344]	@ (8000468 <display7SEG+0x31c>)
 800030e:	f001 fd72 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2110      	movs	r1, #16
 8000316:	4854      	ldr	r0, [pc, #336]	@ (8000468 <display7SEG+0x31c>)
 8000318:	f001 fd6d 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, SET);
 800031c:	2201      	movs	r2, #1
 800031e:	2120      	movs	r1, #32
 8000320:	4851      	ldr	r0, [pc, #324]	@ (8000468 <display7SEG+0x31c>)
 8000322:	f001 fd68 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, RESET);
 8000326:	2200      	movs	r2, #0
 8000328:	2140      	movs	r1, #64	@ 0x40
 800032a:	484f      	ldr	r0, [pc, #316]	@ (8000468 <display7SEG+0x31c>)
 800032c:	f001 fd63 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, RESET);
 8000330:	2200      	movs	r2, #0
 8000332:	2180      	movs	r1, #128	@ 0x80
 8000334:	484c      	ldr	r0, [pc, #304]	@ (8000468 <display7SEG+0x31c>)
 8000336:	f001 fd5e 	bl	8001df6 <HAL_GPIO_WritePin>
			break;
 800033a:	e090      	b.n	800045e <display7SEG+0x312>
		case 6:
			HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, RESET);
 800033c:	2200      	movs	r2, #0
 800033e:	2102      	movs	r1, #2
 8000340:	4849      	ldr	r0, [pc, #292]	@ (8000468 <display7SEG+0x31c>)
 8000342:	f001 fd58 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, SET);
 8000346:	2201      	movs	r2, #1
 8000348:	2104      	movs	r1, #4
 800034a:	4847      	ldr	r0, [pc, #284]	@ (8000468 <display7SEG+0x31c>)
 800034c:	f001 fd53 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 8000350:	2200      	movs	r2, #0
 8000352:	2108      	movs	r1, #8
 8000354:	4844      	ldr	r0, [pc, #272]	@ (8000468 <display7SEG+0x31c>)
 8000356:	f001 fd4e 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, RESET);
 800035a:	2200      	movs	r2, #0
 800035c:	2110      	movs	r1, #16
 800035e:	4842      	ldr	r0, [pc, #264]	@ (8000468 <display7SEG+0x31c>)
 8000360:	f001 fd49 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2120      	movs	r1, #32
 8000368:	483f      	ldr	r0, [pc, #252]	@ (8000468 <display7SEG+0x31c>)
 800036a:	f001 fd44 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2140      	movs	r1, #64	@ 0x40
 8000372:	483d      	ldr	r0, [pc, #244]	@ (8000468 <display7SEG+0x31c>)
 8000374:	f001 fd3f 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2180      	movs	r1, #128	@ 0x80
 800037c:	483a      	ldr	r0, [pc, #232]	@ (8000468 <display7SEG+0x31c>)
 800037e:	f001 fd3a 	bl	8001df6 <HAL_GPIO_WritePin>
			break;
 8000382:	e06c      	b.n	800045e <display7SEG+0x312>
		case 7:
			HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2102      	movs	r1, #2
 8000388:	4837      	ldr	r0, [pc, #220]	@ (8000468 <display7SEG+0x31c>)
 800038a:	f001 fd34 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, RESET);
 800038e:	2200      	movs	r2, #0
 8000390:	2104      	movs	r1, #4
 8000392:	4835      	ldr	r0, [pc, #212]	@ (8000468 <display7SEG+0x31c>)
 8000394:	f001 fd2f 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2108      	movs	r1, #8
 800039c:	4832      	ldr	r0, [pc, #200]	@ (8000468 <display7SEG+0x31c>)
 800039e:	f001 fd2a 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, SET);
 80003a2:	2201      	movs	r2, #1
 80003a4:	2110      	movs	r1, #16
 80003a6:	4830      	ldr	r0, [pc, #192]	@ (8000468 <display7SEG+0x31c>)
 80003a8:	f001 fd25 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, SET);
 80003ac:	2201      	movs	r2, #1
 80003ae:	2120      	movs	r1, #32
 80003b0:	482d      	ldr	r0, [pc, #180]	@ (8000468 <display7SEG+0x31c>)
 80003b2:	f001 fd20 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, SET);
 80003b6:	2201      	movs	r2, #1
 80003b8:	2140      	movs	r1, #64	@ 0x40
 80003ba:	482b      	ldr	r0, [pc, #172]	@ (8000468 <display7SEG+0x31c>)
 80003bc:	f001 fd1b 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, SET);
 80003c0:	2201      	movs	r2, #1
 80003c2:	2180      	movs	r1, #128	@ 0x80
 80003c4:	4828      	ldr	r0, [pc, #160]	@ (8000468 <display7SEG+0x31c>)
 80003c6:	f001 fd16 	bl	8001df6 <HAL_GPIO_WritePin>
			break;
 80003ca:	e048      	b.n	800045e <display7SEG+0x312>
		case 8:
			HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	2102      	movs	r1, #2
 80003d0:	4825      	ldr	r0, [pc, #148]	@ (8000468 <display7SEG+0x31c>)
 80003d2:	f001 fd10 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, RESET);
 80003d6:	2200      	movs	r2, #0
 80003d8:	2104      	movs	r1, #4
 80003da:	4823      	ldr	r0, [pc, #140]	@ (8000468 <display7SEG+0x31c>)
 80003dc:	f001 fd0b 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2108      	movs	r1, #8
 80003e4:	4820      	ldr	r0, [pc, #128]	@ (8000468 <display7SEG+0x31c>)
 80003e6:	f001 fd06 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, RESET);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2110      	movs	r1, #16
 80003ee:	481e      	ldr	r0, [pc, #120]	@ (8000468 <display7SEG+0x31c>)
 80003f0:	f001 fd01 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2120      	movs	r1, #32
 80003f8:	481b      	ldr	r0, [pc, #108]	@ (8000468 <display7SEG+0x31c>)
 80003fa:	f001 fcfc 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	2140      	movs	r1, #64	@ 0x40
 8000402:	4819      	ldr	r0, [pc, #100]	@ (8000468 <display7SEG+0x31c>)
 8000404:	f001 fcf7 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, RESET);
 8000408:	2200      	movs	r2, #0
 800040a:	2180      	movs	r1, #128	@ 0x80
 800040c:	4816      	ldr	r0, [pc, #88]	@ (8000468 <display7SEG+0x31c>)
 800040e:	f001 fcf2 	bl	8001df6 <HAL_GPIO_WritePin>
			break;
 8000412:	e024      	b.n	800045e <display7SEG+0x312>
		case 9:
			HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, RESET);
 8000414:	2200      	movs	r2, #0
 8000416:	2102      	movs	r1, #2
 8000418:	4813      	ldr	r0, [pc, #76]	@ (8000468 <display7SEG+0x31c>)
 800041a:	f001 fcec 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, RESET);
 800041e:	2200      	movs	r2, #0
 8000420:	2104      	movs	r1, #4
 8000422:	4811      	ldr	r0, [pc, #68]	@ (8000468 <display7SEG+0x31c>)
 8000424:	f001 fce7 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 8000428:	2200      	movs	r2, #0
 800042a:	2108      	movs	r1, #8
 800042c:	480e      	ldr	r0, [pc, #56]	@ (8000468 <display7SEG+0x31c>)
 800042e:	f001 fce2 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	2110      	movs	r1, #16
 8000436:	480c      	ldr	r0, [pc, #48]	@ (8000468 <display7SEG+0x31c>)
 8000438:	f001 fcdd 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, SET);
 800043c:	2201      	movs	r2, #1
 800043e:	2120      	movs	r1, #32
 8000440:	4809      	ldr	r0, [pc, #36]	@ (8000468 <display7SEG+0x31c>)
 8000442:	f001 fcd8 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, RESET);
 8000446:	2200      	movs	r2, #0
 8000448:	2140      	movs	r1, #64	@ 0x40
 800044a:	4807      	ldr	r0, [pc, #28]	@ (8000468 <display7SEG+0x31c>)
 800044c:	f001 fcd3 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, RESET);
 8000450:	2200      	movs	r2, #0
 8000452:	2180      	movs	r1, #128	@ 0x80
 8000454:	4804      	ldr	r0, [pc, #16]	@ (8000468 <display7SEG+0x31c>)
 8000456:	f001 fcce 	bl	8001df6 <HAL_GPIO_WritePin>
			break;
 800045a:	e000      	b.n	800045e <display7SEG+0x312>
		default:
			break;
 800045c:	bf00      	nop
		}
}
 800045e:	bf00      	nop
 8000460:	3708      	adds	r7, #8
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40010800 	.word	0x40010800

0800046c <setTime>:
 */
#include "Timer.h"
int flag[NUM_BUFFER + 3] = {0};
int counter[NUM_BUFFER + 3] = {0};

void setTime(int duration, int index){
 800046c:	b480      	push	{r7}
 800046e:	b083      	sub	sp, #12
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
	if(index <= NUM_BUFFER + 2){
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	2b04      	cmp	r3, #4
 800047a:	dc0f      	bgt.n	800049c <setTime+0x30>
		flag[index] = 0;
 800047c:	4a0a      	ldr	r2, [pc, #40]	@ (80004a8 <setTime+0x3c>)
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	2100      	movs	r1, #0
 8000482:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		counter[index] = duration / DURATION;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a08      	ldr	r2, [pc, #32]	@ (80004ac <setTime+0x40>)
 800048a:	fb82 1203 	smull	r1, r2, r2, r3
 800048e:	1092      	asrs	r2, r2, #2
 8000490:	17db      	asrs	r3, r3, #31
 8000492:	1ad2      	subs	r2, r2, r3
 8000494:	4906      	ldr	r1, [pc, #24]	@ (80004b0 <setTime+0x44>)
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr
 80004a6:	bf00      	nop
 80004a8:	200000d8 	.word	0x200000d8
 80004ac:	66666667 	.word	0x66666667
 80004b0:	200000ec 	.word	0x200000ec

080004b4 <runTime>:

void runTime(){
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
	for(int i = 0;i <= NUM_BUFFER + 2; ++i){
 80004ba:	2300      	movs	r3, #0
 80004bc:	607b      	str	r3, [r7, #4]
 80004be:	e01c      	b.n	80004fa <runTime+0x46>
		if(counter[i] > 0){
 80004c0:	4a12      	ldr	r2, [pc, #72]	@ (800050c <runTime+0x58>)
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	dd13      	ble.n	80004f4 <runTime+0x40>
			counter[i]--;
 80004cc:	4a0f      	ldr	r2, [pc, #60]	@ (800050c <runTime+0x58>)
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d4:	1e5a      	subs	r2, r3, #1
 80004d6:	490d      	ldr	r1, [pc, #52]	@ (800050c <runTime+0x58>)
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(counter[i] <= 0) flag[i] = 1;
 80004de:	4a0b      	ldr	r2, [pc, #44]	@ (800050c <runTime+0x58>)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	dc04      	bgt.n	80004f4 <runTime+0x40>
 80004ea:	4a09      	ldr	r2, [pc, #36]	@ (8000510 <runTime+0x5c>)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	2101      	movs	r1, #1
 80004f0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0;i <= NUM_BUFFER + 2; ++i){
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	3301      	adds	r3, #1
 80004f8:	607b      	str	r3, [r7, #4]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	2b04      	cmp	r3, #4
 80004fe:	dddf      	ble.n	80004c0 <runTime+0xc>
		}
	}
}
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr
 800050c:	200000ec 	.word	0x200000ec
 8000510:	200000d8 	.word	0x200000d8

08000514 <isButtonPressed>:
int button_long_pressed[NUM_BUTTON] = {0};
Segments button[NUM_BUTTON] = {
		{BUT0_GPIO_Port,BUT0_Pin}, {BUT1_GPIO_Port,BUT1_Pin}, {BUT2_GPIO_Port,BUT2_Pin}
};
int button_flag[NUM_BUTTON] = {0};
int isButtonPressed(int index){
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	if(button_flag[index] == 1){
 800051c:	4a09      	ldr	r2, [pc, #36]	@ (8000544 <isButtonPressed+0x30>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d106      	bne.n	8000536 <isButtonPressed+0x22>
		button_flag[index] = 0;
 8000528:	4a06      	ldr	r2, [pc, #24]	@ (8000544 <isButtonPressed+0x30>)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	2100      	movs	r1, #0
 800052e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		return 1;
 8000532:	2301      	movs	r3, #1
 8000534:	e000      	b.n	8000538 <isButtonPressed+0x24>
	}
	return 0;
 8000536:	2300      	movs	r3, #0
}
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	bc80      	pop	{r7}
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	20000100 	.word	0x20000100

08000548 <getKeyInput>:
	HAL_GPIO_WritePin(leds[0][button_state - 1].port, leds[0][button_state - 1].pin, SET);
	HAL_GPIO_WritePin(leds[1][button_state - 1].port, leds[1][button_state - 1].pin, SET);
	setTime(250,NUM_BUFFER + 2);
}

void getKeyInput(){
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
  // Add your key
  for(int i = 0;i < NUM_BUTTON; ++i){
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	e07b      	b.n	800064c <getKeyInput+0x104>
	  KeyReg2[i] = KeyReg1[i];
 8000554:	4a41      	ldr	r2, [pc, #260]	@ (800065c <getKeyInput+0x114>)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800055c:	4940      	ldr	r1, [pc, #256]	@ (8000660 <getKeyInput+0x118>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  KeyReg1[i] = KeyReg0[i];
 8000564:	4a3f      	ldr	r2, [pc, #252]	@ (8000664 <getKeyInput+0x11c>)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800056c:	493b      	ldr	r1, [pc, #236]	@ (800065c <getKeyInput+0x114>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  KeyReg0[i] = HAL_GPIO_ReadPin(button[i].port, button[i].pin);
 8000574:	4a3c      	ldr	r2, [pc, #240]	@ (8000668 <getKeyInput+0x120>)
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800057c:	493a      	ldr	r1, [pc, #232]	@ (8000668 <getKeyInput+0x120>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	00db      	lsls	r3, r3, #3
 8000582:	440b      	add	r3, r1
 8000584:	889b      	ldrh	r3, [r3, #4]
 8000586:	4619      	mov	r1, r3
 8000588:	4610      	mov	r0, r2
 800058a:	f001 fc1d 	bl	8001dc8 <HAL_GPIO_ReadPin>
 800058e:	4603      	mov	r3, r0
 8000590:	4619      	mov	r1, r3
 8000592:	4a34      	ldr	r2, [pc, #208]	@ (8000664 <getKeyInput+0x11c>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	  if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])){
 800059a:	4a30      	ldr	r2, [pc, #192]	@ (800065c <getKeyInput+0x114>)
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005a2:	4930      	ldr	r1, [pc, #192]	@ (8000664 <getKeyInput+0x11c>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d14b      	bne.n	8000646 <getKeyInput+0xfe>
 80005ae:	4a2b      	ldr	r2, [pc, #172]	@ (800065c <getKeyInput+0x114>)
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005b6:	492a      	ldr	r1, [pc, #168]	@ (8000660 <getKeyInput+0x118>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005be:	429a      	cmp	r2, r3
 80005c0:	d141      	bne.n	8000646 <getKeyInput+0xfe>
	    if (KeyReg2[i] != KeyReg3[i]){
 80005c2:	4a27      	ldr	r2, [pc, #156]	@ (8000660 <getKeyInput+0x118>)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005ca:	4928      	ldr	r1, [pc, #160]	@ (800066c <getKeyInput+0x124>)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d018      	beq.n	8000608 <getKeyInput+0xc0>
	      KeyReg3[i] = KeyReg2[i];
 80005d6:	4a22      	ldr	r2, [pc, #136]	@ (8000660 <getKeyInput+0x118>)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005de:	4923      	ldr	r1, [pc, #140]	@ (800066c <getKeyInput+0x124>)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	      if (KeyReg2[i] == PRESSED_STATE){
 80005e6:	4a1e      	ldr	r2, [pc, #120]	@ (8000660 <getKeyInput+0x118>)
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d129      	bne.n	8000646 <getKeyInput+0xfe>
	        TimeOutForKeyPress[i] = 50;
 80005f2:	4a1f      	ldr	r2, [pc, #124]	@ (8000670 <getKeyInput+0x128>)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2132      	movs	r1, #50	@ 0x32
 80005f8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	        button_flag[i] = 1;
 80005fc:	4a1d      	ldr	r2, [pc, #116]	@ (8000674 <getKeyInput+0x12c>)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2101      	movs	r1, #1
 8000602:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000606:	e01e      	b.n	8000646 <getKeyInput+0xfe>
	      }
	    }
	    else{
	        TimeOutForKeyPress[i]--;
 8000608:	4a19      	ldr	r2, [pc, #100]	@ (8000670 <getKeyInput+0x128>)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000610:	1e5a      	subs	r2, r3, #1
 8000612:	4917      	ldr	r1, [pc, #92]	@ (8000670 <getKeyInput+0x128>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	        if (TimeOutForKeyPress[i] == 0){
 800061a:	4a15      	ldr	r2, [pc, #84]	@ (8000670 <getKeyInput+0x128>)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d10f      	bne.n	8000646 <getKeyInput+0xfe>
	        	TimeOutForKeyPress[i] = 50;
 8000626:	4a12      	ldr	r2, [pc, #72]	@ (8000670 <getKeyInput+0x128>)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2132      	movs	r1, #50	@ 0x32
 800062c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	        	if (KeyReg2[i] == PRESSED_STATE){
 8000630:	4a0b      	ldr	r2, [pc, #44]	@ (8000660 <getKeyInput+0x118>)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d104      	bne.n	8000646 <getKeyInput+0xfe>
	        		KeyReg3[i] = NORMAL_STATE;
 800063c:	4a0b      	ldr	r2, [pc, #44]	@ (800066c <getKeyInput+0x124>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	2101      	movs	r1, #1
 8000642:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(int i = 0;i < NUM_BUTTON; ++i){
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3301      	adds	r3, #1
 800064a:	607b      	str	r3, [r7, #4]
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2b02      	cmp	r3, #2
 8000650:	dd80      	ble.n	8000554 <getKeyInput+0xc>
	        	}
	        }
	    }
	  }
  }
}
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000000c 	.word	0x2000000c
 8000660:	20000018 	.word	0x20000018
 8000664:	20000000 	.word	0x20000000
 8000668:	2000003c 	.word	0x2000003c
 800066c:	20000024 	.word	0x20000024
 8000670:	20000030 	.word	0x20000030
 8000674:	20000100 	.word	0x20000100

08000678 <fsm_automation_run>:
 *  Created on: Sep 26, 2024
 *      Author: LENOVO
 */
#include "fsm_automatic.h"

void fsm_automation_run(int index){
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	switch(status[index]){
 8000680:	4aa3      	ldr	r2, [pc, #652]	@ (8000910 <fsm_automation_run+0x298>)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000688:	3b01      	subs	r3, #1
 800068a:	2b03      	cmp	r3, #3
 800068c:	f200 827b 	bhi.w	8000b86 <fsm_automation_run+0x50e>
 8000690:	a201      	add	r2, pc, #4	@ (adr r2, 8000698 <fsm_automation_run+0x20>)
 8000692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000696:	bf00      	nop
 8000698:	080006a9 	.word	0x080006a9
 800069c:	080007e7 	.word	0x080007e7
 80006a0:	08000935 	.word	0x08000935
 80006a4:	08000a5f 	.word	0x08000a5f
	case INIT:
		HAL_GPIO_WritePin(leds[index][0].port, leds[index][0].pin, SET);
 80006a8:	499a      	ldr	r1, [pc, #616]	@ (8000914 <fsm_automation_run+0x29c>)
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	4613      	mov	r3, r2
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	440b      	add	r3, r1
 80006b6:	6818      	ldr	r0, [r3, #0]
 80006b8:	4996      	ldr	r1, [pc, #600]	@ (8000914 <fsm_automation_run+0x29c>)
 80006ba:	687a      	ldr	r2, [r7, #4]
 80006bc:	4613      	mov	r3, r2
 80006be:	005b      	lsls	r3, r3, #1
 80006c0:	4413      	add	r3, r2
 80006c2:	00db      	lsls	r3, r3, #3
 80006c4:	440b      	add	r3, r1
 80006c6:	3304      	adds	r3, #4
 80006c8:	881b      	ldrh	r3, [r3, #0]
 80006ca:	2201      	movs	r2, #1
 80006cc:	4619      	mov	r1, r3
 80006ce:	f001 fb92 	bl	8001df6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(leds[index][1].port, leds[index][1].pin, SET);
 80006d2:	4990      	ldr	r1, [pc, #576]	@ (8000914 <fsm_automation_run+0x29c>)
 80006d4:	687a      	ldr	r2, [r7, #4]
 80006d6:	4613      	mov	r3, r2
 80006d8:	005b      	lsls	r3, r3, #1
 80006da:	4413      	add	r3, r2
 80006dc:	00db      	lsls	r3, r3, #3
 80006de:	440b      	add	r3, r1
 80006e0:	3308      	adds	r3, #8
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	498b      	ldr	r1, [pc, #556]	@ (8000914 <fsm_automation_run+0x29c>)
 80006e6:	687a      	ldr	r2, [r7, #4]
 80006e8:	4613      	mov	r3, r2
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	4413      	add	r3, r2
 80006ee:	00db      	lsls	r3, r3, #3
 80006f0:	440b      	add	r3, r1
 80006f2:	330c      	adds	r3, #12
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	2201      	movs	r2, #1
 80006f8:	4619      	mov	r1, r3
 80006fa:	f001 fb7c 	bl	8001df6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(leds[index][2].port, leds[index][2].pin, SET);
 80006fe:	4985      	ldr	r1, [pc, #532]	@ (8000914 <fsm_automation_run+0x29c>)
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	4613      	mov	r3, r2
 8000704:	005b      	lsls	r3, r3, #1
 8000706:	4413      	add	r3, r2
 8000708:	00db      	lsls	r3, r3, #3
 800070a:	440b      	add	r3, r1
 800070c:	3310      	adds	r3, #16
 800070e:	6818      	ldr	r0, [r3, #0]
 8000710:	4980      	ldr	r1, [pc, #512]	@ (8000914 <fsm_automation_run+0x29c>)
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4613      	mov	r3, r2
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	4413      	add	r3, r2
 800071a:	00db      	lsls	r3, r3, #3
 800071c:	440b      	add	r3, r1
 800071e:	3314      	adds	r3, #20
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	2201      	movs	r2, #1
 8000724:	4619      	mov	r1, r3
 8000726:	f001 fb66 	bl	8001df6 <HAL_GPIO_WritePin>
		if(!index){
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d111      	bne.n	8000754 <fsm_automation_run+0xdc>
			status[index] = AUTO_RED;
 8000730:	4a77      	ldr	r2, [pc, #476]	@ (8000910 <fsm_automation_run+0x298>)
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2102      	movs	r1, #2
 8000736:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			time_buffer[index] = TIME_RED;
 800073a:	4b77      	ldr	r3, [pc, #476]	@ (8000918 <fsm_automation_run+0x2a0>)
 800073c:	681a      	ldr	r2, [r3, #0]
 800073e:	4977      	ldr	r1, [pc, #476]	@ (800091c <fsm_automation_run+0x2a4>)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			setTime(TIME_RED,index);
 8000746:	4b74      	ldr	r3, [pc, #464]	@ (8000918 <fsm_automation_run+0x2a0>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	6879      	ldr	r1, [r7, #4]
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff fe8d 	bl	800046c <setTime>
 8000752:	e010      	b.n	8000776 <fsm_automation_run+0xfe>
		}else {
			status[index] = AUTO_GREEN;
 8000754:	4a6e      	ldr	r2, [pc, #440]	@ (8000910 <fsm_automation_run+0x298>)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2103      	movs	r1, #3
 800075a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			time_buffer[index] = TIME_GREEN;
 800075e:	4b70      	ldr	r3, [pc, #448]	@ (8000920 <fsm_automation_run+0x2a8>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	496e      	ldr	r1, [pc, #440]	@ (800091c <fsm_automation_run+0x2a4>)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			setTime(TIME_GREEN,index);
 800076a:	4b6d      	ldr	r3, [pc, #436]	@ (8000920 <fsm_automation_run+0x2a8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	6879      	ldr	r1, [r7, #4]
 8000770:	4618      	mov	r0, r3
 8000772:	f7ff fe7b 	bl	800046c <setTime>
		}
		if(isButtonPressed(0)){
 8000776:	2000      	movs	r0, #0
 8000778:	f7ff fecc 	bl	8000514 <isButtonPressed>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d026      	beq.n	80007d0 <fsm_automation_run+0x158>
			prev_status[0] = status[0];
 8000782:	4b63      	ldr	r3, [pc, #396]	@ (8000910 <fsm_automation_run+0x298>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	4a67      	ldr	r2, [pc, #412]	@ (8000924 <fsm_automation_run+0x2ac>)
 8000788:	6013      	str	r3, [r2, #0]
			prev_status[1] = status[1];
 800078a:	4b61      	ldr	r3, [pc, #388]	@ (8000910 <fsm_automation_run+0x298>)
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	4a65      	ldr	r2, [pc, #404]	@ (8000924 <fsm_automation_run+0x2ac>)
 8000790:	6053      	str	r3, [r2, #4]
			status[0] = MANUAL_RED;
 8000792:	4b5f      	ldr	r3, [pc, #380]	@ (8000910 <fsm_automation_run+0x298>)
 8000794:	220c      	movs	r2, #12
 8000796:	601a      	str	r2, [r3, #0]
			status[1] = MANUAL_RED;
 8000798:	4b5d      	ldr	r3, [pc, #372]	@ (8000910 <fsm_automation_run+0x298>)
 800079a:	220c      	movs	r2, #12
 800079c:	605a      	str	r2, [r3, #4]
			HAL_GPIO_WritePin(leds[0][0].port, leds[0][0].pin, RESET);
 800079e:	4b5d      	ldr	r3, [pc, #372]	@ (8000914 <fsm_automation_run+0x29c>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a5c      	ldr	r2, [pc, #368]	@ (8000914 <fsm_automation_run+0x29c>)
 80007a4:	8891      	ldrh	r1, [r2, #4]
 80007a6:	2200      	movs	r2, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f001 fb24 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(leds[1][0].port, leds[1][0].pin, RESET);
 80007ae:	4b59      	ldr	r3, [pc, #356]	@ (8000914 <fsm_automation_run+0x29c>)
 80007b0:	699b      	ldr	r3, [r3, #24]
 80007b2:	4a58      	ldr	r2, [pc, #352]	@ (8000914 <fsm_automation_run+0x29c>)
 80007b4:	8b91      	ldrh	r1, [r2, #28]
 80007b6:	2200      	movs	r2, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f001 fb1c 	bl	8001df6 <HAL_GPIO_WritePin>
			temp = TIME_RED;
 80007be:	4b56      	ldr	r3, [pc, #344]	@ (8000918 <fsm_automation_run+0x2a0>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a59      	ldr	r2, [pc, #356]	@ (8000928 <fsm_automation_run+0x2b0>)
 80007c4:	6013      	str	r3, [r2, #0]
			setTime(250,NUM_BUFFER + 2);
 80007c6:	2104      	movs	r1, #4
 80007c8:	20fa      	movs	r0, #250	@ 0xfa
 80007ca:	f7ff fe4f 	bl	800046c <setTime>
		}
		else if(isButtonPressed(1) || isButtonPressed(2)){}
		break;
 80007ce:	e1dc      	b.n	8000b8a <fsm_automation_run+0x512>
		else if(isButtonPressed(1) || isButtonPressed(2)){}
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff fe9f 	bl	8000514 <isButtonPressed>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	f040 81d6 	bne.w	8000b8a <fsm_automation_run+0x512>
 80007de:	2002      	movs	r0, #2
 80007e0:	f7ff fe98 	bl	8000514 <isButtonPressed>
		break;
 80007e4:	e1d1      	b.n	8000b8a <fsm_automation_run+0x512>
	case AUTO_RED:
		HAL_GPIO_WritePin(leds[index][0].port, leds[index][0].pin, RESET);
 80007e6:	494b      	ldr	r1, [pc, #300]	@ (8000914 <fsm_automation_run+0x29c>)
 80007e8:	687a      	ldr	r2, [r7, #4]
 80007ea:	4613      	mov	r3, r2
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	4413      	add	r3, r2
 80007f0:	00db      	lsls	r3, r3, #3
 80007f2:	440b      	add	r3, r1
 80007f4:	6818      	ldr	r0, [r3, #0]
 80007f6:	4947      	ldr	r1, [pc, #284]	@ (8000914 <fsm_automation_run+0x29c>)
 80007f8:	687a      	ldr	r2, [r7, #4]
 80007fa:	4613      	mov	r3, r2
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	4413      	add	r3, r2
 8000800:	00db      	lsls	r3, r3, #3
 8000802:	440b      	add	r3, r1
 8000804:	3304      	adds	r3, #4
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	2200      	movs	r2, #0
 800080a:	4619      	mov	r1, r3
 800080c:	f001 faf3 	bl	8001df6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(leds[index][1].port, leds[index][1].pin, SET);
 8000810:	4940      	ldr	r1, [pc, #256]	@ (8000914 <fsm_automation_run+0x29c>)
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	4613      	mov	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	4413      	add	r3, r2
 800081a:	00db      	lsls	r3, r3, #3
 800081c:	440b      	add	r3, r1
 800081e:	3308      	adds	r3, #8
 8000820:	6818      	ldr	r0, [r3, #0]
 8000822:	493c      	ldr	r1, [pc, #240]	@ (8000914 <fsm_automation_run+0x29c>)
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	4613      	mov	r3, r2
 8000828:	005b      	lsls	r3, r3, #1
 800082a:	4413      	add	r3, r2
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	440b      	add	r3, r1
 8000830:	330c      	adds	r3, #12
 8000832:	881b      	ldrh	r3, [r3, #0]
 8000834:	2201      	movs	r2, #1
 8000836:	4619      	mov	r1, r3
 8000838:	f001 fadd 	bl	8001df6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(leds[index][2].port, leds[index][2].pin, SET);
 800083c:	4935      	ldr	r1, [pc, #212]	@ (8000914 <fsm_automation_run+0x29c>)
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	4613      	mov	r3, r2
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	4413      	add	r3, r2
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	440b      	add	r3, r1
 800084a:	3310      	adds	r3, #16
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	4931      	ldr	r1, [pc, #196]	@ (8000914 <fsm_automation_run+0x29c>)
 8000850:	687a      	ldr	r2, [r7, #4]
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	440b      	add	r3, r1
 800085c:	3314      	adds	r3, #20
 800085e:	881b      	ldrh	r3, [r3, #0]
 8000860:	2201      	movs	r2, #1
 8000862:	4619      	mov	r1, r3
 8000864:	f001 fac7 	bl	8001df6 <HAL_GPIO_WritePin>
		run_automatic_7seg(idx);
 8000868:	4b30      	ldr	r3, [pc, #192]	@ (800092c <fsm_automation_run+0x2b4>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4618      	mov	r0, r3
 800086e:	f000 f9a9 	bl	8000bc4 <run_automatic_7seg>
		if(flag[index]){
 8000872:	4a2f      	ldr	r2, [pc, #188]	@ (8000930 <fsm_automation_run+0x2b8>)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d010      	beq.n	80008a0 <fsm_automation_run+0x228>
			status[index] = AUTO_GREEN;
 800087e:	4a24      	ldr	r2, [pc, #144]	@ (8000910 <fsm_automation_run+0x298>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2103      	movs	r1, #3
 8000884:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			time_buffer[index] = TIME_GREEN;
 8000888:	4b25      	ldr	r3, [pc, #148]	@ (8000920 <fsm_automation_run+0x2a8>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4923      	ldr	r1, [pc, #140]	@ (800091c <fsm_automation_run+0x2a4>)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			setTime(TIME_GREEN,index);
 8000894:	4b22      	ldr	r3, [pc, #136]	@ (8000920 <fsm_automation_run+0x2a8>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	6879      	ldr	r1, [r7, #4]
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fde6 	bl	800046c <setTime>
		}
		if(isButtonPressed(0)){
 80008a0:	2000      	movs	r0, #0
 80008a2:	f7ff fe37 	bl	8000514 <isButtonPressed>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d026      	beq.n	80008fa <fsm_automation_run+0x282>
			prev_status[0] = status[0];
 80008ac:	4b18      	ldr	r3, [pc, #96]	@ (8000910 <fsm_automation_run+0x298>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a1c      	ldr	r2, [pc, #112]	@ (8000924 <fsm_automation_run+0x2ac>)
 80008b2:	6013      	str	r3, [r2, #0]
			prev_status[1] = status[1];
 80008b4:	4b16      	ldr	r3, [pc, #88]	@ (8000910 <fsm_automation_run+0x298>)
 80008b6:	685b      	ldr	r3, [r3, #4]
 80008b8:	4a1a      	ldr	r2, [pc, #104]	@ (8000924 <fsm_automation_run+0x2ac>)
 80008ba:	6053      	str	r3, [r2, #4]
			status[0] = MANUAL_RED;
 80008bc:	4b14      	ldr	r3, [pc, #80]	@ (8000910 <fsm_automation_run+0x298>)
 80008be:	220c      	movs	r2, #12
 80008c0:	601a      	str	r2, [r3, #0]
			status[1] = MANUAL_RED;
 80008c2:	4b13      	ldr	r3, [pc, #76]	@ (8000910 <fsm_automation_run+0x298>)
 80008c4:	220c      	movs	r2, #12
 80008c6:	605a      	str	r2, [r3, #4]
			HAL_GPIO_WritePin(leds[0][0].port, leds[0][0].pin, RESET);
 80008c8:	4b12      	ldr	r3, [pc, #72]	@ (8000914 <fsm_automation_run+0x29c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a11      	ldr	r2, [pc, #68]	@ (8000914 <fsm_automation_run+0x29c>)
 80008ce:	8891      	ldrh	r1, [r2, #4]
 80008d0:	2200      	movs	r2, #0
 80008d2:	4618      	mov	r0, r3
 80008d4:	f001 fa8f 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(leds[1][0].port, leds[1][0].pin, RESET);
 80008d8:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <fsm_automation_run+0x29c>)
 80008da:	699b      	ldr	r3, [r3, #24]
 80008dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000914 <fsm_automation_run+0x29c>)
 80008de:	8b91      	ldrh	r1, [r2, #28]
 80008e0:	2200      	movs	r2, #0
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fa87 	bl	8001df6 <HAL_GPIO_WritePin>
			temp = TIME_RED;
 80008e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <fsm_automation_run+0x2a0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000928 <fsm_automation_run+0x2b0>)
 80008ee:	6013      	str	r3, [r2, #0]
			setTime(250,NUM_BUFFER + 2);
 80008f0:	2104      	movs	r1, #4
 80008f2:	20fa      	movs	r0, #250	@ 0xfa
 80008f4:	f7ff fdba 	bl	800046c <setTime>
		}
		else if(isButtonPressed(1) || isButtonPressed(2)){}
		break;
 80008f8:	e149      	b.n	8000b8e <fsm_automation_run+0x516>
		else if(isButtonPressed(1) || isButtonPressed(2)){}
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff fe0a 	bl	8000514 <isButtonPressed>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	f040 8143 	bne.w	8000b8e <fsm_automation_run+0x516>
 8000908:	2002      	movs	r0, #2
 800090a:	f7ff fe03 	bl	8000514 <isButtonPressed>
		break;
 800090e:	e13e      	b.n	8000b8e <fsm_automation_run+0x516>
 8000910:	2000010c 	.word	0x2000010c
 8000914:	20000060 	.word	0x20000060
 8000918:	20000054 	.word	0x20000054
 800091c:	20000120 	.word	0x20000120
 8000920:	2000005c 	.word	0x2000005c
 8000924:	20000114 	.word	0x20000114
 8000928:	20000128 	.word	0x20000128
 800092c:	2000011c 	.word	0x2000011c
 8000930:	200000d8 	.word	0x200000d8
	case AUTO_GREEN:
		HAL_GPIO_WritePin(leds[index][0].port, leds[index][0].pin, SET);
 8000934:	499a      	ldr	r1, [pc, #616]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	4613      	mov	r3, r2
 800093a:	005b      	lsls	r3, r3, #1
 800093c:	4413      	add	r3, r2
 800093e:	00db      	lsls	r3, r3, #3
 8000940:	440b      	add	r3, r1
 8000942:	6818      	ldr	r0, [r3, #0]
 8000944:	4996      	ldr	r1, [pc, #600]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	4613      	mov	r3, r2
 800094a:	005b      	lsls	r3, r3, #1
 800094c:	4413      	add	r3, r2
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	440b      	add	r3, r1
 8000952:	3304      	adds	r3, #4
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	2201      	movs	r2, #1
 8000958:	4619      	mov	r1, r3
 800095a:	f001 fa4c 	bl	8001df6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(leds[index][1].port, leds[index][1].pin, RESET);
 800095e:	4990      	ldr	r1, [pc, #576]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	4613      	mov	r3, r2
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	4413      	add	r3, r2
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	440b      	add	r3, r1
 800096c:	3308      	adds	r3, #8
 800096e:	6818      	ldr	r0, [r3, #0]
 8000970:	498b      	ldr	r1, [pc, #556]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	4613      	mov	r3, r2
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	4413      	add	r3, r2
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	440b      	add	r3, r1
 800097e:	330c      	adds	r3, #12
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	2200      	movs	r2, #0
 8000984:	4619      	mov	r1, r3
 8000986:	f001 fa36 	bl	8001df6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(leds[index][2].port, leds[index][2].pin, SET);
 800098a:	4985      	ldr	r1, [pc, #532]	@ (8000ba0 <fsm_automation_run+0x528>)
 800098c:	687a      	ldr	r2, [r7, #4]
 800098e:	4613      	mov	r3, r2
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	4413      	add	r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	440b      	add	r3, r1
 8000998:	3310      	adds	r3, #16
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	4980      	ldr	r1, [pc, #512]	@ (8000ba0 <fsm_automation_run+0x528>)
 800099e:	687a      	ldr	r2, [r7, #4]
 80009a0:	4613      	mov	r3, r2
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	4413      	add	r3, r2
 80009a6:	00db      	lsls	r3, r3, #3
 80009a8:	440b      	add	r3, r1
 80009aa:	3314      	adds	r3, #20
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	2201      	movs	r2, #1
 80009b0:	4619      	mov	r1, r3
 80009b2:	f001 fa20 	bl	8001df6 <HAL_GPIO_WritePin>
		run_automatic_7seg(idx);
 80009b6:	4b7b      	ldr	r3, [pc, #492]	@ (8000ba4 <fsm_automation_run+0x52c>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 f902 	bl	8000bc4 <run_automatic_7seg>
		if(flag[index]){
 80009c0:	4a79      	ldr	r2, [pc, #484]	@ (8000ba8 <fsm_automation_run+0x530>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d010      	beq.n	80009ee <fsm_automation_run+0x376>
			status[index] = AUTO_YELLOW;
 80009cc:	4a77      	ldr	r2, [pc, #476]	@ (8000bac <fsm_automation_run+0x534>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2104      	movs	r1, #4
 80009d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			time_buffer[index] = TIME_YELLOW;
 80009d6:	4b76      	ldr	r3, [pc, #472]	@ (8000bb0 <fsm_automation_run+0x538>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	4976      	ldr	r1, [pc, #472]	@ (8000bb4 <fsm_automation_run+0x53c>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			setTime(TIME_YELLOW,index);
 80009e2:	4b73      	ldr	r3, [pc, #460]	@ (8000bb0 <fsm_automation_run+0x538>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	6879      	ldr	r1, [r7, #4]
 80009e8:	4618      	mov	r0, r3
 80009ea:	f7ff fd3f 	bl	800046c <setTime>
		}
		if(isButtonPressed(0)){
 80009ee:	2000      	movs	r0, #0
 80009f0:	f7ff fd90 	bl	8000514 <isButtonPressed>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d026      	beq.n	8000a48 <fsm_automation_run+0x3d0>
			prev_status[0] = status[0];
 80009fa:	4b6c      	ldr	r3, [pc, #432]	@ (8000bac <fsm_automation_run+0x534>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4a6e      	ldr	r2, [pc, #440]	@ (8000bb8 <fsm_automation_run+0x540>)
 8000a00:	6013      	str	r3, [r2, #0]
			prev_status[1] = status[1];
 8000a02:	4b6a      	ldr	r3, [pc, #424]	@ (8000bac <fsm_automation_run+0x534>)
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	4a6c      	ldr	r2, [pc, #432]	@ (8000bb8 <fsm_automation_run+0x540>)
 8000a08:	6053      	str	r3, [r2, #4]
			status[0] = MANUAL_RED;
 8000a0a:	4b68      	ldr	r3, [pc, #416]	@ (8000bac <fsm_automation_run+0x534>)
 8000a0c:	220c      	movs	r2, #12
 8000a0e:	601a      	str	r2, [r3, #0]
			status[1] = MANUAL_RED;
 8000a10:	4b66      	ldr	r3, [pc, #408]	@ (8000bac <fsm_automation_run+0x534>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	605a      	str	r2, [r3, #4]
			HAL_GPIO_WritePin(leds[0][0].port, leds[0][0].pin, RESET);
 8000a16:	4b62      	ldr	r3, [pc, #392]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a61      	ldr	r2, [pc, #388]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000a1c:	8891      	ldrh	r1, [r2, #4]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f001 f9e8 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(leds[1][0].port, leds[1][0].pin, RESET);
 8000a26:	4b5e      	ldr	r3, [pc, #376]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000a28:	699b      	ldr	r3, [r3, #24]
 8000a2a:	4a5d      	ldr	r2, [pc, #372]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000a2c:	8b91      	ldrh	r1, [r2, #28]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	4618      	mov	r0, r3
 8000a32:	f001 f9e0 	bl	8001df6 <HAL_GPIO_WritePin>
			temp = TIME_RED;
 8000a36:	4b61      	ldr	r3, [pc, #388]	@ (8000bbc <fsm_automation_run+0x544>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a61      	ldr	r2, [pc, #388]	@ (8000bc0 <fsm_automation_run+0x548>)
 8000a3c:	6013      	str	r3, [r2, #0]
			setTime(250,NUM_BUFFER + 2);
 8000a3e:	2104      	movs	r1, #4
 8000a40:	20fa      	movs	r0, #250	@ 0xfa
 8000a42:	f7ff fd13 	bl	800046c <setTime>
		}
		else if(isButtonPressed(1) || isButtonPressed(2)){}
		break;
 8000a46:	e0a4      	b.n	8000b92 <fsm_automation_run+0x51a>
		else if(isButtonPressed(1) || isButtonPressed(2)){}
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f7ff fd63 	bl	8000514 <isButtonPressed>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	f040 809e 	bne.w	8000b92 <fsm_automation_run+0x51a>
 8000a56:	2002      	movs	r0, #2
 8000a58:	f7ff fd5c 	bl	8000514 <isButtonPressed>
		break;
 8000a5c:	e099      	b.n	8000b92 <fsm_automation_run+0x51a>
	case AUTO_YELLOW:
		HAL_GPIO_WritePin(leds[index][0].port, leds[index][0].pin, SET);
 8000a5e:	4950      	ldr	r1, [pc, #320]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000a60:	687a      	ldr	r2, [r7, #4]
 8000a62:	4613      	mov	r3, r2
 8000a64:	005b      	lsls	r3, r3, #1
 8000a66:	4413      	add	r3, r2
 8000a68:	00db      	lsls	r3, r3, #3
 8000a6a:	440b      	add	r3, r1
 8000a6c:	6818      	ldr	r0, [r3, #0]
 8000a6e:	494c      	ldr	r1, [pc, #304]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000a70:	687a      	ldr	r2, [r7, #4]
 8000a72:	4613      	mov	r3, r2
 8000a74:	005b      	lsls	r3, r3, #1
 8000a76:	4413      	add	r3, r2
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	440b      	add	r3, r1
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	2201      	movs	r2, #1
 8000a82:	4619      	mov	r1, r3
 8000a84:	f001 f9b7 	bl	8001df6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(leds[index][1].port, leds[index][1].pin, SET);
 8000a88:	4945      	ldr	r1, [pc, #276]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000a8a:	687a      	ldr	r2, [r7, #4]
 8000a8c:	4613      	mov	r3, r2
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	4413      	add	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	440b      	add	r3, r1
 8000a96:	3308      	adds	r3, #8
 8000a98:	6818      	ldr	r0, [r3, #0]
 8000a9a:	4941      	ldr	r1, [pc, #260]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000a9c:	687a      	ldr	r2, [r7, #4]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	005b      	lsls	r3, r3, #1
 8000aa2:	4413      	add	r3, r2
 8000aa4:	00db      	lsls	r3, r3, #3
 8000aa6:	440b      	add	r3, r1
 8000aa8:	330c      	adds	r3, #12
 8000aaa:	881b      	ldrh	r3, [r3, #0]
 8000aac:	2201      	movs	r2, #1
 8000aae:	4619      	mov	r1, r3
 8000ab0:	f001 f9a1 	bl	8001df6 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(leds[index][2].port, leds[index][2].pin, RESET);
 8000ab4:	493a      	ldr	r1, [pc, #232]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000ab6:	687a      	ldr	r2, [r7, #4]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	00db      	lsls	r3, r3, #3
 8000ac0:	440b      	add	r3, r1
 8000ac2:	3310      	adds	r3, #16
 8000ac4:	6818      	ldr	r0, [r3, #0]
 8000ac6:	4936      	ldr	r1, [pc, #216]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	4613      	mov	r3, r2
 8000acc:	005b      	lsls	r3, r3, #1
 8000ace:	4413      	add	r3, r2
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	440b      	add	r3, r1
 8000ad4:	3314      	adds	r3, #20
 8000ad6:	881b      	ldrh	r3, [r3, #0]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	4619      	mov	r1, r3
 8000adc:	f001 f98b 	bl	8001df6 <HAL_GPIO_WritePin>
		run_automatic_7seg(idx);
 8000ae0:	4b30      	ldr	r3, [pc, #192]	@ (8000ba4 <fsm_automation_run+0x52c>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f86d 	bl	8000bc4 <run_automatic_7seg>
		if(flag[index]){
 8000aea:	4a2f      	ldr	r2, [pc, #188]	@ (8000ba8 <fsm_automation_run+0x530>)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d010      	beq.n	8000b18 <fsm_automation_run+0x4a0>
			status[index] = AUTO_RED;
 8000af6:	4a2d      	ldr	r2, [pc, #180]	@ (8000bac <fsm_automation_run+0x534>)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2102      	movs	r1, #2
 8000afc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			time_buffer[index] = TIME_RED;
 8000b00:	4b2e      	ldr	r3, [pc, #184]	@ (8000bbc <fsm_automation_run+0x544>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	492b      	ldr	r1, [pc, #172]	@ (8000bb4 <fsm_automation_run+0x53c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			setTime(TIME_RED,index);
 8000b0c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bbc <fsm_automation_run+0x544>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6879      	ldr	r1, [r7, #4]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fcaa 	bl	800046c <setTime>
		}
		if(isButtonPressed(0)){
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f7ff fcfb 	bl	8000514 <isButtonPressed>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d026      	beq.n	8000b72 <fsm_automation_run+0x4fa>
			prev_status[0] = status[0];
 8000b24:	4b21      	ldr	r3, [pc, #132]	@ (8000bac <fsm_automation_run+0x534>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a23      	ldr	r2, [pc, #140]	@ (8000bb8 <fsm_automation_run+0x540>)
 8000b2a:	6013      	str	r3, [r2, #0]
			prev_status[1] = status[1];
 8000b2c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bac <fsm_automation_run+0x534>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	4a21      	ldr	r2, [pc, #132]	@ (8000bb8 <fsm_automation_run+0x540>)
 8000b32:	6053      	str	r3, [r2, #4]
			status[0] = MANUAL_RED;
 8000b34:	4b1d      	ldr	r3, [pc, #116]	@ (8000bac <fsm_automation_run+0x534>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	601a      	str	r2, [r3, #0]
			status[1] = MANUAL_RED;
 8000b3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bac <fsm_automation_run+0x534>)
 8000b3c:	220c      	movs	r2, #12
 8000b3e:	605a      	str	r2, [r3, #4]
			HAL_GPIO_WritePin(leds[0][0].port, leds[0][0].pin, RESET);
 8000b40:	4b17      	ldr	r3, [pc, #92]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a16      	ldr	r2, [pc, #88]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000b46:	8891      	ldrh	r1, [r2, #4]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f001 f953 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(leds[1][0].port, leds[1][0].pin, RESET);
 8000b50:	4b13      	ldr	r3, [pc, #76]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	4a12      	ldr	r2, [pc, #72]	@ (8000ba0 <fsm_automation_run+0x528>)
 8000b56:	8b91      	ldrh	r1, [r2, #28]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f001 f94b 	bl	8001df6 <HAL_GPIO_WritePin>
			temp = TIME_RED;
 8000b60:	4b16      	ldr	r3, [pc, #88]	@ (8000bbc <fsm_automation_run+0x544>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a16      	ldr	r2, [pc, #88]	@ (8000bc0 <fsm_automation_run+0x548>)
 8000b66:	6013      	str	r3, [r2, #0]
			setTime(250,NUM_BUFFER + 2);
 8000b68:	2104      	movs	r1, #4
 8000b6a:	20fa      	movs	r0, #250	@ 0xfa
 8000b6c:	f7ff fc7e 	bl	800046c <setTime>
		}
		else if(isButtonPressed(1) || isButtonPressed(2)){}
		break;
 8000b70:	e011      	b.n	8000b96 <fsm_automation_run+0x51e>
		else if(isButtonPressed(1) || isButtonPressed(2)){}
 8000b72:	2001      	movs	r0, #1
 8000b74:	f7ff fcce 	bl	8000514 <isButtonPressed>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d10b      	bne.n	8000b96 <fsm_automation_run+0x51e>
 8000b7e:	2002      	movs	r0, #2
 8000b80:	f7ff fcc8 	bl	8000514 <isButtonPressed>
		break;
 8000b84:	e007      	b.n	8000b96 <fsm_automation_run+0x51e>
	default:
		break;
 8000b86:	bf00      	nop
 8000b88:	e006      	b.n	8000b98 <fsm_automation_run+0x520>
		break;
 8000b8a:	bf00      	nop
 8000b8c:	e004      	b.n	8000b98 <fsm_automation_run+0x520>
		break;
 8000b8e:	bf00      	nop
 8000b90:	e002      	b.n	8000b98 <fsm_automation_run+0x520>
		break;
 8000b92:	bf00      	nop
 8000b94:	e000      	b.n	8000b98 <fsm_automation_run+0x520>
		break;
 8000b96:	bf00      	nop
	}
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000060 	.word	0x20000060
 8000ba4:	2000011c 	.word	0x2000011c
 8000ba8:	200000d8 	.word	0x200000d8
 8000bac:	2000010c 	.word	0x2000010c
 8000bb0:	20000058 	.word	0x20000058
 8000bb4:	20000120 	.word	0x20000120
 8000bb8:	20000114 	.word	0x20000114
 8000bbc:	20000054 	.word	0x20000054
 8000bc0:	20000128 	.word	0x20000128

08000bc4 <run_automatic_7seg>:
void run_automatic_7seg(int index){
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	if(flag[NUM_BUFFER]){
 8000bcc:	4b77      	ldr	r3, [pc, #476]	@ (8000dac <run_automatic_7seg+0x1e8>)
 8000bce:	689b      	ldr	r3, [r3, #8]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	f000 80e6 	beq.w	8000da2 <run_automatic_7seg+0x1de>
		setTime(250,NUM_BUFFER);
 8000bd6:	2102      	movs	r1, #2
 8000bd8:	20fa      	movs	r0, #250	@ 0xfa
 8000bda:	f7ff fc47 	bl	800046c <setTime>
		idx = (idx < 3) ? idx + 1 : 0;
 8000bde:	4b74      	ldr	r3, [pc, #464]	@ (8000db0 <run_automatic_7seg+0x1ec>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b02      	cmp	r3, #2
 8000be4:	dc03      	bgt.n	8000bee <run_automatic_7seg+0x2a>
 8000be6:	4b72      	ldr	r3, [pc, #456]	@ (8000db0 <run_automatic_7seg+0x1ec>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	3301      	adds	r3, #1
 8000bec:	e000      	b.n	8000bf0 <run_automatic_7seg+0x2c>
 8000bee:	2300      	movs	r3, #0
 8000bf0:	4a6f      	ldr	r2, [pc, #444]	@ (8000db0 <run_automatic_7seg+0x1ec>)
 8000bf2:	6013      	str	r3, [r2, #0]
		switch(index){
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2b03      	cmp	r3, #3
 8000bf8:	f200 80d2 	bhi.w	8000da0 <run_automatic_7seg+0x1dc>
 8000bfc:	a201      	add	r2, pc, #4	@ (adr r2, 8000c04 <run_automatic_7seg+0x40>)
 8000bfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c02:	bf00      	nop
 8000c04:	08000c15 	.word	0x08000c15
 8000c08:	08000c6d 	.word	0x08000c6d
 8000c0c:	08000cdb 	.word	0x08000cdb
 8000c10:	08000d33 	.word	0x08000d33
		case 0:
			HAL_GPIO_WritePin(enables[0].port, enables[0].pin, RESET);
 8000c14:	4b67      	ldr	r3, [pc, #412]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a66      	ldr	r2, [pc, #408]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000c1a:	8891      	ldrh	r1, [r2, #4]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f001 f8e9 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[1].port, enables[1].pin, SET);
 8000c24:	4b63      	ldr	r3, [pc, #396]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000c26:	689b      	ldr	r3, [r3, #8]
 8000c28:	4a62      	ldr	r2, [pc, #392]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000c2a:	8991      	ldrh	r1, [r2, #12]
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f001 f8e1 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[2].port, enables[2].pin, SET);
 8000c34:	4b5f      	ldr	r3, [pc, #380]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000c36:	691b      	ldr	r3, [r3, #16]
 8000c38:	4a5e      	ldr	r2, [pc, #376]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000c3a:	8a91      	ldrh	r1, [r2, #20]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f001 f8d9 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[3].port, enables[3].pin, SET);
 8000c44:	4b5b      	ldr	r3, [pc, #364]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000c46:	699b      	ldr	r3, [r3, #24]
 8000c48:	4a5a      	ldr	r2, [pc, #360]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000c4a:	8b91      	ldrh	r1, [r2, #28]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 f8d1 	bl	8001df6 <HAL_GPIO_WritePin>
			display7SEG(time_buffer[0] / 10000);
 8000c54:	4b58      	ldr	r3, [pc, #352]	@ (8000db8 <run_automatic_7seg+0x1f4>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a58      	ldr	r2, [pc, #352]	@ (8000dbc <run_automatic_7seg+0x1f8>)
 8000c5a:	fb82 1203 	smull	r1, r2, r2, r3
 8000c5e:	1312      	asrs	r2, r2, #12
 8000c60:	17db      	asrs	r3, r3, #31
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff fa71 	bl	800014c <display7SEG>
			break;
 8000c6a:	e09a      	b.n	8000da2 <run_automatic_7seg+0x1de>
		case 1:
			HAL_GPIO_WritePin(enables[0].port, enables[0].pin, SET);
 8000c6c:	4b51      	ldr	r3, [pc, #324]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a50      	ldr	r2, [pc, #320]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000c72:	8891      	ldrh	r1, [r2, #4]
 8000c74:	2201      	movs	r2, #1
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 f8bd 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[1].port, enables[1].pin, RESET);
 8000c7c:	4b4d      	ldr	r3, [pc, #308]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000c7e:	689b      	ldr	r3, [r3, #8]
 8000c80:	4a4c      	ldr	r2, [pc, #304]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000c82:	8991      	ldrh	r1, [r2, #12]
 8000c84:	2200      	movs	r2, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f001 f8b5 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[2].port, enables[2].pin, SET);
 8000c8c:	4b49      	ldr	r3, [pc, #292]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000c8e:	691b      	ldr	r3, [r3, #16]
 8000c90:	4a48      	ldr	r2, [pc, #288]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000c92:	8a91      	ldrh	r1, [r2, #20]
 8000c94:	2201      	movs	r2, #1
 8000c96:	4618      	mov	r0, r3
 8000c98:	f001 f8ad 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[3].port, enables[3].pin, SET);
 8000c9c:	4b45      	ldr	r3, [pc, #276]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000c9e:	699b      	ldr	r3, [r3, #24]
 8000ca0:	4a44      	ldr	r2, [pc, #272]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000ca2:	8b91      	ldrh	r1, [r2, #28]
 8000ca4:	2201      	movs	r2, #1
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 f8a5 	bl	8001df6 <HAL_GPIO_WritePin>
			display7SEG((time_buffer[0] / 1000) % 10);
 8000cac:	4b42      	ldr	r3, [pc, #264]	@ (8000db8 <run_automatic_7seg+0x1f4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a43      	ldr	r2, [pc, #268]	@ (8000dc0 <run_automatic_7seg+0x1fc>)
 8000cb2:	fb82 1203 	smull	r1, r2, r2, r3
 8000cb6:	1192      	asrs	r2, r2, #6
 8000cb8:	17db      	asrs	r3, r3, #31
 8000cba:	1ad2      	subs	r2, r2, r3
 8000cbc:	4b41      	ldr	r3, [pc, #260]	@ (8000dc4 <run_automatic_7seg+0x200>)
 8000cbe:	fb83 1302 	smull	r1, r3, r3, r2
 8000cc2:	1099      	asrs	r1, r3, #2
 8000cc4:	17d3      	asrs	r3, r2, #31
 8000cc6:	1ac9      	subs	r1, r1, r3
 8000cc8:	460b      	mov	r3, r1
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	440b      	add	r3, r1
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	1ad1      	subs	r1, r2, r3
 8000cd2:	4608      	mov	r0, r1
 8000cd4:	f7ff fa3a 	bl	800014c <display7SEG>
			break;
 8000cd8:	e063      	b.n	8000da2 <run_automatic_7seg+0x1de>
		case 2:
			HAL_GPIO_WritePin(enables[0].port, enables[0].pin, SET);
 8000cda:	4b36      	ldr	r3, [pc, #216]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a35      	ldr	r2, [pc, #212]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000ce0:	8891      	ldrh	r1, [r2, #4]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f001 f886 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[1].port, enables[1].pin, SET);
 8000cea:	4b32      	ldr	r3, [pc, #200]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	4a31      	ldr	r2, [pc, #196]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000cf0:	8991      	ldrh	r1, [r2, #12]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f001 f87e 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[2].port, enables[2].pin, RESET);
 8000cfa:	4b2e      	ldr	r3, [pc, #184]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	4a2d      	ldr	r2, [pc, #180]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000d00:	8a91      	ldrh	r1, [r2, #20]
 8000d02:	2200      	movs	r2, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 f876 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[3].port, enables[3].pin, SET);
 8000d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000d0c:	699b      	ldr	r3, [r3, #24]
 8000d0e:	4a29      	ldr	r2, [pc, #164]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000d10:	8b91      	ldrh	r1, [r2, #28]
 8000d12:	2201      	movs	r2, #1
 8000d14:	4618      	mov	r0, r3
 8000d16:	f001 f86e 	bl	8001df6 <HAL_GPIO_WritePin>
			display7SEG(time_buffer[1] / 10000);
 8000d1a:	4b27      	ldr	r3, [pc, #156]	@ (8000db8 <run_automatic_7seg+0x1f4>)
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	4a27      	ldr	r2, [pc, #156]	@ (8000dbc <run_automatic_7seg+0x1f8>)
 8000d20:	fb82 1203 	smull	r1, r2, r2, r3
 8000d24:	1312      	asrs	r2, r2, #12
 8000d26:	17db      	asrs	r3, r3, #31
 8000d28:	1ad3      	subs	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fa0e 	bl	800014c <display7SEG>
			break;
 8000d30:	e037      	b.n	8000da2 <run_automatic_7seg+0x1de>
		case 3:
			HAL_GPIO_WritePin(enables[0].port, enables[0].pin, SET);
 8000d32:	4b20      	ldr	r3, [pc, #128]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a1f      	ldr	r2, [pc, #124]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000d38:	8891      	ldrh	r1, [r2, #4]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f001 f85a 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[1].port, enables[1].pin, SET);
 8000d42:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	4a1b      	ldr	r2, [pc, #108]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000d48:	8991      	ldrh	r1, [r2, #12]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f001 f852 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[2].port, enables[2].pin, SET);
 8000d52:	4b18      	ldr	r3, [pc, #96]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000d54:	691b      	ldr	r3, [r3, #16]
 8000d56:	4a17      	ldr	r2, [pc, #92]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000d58:	8a91      	ldrh	r1, [r2, #20]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f001 f84a 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[3].port, enables[3].pin, RESET);
 8000d62:	4b14      	ldr	r3, [pc, #80]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000d64:	699b      	ldr	r3, [r3, #24]
 8000d66:	4a13      	ldr	r2, [pc, #76]	@ (8000db4 <run_automatic_7seg+0x1f0>)
 8000d68:	8b91      	ldrh	r1, [r2, #28]
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f001 f842 	bl	8001df6 <HAL_GPIO_WritePin>
			display7SEG((time_buffer[1] / 1000) % 10);
 8000d72:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <run_automatic_7seg+0x1f4>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	4a12      	ldr	r2, [pc, #72]	@ (8000dc0 <run_automatic_7seg+0x1fc>)
 8000d78:	fb82 1203 	smull	r1, r2, r2, r3
 8000d7c:	1192      	asrs	r2, r2, #6
 8000d7e:	17db      	asrs	r3, r3, #31
 8000d80:	1ad2      	subs	r2, r2, r3
 8000d82:	4b10      	ldr	r3, [pc, #64]	@ (8000dc4 <run_automatic_7seg+0x200>)
 8000d84:	fb83 1302 	smull	r1, r3, r3, r2
 8000d88:	1099      	asrs	r1, r3, #2
 8000d8a:	17d3      	asrs	r3, r2, #31
 8000d8c:	1ac9      	subs	r1, r1, r3
 8000d8e:	460b      	mov	r3, r1
 8000d90:	009b      	lsls	r3, r3, #2
 8000d92:	440b      	add	r3, r1
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	1ad1      	subs	r1, r2, r3
 8000d98:	4608      	mov	r0, r1
 8000d9a:	f7ff f9d7 	bl	800014c <display7SEG>
			break;
 8000d9e:	e000      	b.n	8000da2 <run_automatic_7seg+0x1de>
		default:
			break;
 8000da0:	bf00      	nop
		}
	}
}
 8000da2:	bf00      	nop
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200000d8 	.word	0x200000d8
 8000db0:	2000011c 	.word	0x2000011c
 8000db4:	20000090 	.word	0x20000090
 8000db8:	20000120 	.word	0x20000120
 8000dbc:	68db8bad 	.word	0x68db8bad
 8000dc0:	10624dd3 	.word	0x10624dd3
 8000dc4:	66666667 	.word	0x66666667

08000dc8 <countdown>:
void countdown(){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	if(flag[NUM_BUFFER + 1]){
 8000dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000dfc <countdown+0x34>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d010      	beq.n	8000df6 <countdown+0x2e>
		setTime(1000,NUM_BUFFER + 1);
 8000dd4:	2103      	movs	r1, #3
 8000dd6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000dda:	f7ff fb47 	bl	800046c <setTime>
		time_buffer[0] -= 1000;
 8000dde:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <countdown+0x38>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000de6:	4a06      	ldr	r2, [pc, #24]	@ (8000e00 <countdown+0x38>)
 8000de8:	6013      	str	r3, [r2, #0]
		time_buffer[1] -= 1000;
 8000dea:	4b05      	ldr	r3, [pc, #20]	@ (8000e00 <countdown+0x38>)
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000df2:	4a03      	ldr	r2, [pc, #12]	@ (8000e00 <countdown+0x38>)
 8000df4:	6053      	str	r3, [r2, #4]
	}
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200000d8 	.word	0x200000d8
 8000e00:	20000120 	.word	0x20000120

08000e04 <fsm_manual_run>:
 *  Created on: Sep 26, 2024
 *      Author: LENOVO
 */
#include "fsm_automatic.h"

void fsm_manual_run(){
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
	switch(status[0]){
 8000e0a:	4ba4      	ldr	r3, [pc, #656]	@ (800109c <fsm_manual_run+0x298>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	2b0e      	cmp	r3, #14
 8000e10:	f000 80f2 	beq.w	8000ff8 <fsm_manual_run+0x1f4>
 8000e14:	2b0e      	cmp	r3, #14
 8000e16:	f300 8208 	bgt.w	800122a <fsm_manual_run+0x426>
 8000e1a:	2b0c      	cmp	r3, #12
 8000e1c:	d002      	beq.n	8000e24 <fsm_manual_run+0x20>
 8000e1e:	2b0d      	cmp	r3, #13
 8000e20:	d070      	beq.n	8000f04 <fsm_manual_run+0x100>
			  TIME_GREEN = TIME_RED - TIME_YELLOW;
			  force = 0;
		  }
		  break;
	default:
		break;
 8000e22:	e202      	b.n	800122a <fsm_manual_run+0x426>
		  HAL_GPIO_WritePin(leds[0][1].port, leds[0][1].pin, SET);
 8000e24:	4b9e      	ldr	r3, [pc, #632]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	4a9d      	ldr	r2, [pc, #628]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000e2a:	8991      	ldrh	r1, [r2, #12]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f000 ffe1 	bl	8001df6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(leds[1][1].port, leds[1][1].pin, SET);
 8000e34:	4b9a      	ldr	r3, [pc, #616]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000e36:	6a1b      	ldr	r3, [r3, #32]
 8000e38:	4a99      	ldr	r2, [pc, #612]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000e3a:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 ffd9 	bl	8001df6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(leds[0][2].port, leds[0][2].pin, SET);
 8000e44:	4b96      	ldr	r3, [pc, #600]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000e46:	691b      	ldr	r3, [r3, #16]
 8000e48:	4a95      	ldr	r2, [pc, #596]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000e4a:	8a91      	ldrh	r1, [r2, #20]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f000 ffd1 	bl	8001df6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(leds[1][2].port, leds[1][2].pin, SET);
 8000e54:	4b92      	ldr	r3, [pc, #584]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e58:	4a91      	ldr	r2, [pc, #580]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000e5a:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 ffc9 	bl	8001df6 <HAL_GPIO_WritePin>
		  fsm_manual_7seg(idx, 2);
 8000e64:	4b8f      	ldr	r3, [pc, #572]	@ (80010a4 <fsm_manual_run+0x2a0>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2102      	movs	r1, #2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f9fa 	bl	8001264 <fsm_manual_7seg>
		  if(flag[NUM_BUFFER + 2]){
 8000e70:	4b8d      	ldr	r3, [pc, #564]	@ (80010a8 <fsm_manual_run+0x2a4>)
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d013      	beq.n	8000ea0 <fsm_manual_run+0x9c>
			  setTime(250, NUM_BUFFER + 2);
 8000e78:	2104      	movs	r1, #4
 8000e7a:	20fa      	movs	r0, #250	@ 0xfa
 8000e7c:	f7ff faf6 	bl	800046c <setTime>
			  HAL_GPIO_TogglePin(leds[0][0].port, leds[0][0].pin);
 8000e80:	4b87      	ldr	r3, [pc, #540]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a86      	ldr	r2, [pc, #536]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000e86:	8892      	ldrh	r2, [r2, #4]
 8000e88:	4611      	mov	r1, r2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 ffcb 	bl	8001e26 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(leds[1][0].port, leds[1][0].pin);
 8000e90:	4b83      	ldr	r3, [pc, #524]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	4a82      	ldr	r2, [pc, #520]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000e96:	8b92      	ldrh	r2, [r2, #28]
 8000e98:	4611      	mov	r1, r2
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 ffc3 	bl	8001e26 <HAL_GPIO_TogglePin>
		  if(isButtonPressed(0)){
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	f7ff fb37 	bl	8000514 <isButtonPressed>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d007      	beq.n	8000ebc <fsm_manual_run+0xb8>
			  status[0] = MANUAL_GREEN;
 8000eac:	4b7b      	ldr	r3, [pc, #492]	@ (800109c <fsm_manual_run+0x298>)
 8000eae:	220d      	movs	r2, #13
 8000eb0:	601a      	str	r2, [r3, #0]
			  temp = TIME_GREEN;
 8000eb2:	4b7e      	ldr	r3, [pc, #504]	@ (80010ac <fsm_manual_run+0x2a8>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4a7e      	ldr	r2, [pc, #504]	@ (80010b0 <fsm_manual_run+0x2ac>)
 8000eb8:	6013      	str	r3, [r2, #0]
		  break;
 8000eba:	e1b8      	b.n	800122e <fsm_manual_run+0x42a>
		  }else if(isButtonPressed(1)){
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f7ff fb29 	bl	8000514 <isButtonPressed>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d00e      	beq.n	8000ee6 <fsm_manual_run+0xe2>
			  temp = (temp / 1000 < 99) ? temp + 1000 : 1000;
 8000ec8:	4b79      	ldr	r3, [pc, #484]	@ (80010b0 <fsm_manual_run+0x2ac>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a79      	ldr	r2, [pc, #484]	@ (80010b4 <fsm_manual_run+0x2b0>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	dc04      	bgt.n	8000edc <fsm_manual_run+0xd8>
 8000ed2:	4b77      	ldr	r3, [pc, #476]	@ (80010b0 <fsm_manual_run+0x2ac>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000eda:	e001      	b.n	8000ee0 <fsm_manual_run+0xdc>
 8000edc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee0:	4a73      	ldr	r2, [pc, #460]	@ (80010b0 <fsm_manual_run+0x2ac>)
 8000ee2:	6013      	str	r3, [r2, #0]
		  break;
 8000ee4:	e1a3      	b.n	800122e <fsm_manual_run+0x42a>
		  }else if(isButtonPressed(2)){
 8000ee6:	2002      	movs	r0, #2
 8000ee8:	f7ff fb14 	bl	8000514 <isButtonPressed>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	f000 819d 	beq.w	800122e <fsm_manual_run+0x42a>
			  TIME_RED = temp;
 8000ef4:	4b6e      	ldr	r3, [pc, #440]	@ (80010b0 <fsm_manual_run+0x2ac>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	@ (80010b8 <fsm_manual_run+0x2b4>)
 8000efa:	6013      	str	r3, [r2, #0]
			  force = 1;
 8000efc:	4b6f      	ldr	r3, [pc, #444]	@ (80010bc <fsm_manual_run+0x2b8>)
 8000efe:	2201      	movs	r2, #1
 8000f00:	601a      	str	r2, [r3, #0]
		  break;
 8000f02:	e194      	b.n	800122e <fsm_manual_run+0x42a>
		  HAL_GPIO_WritePin(leds[0][0].port, leds[0][0].pin, SET);
 8000f04:	4b66      	ldr	r3, [pc, #408]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a65      	ldr	r2, [pc, #404]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000f0a:	8891      	ldrh	r1, [r2, #4]
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 ff71 	bl	8001df6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(leds[1][0].port, leds[1][0].pin, SET);
 8000f14:	4b62      	ldr	r3, [pc, #392]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000f16:	699b      	ldr	r3, [r3, #24]
 8000f18:	4a61      	ldr	r2, [pc, #388]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000f1a:	8b91      	ldrh	r1, [r2, #28]
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 ff69 	bl	8001df6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(leds[0][2].port, leds[0][2].pin, SET);
 8000f24:	4b5e      	ldr	r3, [pc, #376]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000f26:	691b      	ldr	r3, [r3, #16]
 8000f28:	4a5d      	ldr	r2, [pc, #372]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000f2a:	8a91      	ldrh	r1, [r2, #20]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 ff61 	bl	8001df6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(leds[1][2].port, leds[1][2].pin, SET);
 8000f34:	4b5a      	ldr	r3, [pc, #360]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f38:	4a59      	ldr	r2, [pc, #356]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000f3a:	8d91      	ldrh	r1, [r2, #44]	@ 0x2c
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 ff59 	bl	8001df6 <HAL_GPIO_WritePin>
		  fsm_manual_7seg(idx, 3);
 8000f44:	4b57      	ldr	r3, [pc, #348]	@ (80010a4 <fsm_manual_run+0x2a0>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f98a 	bl	8001264 <fsm_manual_7seg>
		  if(flag[NUM_BUFFER + 2]){
 8000f50:	4b55      	ldr	r3, [pc, #340]	@ (80010a8 <fsm_manual_run+0x2a4>)
 8000f52:	691b      	ldr	r3, [r3, #16]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d013      	beq.n	8000f80 <fsm_manual_run+0x17c>
			  setTime(250, NUM_BUFFER + 2);
 8000f58:	2104      	movs	r1, #4
 8000f5a:	20fa      	movs	r0, #250	@ 0xfa
 8000f5c:	f7ff fa86 	bl	800046c <setTime>
			  HAL_GPIO_TogglePin(leds[0][1].port, leds[0][1].pin);
 8000f60:	4b4f      	ldr	r3, [pc, #316]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000f62:	689b      	ldr	r3, [r3, #8]
 8000f64:	4a4e      	ldr	r2, [pc, #312]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000f66:	8992      	ldrh	r2, [r2, #12]
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f000 ff5b 	bl	8001e26 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(leds[1][1].port, leds[1][1].pin);
 8000f70:	4b4b      	ldr	r3, [pc, #300]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	4a4a      	ldr	r2, [pc, #296]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000f76:	8c92      	ldrh	r2, [r2, #36]	@ 0x24
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f000 ff53 	bl	8001e26 <HAL_GPIO_TogglePin>
		  if(isButtonPressed(0)){
 8000f80:	2000      	movs	r0, #0
 8000f82:	f7ff fac7 	bl	8000514 <isButtonPressed>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d007      	beq.n	8000f9c <fsm_manual_run+0x198>
			  status[0] = MANUAL_YELLOW;
 8000f8c:	4b43      	ldr	r3, [pc, #268]	@ (800109c <fsm_manual_run+0x298>)
 8000f8e:	220e      	movs	r2, #14
 8000f90:	601a      	str	r2, [r3, #0]
			  temp = TIME_YELLOW;
 8000f92:	4b4b      	ldr	r3, [pc, #300]	@ (80010c0 <fsm_manual_run+0x2bc>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a46      	ldr	r2, [pc, #280]	@ (80010b0 <fsm_manual_run+0x2ac>)
 8000f98:	6013      	str	r3, [r2, #0]
		  break;
 8000f9a:	e14a      	b.n	8001232 <fsm_manual_run+0x42e>
		  }else if(isButtonPressed(1)){
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f7ff fab9 	bl	8000514 <isButtonPressed>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d011      	beq.n	8000fcc <fsm_manual_run+0x1c8>
			  temp = (temp < (TIME_RED - 1000)) ? temp + 1000 : 1000;
 8000fa8:	4b43      	ldr	r3, [pc, #268]	@ (80010b8 <fsm_manual_run+0x2b4>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 8000fb0:	4b3f      	ldr	r3, [pc, #252]	@ (80010b0 <fsm_manual_run+0x2ac>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	dd04      	ble.n	8000fc2 <fsm_manual_run+0x1be>
 8000fb8:	4b3d      	ldr	r3, [pc, #244]	@ (80010b0 <fsm_manual_run+0x2ac>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000fc0:	e001      	b.n	8000fc6 <fsm_manual_run+0x1c2>
 8000fc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc6:	4a3a      	ldr	r2, [pc, #232]	@ (80010b0 <fsm_manual_run+0x2ac>)
 8000fc8:	6013      	str	r3, [r2, #0]
		  break;
 8000fca:	e132      	b.n	8001232 <fsm_manual_run+0x42e>
		  }else if(isButtonPressed(2)){
 8000fcc:	2002      	movs	r0, #2
 8000fce:	f7ff faa1 	bl	8000514 <isButtonPressed>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	f000 812c 	beq.w	8001232 <fsm_manual_run+0x42e>
			  TIME_GREEN = temp;
 8000fda:	4b35      	ldr	r3, [pc, #212]	@ (80010b0 <fsm_manual_run+0x2ac>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a33      	ldr	r2, [pc, #204]	@ (80010ac <fsm_manual_run+0x2a8>)
 8000fe0:	6013      	str	r3, [r2, #0]
			  TIME_YELLOW = TIME_RED - TIME_GREEN;
 8000fe2:	4b35      	ldr	r3, [pc, #212]	@ (80010b8 <fsm_manual_run+0x2b4>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	4b31      	ldr	r3, [pc, #196]	@ (80010ac <fsm_manual_run+0x2a8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	4a34      	ldr	r2, [pc, #208]	@ (80010c0 <fsm_manual_run+0x2bc>)
 8000fee:	6013      	str	r3, [r2, #0]
			  force = 0;
 8000ff0:	4b32      	ldr	r3, [pc, #200]	@ (80010bc <fsm_manual_run+0x2b8>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
		  break;
 8000ff6:	e11c      	b.n	8001232 <fsm_manual_run+0x42e>
		  HAL_GPIO_WritePin(leds[0][1].port, leds[0][1].pin, SET);
 8000ff8:	4b29      	ldr	r3, [pc, #164]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4a28      	ldr	r2, [pc, #160]	@ (80010a0 <fsm_manual_run+0x29c>)
 8000ffe:	8991      	ldrh	r1, [r2, #12]
 8001000:	2201      	movs	r2, #1
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fef7 	bl	8001df6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(leds[1][1].port, leds[1][1].pin, SET);
 8001008:	4b25      	ldr	r3, [pc, #148]	@ (80010a0 <fsm_manual_run+0x29c>)
 800100a:	6a1b      	ldr	r3, [r3, #32]
 800100c:	4a24      	ldr	r2, [pc, #144]	@ (80010a0 <fsm_manual_run+0x29c>)
 800100e:	8c91      	ldrh	r1, [r2, #36]	@ 0x24
 8001010:	2201      	movs	r2, #1
 8001012:	4618      	mov	r0, r3
 8001014:	f000 feef 	bl	8001df6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(leds[0][0].port, leds[0][0].pin, SET);
 8001018:	4b21      	ldr	r3, [pc, #132]	@ (80010a0 <fsm_manual_run+0x29c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a20      	ldr	r2, [pc, #128]	@ (80010a0 <fsm_manual_run+0x29c>)
 800101e:	8891      	ldrh	r1, [r2, #4]
 8001020:	2201      	movs	r2, #1
 8001022:	4618      	mov	r0, r3
 8001024:	f000 fee7 	bl	8001df6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(leds[1][0].port, leds[1][0].pin, SET);
 8001028:	4b1d      	ldr	r3, [pc, #116]	@ (80010a0 <fsm_manual_run+0x29c>)
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	4a1c      	ldr	r2, [pc, #112]	@ (80010a0 <fsm_manual_run+0x29c>)
 800102e:	8b91      	ldrh	r1, [r2, #28]
 8001030:	2201      	movs	r2, #1
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fedf 	bl	8001df6 <HAL_GPIO_WritePin>
		  fsm_manual_7seg(idx, 4);
 8001038:	4b1a      	ldr	r3, [pc, #104]	@ (80010a4 <fsm_manual_run+0x2a0>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2104      	movs	r1, #4
 800103e:	4618      	mov	r0, r3
 8001040:	f000 f910 	bl	8001264 <fsm_manual_7seg>
		  if(flag[NUM_BUFFER + 2]){
 8001044:	4b18      	ldr	r3, [pc, #96]	@ (80010a8 <fsm_manual_run+0x2a4>)
 8001046:	691b      	ldr	r3, [r3, #16]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d013      	beq.n	8001074 <fsm_manual_run+0x270>
			  setTime(250, NUM_BUFFER + 2);
 800104c:	2104      	movs	r1, #4
 800104e:	20fa      	movs	r0, #250	@ 0xfa
 8001050:	f7ff fa0c 	bl	800046c <setTime>
			  HAL_GPIO_TogglePin(leds[0][2].port, leds[0][2].pin);
 8001054:	4b12      	ldr	r3, [pc, #72]	@ (80010a0 <fsm_manual_run+0x29c>)
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	4a11      	ldr	r2, [pc, #68]	@ (80010a0 <fsm_manual_run+0x29c>)
 800105a:	8a92      	ldrh	r2, [r2, #20]
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f000 fee1 	bl	8001e26 <HAL_GPIO_TogglePin>
			  HAL_GPIO_TogglePin(leds[1][2].port, leds[1][2].pin);
 8001064:	4b0e      	ldr	r3, [pc, #56]	@ (80010a0 <fsm_manual_run+0x29c>)
 8001066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001068:	4a0d      	ldr	r2, [pc, #52]	@ (80010a0 <fsm_manual_run+0x29c>)
 800106a:	8d92      	ldrh	r2, [r2, #44]	@ 0x2c
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f000 fed9 	bl	8001e26 <HAL_GPIO_TogglePin>
		  if(isButtonPressed(0)){
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff fa4d 	bl	8000514 <isButtonPressed>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	f000 80a7 	beq.w	80011d0 <fsm_manual_run+0x3cc>
			  if(force){
 8001082:	4b0e      	ldr	r3, [pc, #56]	@ (80010bc <fsm_manual_run+0x2b8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d01c      	beq.n	80010c4 <fsm_manual_run+0x2c0>
				  status[0] = MANUAL_GREEN;
 800108a:	4b04      	ldr	r3, [pc, #16]	@ (800109c <fsm_manual_run+0x298>)
 800108c:	220d      	movs	r2, #13
 800108e:	601a      	str	r2, [r3, #0]
				  temp = TIME_GREEN;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <fsm_manual_run+0x2a8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a06      	ldr	r2, [pc, #24]	@ (80010b0 <fsm_manual_run+0x2ac>)
 8001096:	6013      	str	r3, [r2, #0]
		  break;
 8001098:	e0cd      	b.n	8001236 <fsm_manual_run+0x432>
 800109a:	bf00      	nop
 800109c:	2000010c 	.word	0x2000010c
 80010a0:	20000060 	.word	0x20000060
 80010a4:	2000011c 	.word	0x2000011c
 80010a8:	200000d8 	.word	0x200000d8
 80010ac:	2000005c 	.word	0x2000005c
 80010b0:	20000128 	.word	0x20000128
 80010b4:	000182b7 	.word	0x000182b7
 80010b8:	20000054 	.word	0x20000054
 80010bc:	2000012c 	.word	0x2000012c
 80010c0:	20000058 	.word	0x20000058
				  status[0] = prev_status[0];
 80010c4:	4b5e      	ldr	r3, [pc, #376]	@ (8001240 <fsm_manual_run+0x43c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a5e      	ldr	r2, [pc, #376]	@ (8001244 <fsm_manual_run+0x440>)
 80010ca:	6013      	str	r3, [r2, #0]
				  status[1] = prev_status[1];
 80010cc:	4b5c      	ldr	r3, [pc, #368]	@ (8001240 <fsm_manual_run+0x43c>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4a5c      	ldr	r2, [pc, #368]	@ (8001244 <fsm_manual_run+0x440>)
 80010d2:	6053      	str	r3, [r2, #4]
				  idx = 0 ;
 80010d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001248 <fsm_manual_run+0x444>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	601a      	str	r2, [r3, #0]
				  int k1 = 0, k2 = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	2300      	movs	r3, #0
 80010e0:	603b      	str	r3, [r7, #0]
				  k1 = (prev_status[0] == AUTO_RED) ? TIME_RED : (prev_status[0] == AUTO_GREEN) ?
 80010e2:	4b57      	ldr	r3, [pc, #348]	@ (8001240 <fsm_manual_run+0x43c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d009      	beq.n	80010fe <fsm_manual_run+0x2fa>
 80010ea:	4b55      	ldr	r3, [pc, #340]	@ (8001240 <fsm_manual_run+0x43c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
						  TIME_GREEN : TIME_YELLOW;
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d102      	bne.n	80010f8 <fsm_manual_run+0x2f4>
 80010f2:	4b56      	ldr	r3, [pc, #344]	@ (800124c <fsm_manual_run+0x448>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	e004      	b.n	8001102 <fsm_manual_run+0x2fe>
 80010f8:	4b55      	ldr	r3, [pc, #340]	@ (8001250 <fsm_manual_run+0x44c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	e001      	b.n	8001102 <fsm_manual_run+0x2fe>
				  k1 = (prev_status[0] == AUTO_RED) ? TIME_RED : (prev_status[0] == AUTO_GREEN) ?
 80010fe:	4b55      	ldr	r3, [pc, #340]	@ (8001254 <fsm_manual_run+0x450>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	607b      	str	r3, [r7, #4]
				  k2 = (prev_status[1] == AUTO_RED) ? TIME_RED : (prev_status[1] == AUTO_GREEN) ?
 8001104:	4b4e      	ldr	r3, [pc, #312]	@ (8001240 <fsm_manual_run+0x43c>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d009      	beq.n	8001120 <fsm_manual_run+0x31c>
 800110c:	4b4c      	ldr	r3, [pc, #304]	@ (8001240 <fsm_manual_run+0x43c>)
 800110e:	685b      	ldr	r3, [r3, #4]
				  						  TIME_GREEN : TIME_YELLOW;
 8001110:	2b03      	cmp	r3, #3
 8001112:	d102      	bne.n	800111a <fsm_manual_run+0x316>
 8001114:	4b4d      	ldr	r3, [pc, #308]	@ (800124c <fsm_manual_run+0x448>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	e004      	b.n	8001124 <fsm_manual_run+0x320>
 800111a:	4b4d      	ldr	r3, [pc, #308]	@ (8001250 <fsm_manual_run+0x44c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	e001      	b.n	8001124 <fsm_manual_run+0x320>
				  k2 = (prev_status[1] == AUTO_RED) ? TIME_RED : (prev_status[1] == AUTO_GREEN) ?
 8001120:	4b4c      	ldr	r3, [pc, #304]	@ (8001254 <fsm_manual_run+0x450>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	603b      	str	r3, [r7, #0]
				  if(prev_status[0] == AUTO_RED && prev_status[1] == AUTO_GREEN){
 8001126:	4b46      	ldr	r3, [pc, #280]	@ (8001240 <fsm_manual_run+0x43c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b02      	cmp	r3, #2
 800112c:	d10a      	bne.n	8001144 <fsm_manual_run+0x340>
 800112e:	4b44      	ldr	r3, [pc, #272]	@ (8001240 <fsm_manual_run+0x43c>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d106      	bne.n	8001144 <fsm_manual_run+0x340>
					  k1 = TIME_RED; k2 = TIME_GREEN;
 8001136:	4b47      	ldr	r3, [pc, #284]	@ (8001254 <fsm_manual_run+0x450>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	4b43      	ldr	r3, [pc, #268]	@ (800124c <fsm_manual_run+0x448>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	e031      	b.n	80011a8 <fsm_manual_run+0x3a4>
				  }else if(prev_status[0] == AUTO_GREEN && prev_status[1] == AUTO_RED){
 8001144:	4b3e      	ldr	r3, [pc, #248]	@ (8001240 <fsm_manual_run+0x43c>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b03      	cmp	r3, #3
 800114a:	d10a      	bne.n	8001162 <fsm_manual_run+0x35e>
 800114c:	4b3c      	ldr	r3, [pc, #240]	@ (8001240 <fsm_manual_run+0x43c>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b02      	cmp	r3, #2
 8001152:	d106      	bne.n	8001162 <fsm_manual_run+0x35e>
					  k1 = TIME_GREEN; k2 = TIME_RED;
 8001154:	4b3d      	ldr	r3, [pc, #244]	@ (800124c <fsm_manual_run+0x448>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	607b      	str	r3, [r7, #4]
 800115a:	4b3e      	ldr	r3, [pc, #248]	@ (8001254 <fsm_manual_run+0x450>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	e022      	b.n	80011a8 <fsm_manual_run+0x3a4>
				  }else if(prev_status[0] == AUTO_RED && prev_status[1] == AUTO_YELLOW){
 8001162:	4b37      	ldr	r3, [pc, #220]	@ (8001240 <fsm_manual_run+0x43c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b02      	cmp	r3, #2
 8001168:	d10d      	bne.n	8001186 <fsm_manual_run+0x382>
 800116a:	4b35      	ldr	r3, [pc, #212]	@ (8001240 <fsm_manual_run+0x43c>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	2b04      	cmp	r3, #4
 8001170:	d109      	bne.n	8001186 <fsm_manual_run+0x382>
					  k1 = TIME_RED - TIME_GREEN; k2 = TIME_YELLOW;
 8001172:	4b38      	ldr	r3, [pc, #224]	@ (8001254 <fsm_manual_run+0x450>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	4b35      	ldr	r3, [pc, #212]	@ (800124c <fsm_manual_run+0x448>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	1ad3      	subs	r3, r2, r3
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b34      	ldr	r3, [pc, #208]	@ (8001250 <fsm_manual_run+0x44c>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	603b      	str	r3, [r7, #0]
 8001184:	e010      	b.n	80011a8 <fsm_manual_run+0x3a4>
				  }else if(prev_status[0] == AUTO_YELLOW && prev_status[1] == AUTO_RED){
 8001186:	4b2e      	ldr	r3, [pc, #184]	@ (8001240 <fsm_manual_run+0x43c>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b04      	cmp	r3, #4
 800118c:	d10c      	bne.n	80011a8 <fsm_manual_run+0x3a4>
 800118e:	4b2c      	ldr	r3, [pc, #176]	@ (8001240 <fsm_manual_run+0x43c>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	2b02      	cmp	r3, #2
 8001194:	d108      	bne.n	80011a8 <fsm_manual_run+0x3a4>
					  k1 = TIME_YELLOW; k2 = TIME_RED - TIME_GREEN;
 8001196:	4b2e      	ldr	r3, [pc, #184]	@ (8001250 <fsm_manual_run+0x44c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	4b2d      	ldr	r3, [pc, #180]	@ (8001254 <fsm_manual_run+0x450>)
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4b2a      	ldr	r3, [pc, #168]	@ (800124c <fsm_manual_run+0x448>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	603b      	str	r3, [r7, #0]
				  time_buffer[0] = k1; time_buffer[1] = k2; setTime(k1,0); setTime(k2,1);setTime(1000, NUM_BUFFER + 1);
 80011a8:	4a2b      	ldr	r2, [pc, #172]	@ (8001258 <fsm_manual_run+0x454>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	4a2a      	ldr	r2, [pc, #168]	@ (8001258 <fsm_manual_run+0x454>)
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	6053      	str	r3, [r2, #4]
 80011b4:	2100      	movs	r1, #0
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff f958 	bl	800046c <setTime>
 80011bc:	2101      	movs	r1, #1
 80011be:	6838      	ldr	r0, [r7, #0]
 80011c0:	f7ff f954 	bl	800046c <setTime>
 80011c4:	2103      	movs	r1, #3
 80011c6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011ca:	f7ff f94f 	bl	800046c <setTime>
		  break;
 80011ce:	e032      	b.n	8001236 <fsm_manual_run+0x432>
		  }else if(isButtonPressed(1)){
 80011d0:	2001      	movs	r0, #1
 80011d2:	f7ff f99f 	bl	8000514 <isButtonPressed>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d011      	beq.n	8001200 <fsm_manual_run+0x3fc>
			  temp = (temp < (TIME_RED - 1000)) ? temp + 1000 : 1000;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001254 <fsm_manual_run+0x450>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f5a3 727a 	sub.w	r2, r3, #1000	@ 0x3e8
 80011e4:	4b1d      	ldr	r3, [pc, #116]	@ (800125c <fsm_manual_run+0x458>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	dd04      	ble.n	80011f6 <fsm_manual_run+0x3f2>
 80011ec:	4b1b      	ldr	r3, [pc, #108]	@ (800125c <fsm_manual_run+0x458>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80011f4:	e001      	b.n	80011fa <fsm_manual_run+0x3f6>
 80011f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011fa:	4a18      	ldr	r2, [pc, #96]	@ (800125c <fsm_manual_run+0x458>)
 80011fc:	6013      	str	r3, [r2, #0]
		  break;
 80011fe:	e01a      	b.n	8001236 <fsm_manual_run+0x432>
		  }else if(isButtonPressed(2)){
 8001200:	2002      	movs	r0, #2
 8001202:	f7ff f987 	bl	8000514 <isButtonPressed>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d014      	beq.n	8001236 <fsm_manual_run+0x432>
			  TIME_YELLOW = temp;
 800120c:	4b13      	ldr	r3, [pc, #76]	@ (800125c <fsm_manual_run+0x458>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0f      	ldr	r2, [pc, #60]	@ (8001250 <fsm_manual_run+0x44c>)
 8001212:	6013      	str	r3, [r2, #0]
			  TIME_GREEN = TIME_RED - TIME_YELLOW;
 8001214:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <fsm_manual_run+0x450>)
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	4b0d      	ldr	r3, [pc, #52]	@ (8001250 <fsm_manual_run+0x44c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	4a0b      	ldr	r2, [pc, #44]	@ (800124c <fsm_manual_run+0x448>)
 8001220:	6013      	str	r3, [r2, #0]
			  force = 0;
 8001222:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <fsm_manual_run+0x45c>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
		  break;
 8001228:	e005      	b.n	8001236 <fsm_manual_run+0x432>
		break;
 800122a:	bf00      	nop
 800122c:	e004      	b.n	8001238 <fsm_manual_run+0x434>
		  break;
 800122e:	bf00      	nop
 8001230:	e002      	b.n	8001238 <fsm_manual_run+0x434>
		  break;
 8001232:	bf00      	nop
 8001234:	e000      	b.n	8001238 <fsm_manual_run+0x434>
		  break;
 8001236:	bf00      	nop
	}
}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000114 	.word	0x20000114
 8001244:	2000010c 	.word	0x2000010c
 8001248:	2000011c 	.word	0x2000011c
 800124c:	2000005c 	.word	0x2000005c
 8001250:	20000058 	.word	0x20000058
 8001254:	20000054 	.word	0x20000054
 8001258:	20000120 	.word	0x20000120
 800125c:	20000128 	.word	0x20000128
 8001260:	2000012c 	.word	0x2000012c

08001264 <fsm_manual_7seg>:
void fsm_manual_7seg(int index, int mode){
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
	if(flag[NUM_BUFFER]){
 800126e:	4b69      	ldr	r3, [pc, #420]	@ (8001414 <fsm_manual_7seg+0x1b0>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2b00      	cmp	r3, #0
 8001274:	f000 80ca 	beq.w	800140c <fsm_manual_7seg+0x1a8>
		setTime(250,NUM_BUFFER);
 8001278:	2102      	movs	r1, #2
 800127a:	20fa      	movs	r0, #250	@ 0xfa
 800127c:	f7ff f8f6 	bl	800046c <setTime>
		idx = (idx < 3) ? idx + 1 : 0;
 8001280:	4b65      	ldr	r3, [pc, #404]	@ (8001418 <fsm_manual_7seg+0x1b4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b02      	cmp	r3, #2
 8001286:	dc03      	bgt.n	8001290 <fsm_manual_7seg+0x2c>
 8001288:	4b63      	ldr	r3, [pc, #396]	@ (8001418 <fsm_manual_7seg+0x1b4>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3301      	adds	r3, #1
 800128e:	e000      	b.n	8001292 <fsm_manual_7seg+0x2e>
 8001290:	2300      	movs	r3, #0
 8001292:	4a61      	ldr	r2, [pc, #388]	@ (8001418 <fsm_manual_7seg+0x1b4>)
 8001294:	6013      	str	r3, [r2, #0]
		switch(index){
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2b03      	cmp	r3, #3
 800129a:	f200 80b6 	bhi.w	800140a <fsm_manual_7seg+0x1a6>
 800129e:	a201      	add	r2, pc, #4	@ (adr r2, 80012a4 <fsm_manual_7seg+0x40>)
 80012a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a4:	080012b5 	.word	0x080012b5
 80012a8:	0800130d 	.word	0x0800130d
 80012ac:	0800137b 	.word	0x0800137b
 80012b0:	080013c3 	.word	0x080013c3
		case 0:
			HAL_GPIO_WritePin(enables[0].port, enables[0].pin, RESET);
 80012b4:	4b59      	ldr	r3, [pc, #356]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a58      	ldr	r2, [pc, #352]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80012ba:	8891      	ldrh	r1, [r2, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fd99 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[1].port, enables[1].pin, SET);
 80012c4:	4b55      	ldr	r3, [pc, #340]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	4a54      	ldr	r2, [pc, #336]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80012ca:	8991      	ldrh	r1, [r2, #12]
 80012cc:	2201      	movs	r2, #1
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 fd91 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[2].port, enables[2].pin, SET);
 80012d4:	4b51      	ldr	r3, [pc, #324]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	4a50      	ldr	r2, [pc, #320]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80012da:	8a91      	ldrh	r1, [r2, #20]
 80012dc:	2201      	movs	r2, #1
 80012de:	4618      	mov	r0, r3
 80012e0:	f000 fd89 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[3].port, enables[3].pin, SET);
 80012e4:	4b4d      	ldr	r3, [pc, #308]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a4c      	ldr	r2, [pc, #304]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80012ea:	8b91      	ldrh	r1, [r2, #28]
 80012ec:	2201      	movs	r2, #1
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 fd81 	bl	8001df6 <HAL_GPIO_WritePin>
			display7SEG(temp / 10000);
 80012f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001420 <fsm_manual_7seg+0x1bc>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a4a      	ldr	r2, [pc, #296]	@ (8001424 <fsm_manual_7seg+0x1c0>)
 80012fa:	fb82 1203 	smull	r1, r2, r2, r3
 80012fe:	1312      	asrs	r2, r2, #12
 8001300:	17db      	asrs	r3, r3, #31
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7fe ff21 	bl	800014c <display7SEG>
			break;
 800130a:	e07f      	b.n	800140c <fsm_manual_7seg+0x1a8>
		case 1:
			HAL_GPIO_WritePin(enables[0].port, enables[0].pin, SET);
 800130c:	4b43      	ldr	r3, [pc, #268]	@ (800141c <fsm_manual_7seg+0x1b8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a42      	ldr	r2, [pc, #264]	@ (800141c <fsm_manual_7seg+0x1b8>)
 8001312:	8891      	ldrh	r1, [r2, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	4618      	mov	r0, r3
 8001318:	f000 fd6d 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[1].port, enables[1].pin, RESET);
 800131c:	4b3f      	ldr	r3, [pc, #252]	@ (800141c <fsm_manual_7seg+0x1b8>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	4a3e      	ldr	r2, [pc, #248]	@ (800141c <fsm_manual_7seg+0x1b8>)
 8001322:	8991      	ldrh	r1, [r2, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fd65 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[2].port, enables[2].pin, SET);
 800132c:	4b3b      	ldr	r3, [pc, #236]	@ (800141c <fsm_manual_7seg+0x1b8>)
 800132e:	691b      	ldr	r3, [r3, #16]
 8001330:	4a3a      	ldr	r2, [pc, #232]	@ (800141c <fsm_manual_7seg+0x1b8>)
 8001332:	8a91      	ldrh	r1, [r2, #20]
 8001334:	2201      	movs	r2, #1
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fd5d 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[3].port, enables[3].pin, SET);
 800133c:	4b37      	ldr	r3, [pc, #220]	@ (800141c <fsm_manual_7seg+0x1b8>)
 800133e:	699b      	ldr	r3, [r3, #24]
 8001340:	4a36      	ldr	r2, [pc, #216]	@ (800141c <fsm_manual_7seg+0x1b8>)
 8001342:	8b91      	ldrh	r1, [r2, #28]
 8001344:	2201      	movs	r2, #1
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fd55 	bl	8001df6 <HAL_GPIO_WritePin>
			display7SEG((temp / 1000) % 10);
 800134c:	4b34      	ldr	r3, [pc, #208]	@ (8001420 <fsm_manual_7seg+0x1bc>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a35      	ldr	r2, [pc, #212]	@ (8001428 <fsm_manual_7seg+0x1c4>)
 8001352:	fb82 1203 	smull	r1, r2, r2, r3
 8001356:	1192      	asrs	r2, r2, #6
 8001358:	17db      	asrs	r3, r3, #31
 800135a:	1ad2      	subs	r2, r2, r3
 800135c:	4b33      	ldr	r3, [pc, #204]	@ (800142c <fsm_manual_7seg+0x1c8>)
 800135e:	fb83 1302 	smull	r1, r3, r3, r2
 8001362:	1099      	asrs	r1, r3, #2
 8001364:	17d3      	asrs	r3, r2, #31
 8001366:	1ac9      	subs	r1, r1, r3
 8001368:	460b      	mov	r3, r1
 800136a:	009b      	lsls	r3, r3, #2
 800136c:	440b      	add	r3, r1
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	1ad1      	subs	r1, r2, r3
 8001372:	4608      	mov	r0, r1
 8001374:	f7fe feea 	bl	800014c <display7SEG>
			break;
 8001378:	e048      	b.n	800140c <fsm_manual_7seg+0x1a8>
		case 2:
			HAL_GPIO_WritePin(enables[0].port, enables[0].pin, SET);
 800137a:	4b28      	ldr	r3, [pc, #160]	@ (800141c <fsm_manual_7seg+0x1b8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a27      	ldr	r2, [pc, #156]	@ (800141c <fsm_manual_7seg+0x1b8>)
 8001380:	8891      	ldrh	r1, [r2, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fd36 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[1].port, enables[1].pin, SET);
 800138a:	4b24      	ldr	r3, [pc, #144]	@ (800141c <fsm_manual_7seg+0x1b8>)
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	4a23      	ldr	r2, [pc, #140]	@ (800141c <fsm_manual_7seg+0x1b8>)
 8001390:	8991      	ldrh	r1, [r2, #12]
 8001392:	2201      	movs	r2, #1
 8001394:	4618      	mov	r0, r3
 8001396:	f000 fd2e 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[2].port, enables[2].pin, RESET);
 800139a:	4b20      	ldr	r3, [pc, #128]	@ (800141c <fsm_manual_7seg+0x1b8>)
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	4a1f      	ldr	r2, [pc, #124]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80013a0:	8a91      	ldrh	r1, [r2, #20]
 80013a2:	2200      	movs	r2, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 fd26 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[3].port, enables[3].pin, SET);
 80013aa:	4b1c      	ldr	r3, [pc, #112]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	4a1b      	ldr	r2, [pc, #108]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80013b0:	8b91      	ldrh	r1, [r2, #28]
 80013b2:	2201      	movs	r2, #1
 80013b4:	4618      	mov	r0, r3
 80013b6:	f000 fd1e 	bl	8001df6 <HAL_GPIO_WritePin>
			display7SEG(0);
 80013ba:	2000      	movs	r0, #0
 80013bc:	f7fe fec6 	bl	800014c <display7SEG>
			break;
 80013c0:	e024      	b.n	800140c <fsm_manual_7seg+0x1a8>
		case 3:
			HAL_GPIO_WritePin(enables[0].port, enables[0].pin, SET);
 80013c2:	4b16      	ldr	r3, [pc, #88]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a15      	ldr	r2, [pc, #84]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80013c8:	8891      	ldrh	r1, [r2, #4]
 80013ca:	2201      	movs	r2, #1
 80013cc:	4618      	mov	r0, r3
 80013ce:	f000 fd12 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[1].port, enables[1].pin, SET);
 80013d2:	4b12      	ldr	r3, [pc, #72]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	4a11      	ldr	r2, [pc, #68]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80013d8:	8991      	ldrh	r1, [r2, #12]
 80013da:	2201      	movs	r2, #1
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 fd0a 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[2].port, enables[2].pin, SET);
 80013e2:	4b0e      	ldr	r3, [pc, #56]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	4a0d      	ldr	r2, [pc, #52]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80013e8:	8a91      	ldrh	r1, [r2, #20]
 80013ea:	2201      	movs	r2, #1
 80013ec:	4618      	mov	r0, r3
 80013ee:	f000 fd02 	bl	8001df6 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(enables[3].port, enables[3].pin, RESET);
 80013f2:	4b0a      	ldr	r3, [pc, #40]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	4a09      	ldr	r2, [pc, #36]	@ (800141c <fsm_manual_7seg+0x1b8>)
 80013f8:	8b91      	ldrh	r1, [r2, #28]
 80013fa:	2200      	movs	r2, #0
 80013fc:	4618      	mov	r0, r3
 80013fe:	f000 fcfa 	bl	8001df6 <HAL_GPIO_WritePin>
			display7SEG(mode);
 8001402:	6838      	ldr	r0, [r7, #0]
 8001404:	f7fe fea2 	bl	800014c <display7SEG>
			break;
 8001408:	e000      	b.n	800140c <fsm_manual_7seg+0x1a8>
		default:
			break;
 800140a:	bf00      	nop
		}
	}
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200000d8 	.word	0x200000d8
 8001418:	2000011c 	.word	0x2000011c
 800141c:	20000090 	.word	0x20000090
 8001420:	20000128 	.word	0x20000128
 8001424:	68db8bad 	.word	0x68db8bad
 8001428:	10624dd3 	.word	0x10624dd3
 800142c:	66666667 	.word	0x66666667

08001430 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001434:	f000 f9dc 	bl	80017f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001438:	f000 f826 	bl	8001488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800143c:	f000 f8ac 	bl	8001598 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001440:	f000 f85e 	bl	8001500 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001444:	480e      	ldr	r0, [pc, #56]	@ (8001480 <main+0x50>)
 8001446:	f001 f935 	bl	80026b4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status[0] = INIT;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <main+0x54>)
 800144c:	2201      	movs	r2, #1
 800144e:	601a      	str	r2, [r3, #0]
  status[1] = INIT;
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <main+0x54>)
 8001452:	2201      	movs	r2, #1
 8001454:	605a      	str	r2, [r3, #4]
//  idx = 0;
  setTime(250,NUM_BUFFER);
 8001456:	2102      	movs	r1, #2
 8001458:	20fa      	movs	r0, #250	@ 0xfa
 800145a:	f7ff f807 	bl	800046c <setTime>
  setTime(1000, NUM_BUFFER + 1);
 800145e:	2103      	movs	r1, #3
 8001460:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001464:	f7ff f802 	bl	800046c <setTime>
  while(1)
  {
	fsm_automation_run(0);
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff f905 	bl	8000678 <fsm_automation_run>
	fsm_automation_run(1);
 800146e:	2001      	movs	r0, #1
 8001470:	f7ff f902 	bl	8000678 <fsm_automation_run>
	fsm_manual_run();
 8001474:	f7ff fcc6 	bl	8000e04 <fsm_manual_run>
	countdown();
 8001478:	f7ff fca6 	bl	8000dc8 <countdown>
	fsm_automation_run(0);
 800147c:	bf00      	nop
 800147e:	e7f3      	b.n	8001468 <main+0x38>
 8001480:	20000130 	.word	0x20000130
 8001484:	2000010c 	.word	0x2000010c

08001488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b090      	sub	sp, #64	@ 0x40
 800148c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	f107 0318 	add.w	r3, r7, #24
 8001492:	2228      	movs	r2, #40	@ 0x28
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f001 fc98 	bl	8002dcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ae:	2301      	movs	r3, #1
 80014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b2:	2310      	movs	r3, #16
 80014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014b6:	2300      	movs	r3, #0
 80014b8:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ba:	f107 0318 	add.w	r3, r7, #24
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 fcca 	bl	8001e58 <HAL_RCC_OscConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <SystemClock_Config+0x46>
  {
    Error_Handler();
 80014ca:	f000 f8d3 	bl	8001674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ce:	230f      	movs	r3, #15
 80014d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014da:	2300      	movs	r3, #0
 80014dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f000 ff38 	bl	800235c <HAL_RCC_ClockConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80014f2:	f000 f8bf 	bl	8001674 <Error_Handler>
  }
}
 80014f6:	bf00      	nop
 80014f8:	3740      	adds	r7, #64	@ 0x40
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001514:	463b      	mov	r3, r7
 8001516:	2200      	movs	r2, #0
 8001518:	601a      	str	r2, [r3, #0]
 800151a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800151c:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <MX_TIM2_Init+0x94>)
 800151e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001522:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001524:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <MX_TIM2_Init+0x94>)
 8001526:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 800152a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800152c:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <MX_TIM2_Init+0x94>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001532:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <MX_TIM2_Init+0x94>)
 8001534:	2209      	movs	r2, #9
 8001536:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001538:	4b16      	ldr	r3, [pc, #88]	@ (8001594 <MX_TIM2_Init+0x94>)
 800153a:	2200      	movs	r2, #0
 800153c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800153e:	4b15      	ldr	r3, [pc, #84]	@ (8001594 <MX_TIM2_Init+0x94>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001544:	4813      	ldr	r0, [pc, #76]	@ (8001594 <MX_TIM2_Init+0x94>)
 8001546:	f001 f865 	bl	8002614 <HAL_TIM_Base_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001550:	f000 f890 	bl	8001674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001554:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001558:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	4619      	mov	r1, r3
 8001560:	480c      	ldr	r0, [pc, #48]	@ (8001594 <MX_TIM2_Init+0x94>)
 8001562:	f001 f9e3 	bl	800292c <HAL_TIM_ConfigClockSource>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800156c:	f000 f882 	bl	8001674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001570:	2300      	movs	r3, #0
 8001572:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	4619      	mov	r1, r3
 800157c:	4805      	ldr	r0, [pc, #20]	@ (8001594 <MX_TIM2_Init+0x94>)
 800157e:	f001 fbbb 	bl	8002cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001588:	f000 f874 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800158c:	bf00      	nop
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	20000130 	.word	0x20000130

08001598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 0308 	add.w	r3, r7, #8
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ac:	4b28      	ldr	r3, [pc, #160]	@ (8001650 <MX_GPIO_Init+0xb8>)
 80015ae:	699b      	ldr	r3, [r3, #24]
 80015b0:	4a27      	ldr	r2, [pc, #156]	@ (8001650 <MX_GPIO_Init+0xb8>)
 80015b2:	f043 0304 	orr.w	r3, r3, #4
 80015b6:	6193      	str	r3, [r2, #24]
 80015b8:	4b25      	ldr	r3, [pc, #148]	@ (8001650 <MX_GPIO_Init+0xb8>)
 80015ba:	699b      	ldr	r3, [r3, #24]
 80015bc:	f003 0304 	and.w	r3, r3, #4
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015c4:	4b22      	ldr	r3, [pc, #136]	@ (8001650 <MX_GPIO_Init+0xb8>)
 80015c6:	699b      	ldr	r3, [r3, #24]
 80015c8:	4a21      	ldr	r2, [pc, #132]	@ (8001650 <MX_GPIO_Init+0xb8>)
 80015ca:	f043 0308 	orr.w	r3, r3, #8
 80015ce:	6193      	str	r3, [r2, #24]
 80015d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001650 <MX_GPIO_Init+0xb8>)
 80015d2:	699b      	ldr	r3, [r3, #24]
 80015d4:	f003 0308 	and.w	r3, r3, #8
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PINA_Pin|PINB_Pin|PINC_Pin|PIND_Pin
 80015dc:	2200      	movs	r2, #0
 80015de:	f247 71fe 	movw	r1, #30718	@ 0x77fe
 80015e2:	481c      	ldr	r0, [pc, #112]	@ (8001654 <MX_GPIO_Init+0xbc>)
 80015e4:	f000 fc07 	bl	8001df6 <HAL_GPIO_WritePin>
                          |PINE_Pin|PINF_Pin|PING_Pin|RED1_Pin
                          |AMBER1_Pin|GREEN1_Pin|RED2_Pin|AMBER2_Pin
                          |GREEN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 80015e8:	2200      	movs	r2, #0
 80015ea:	f640 0178 	movw	r1, #2168	@ 0x878
 80015ee:	481a      	ldr	r0, [pc, #104]	@ (8001658 <MX_GPIO_Init+0xc0>)
 80015f0:	f000 fc01 	bl	8001df6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PINA_Pin PINB_Pin PINC_Pin PIND_Pin
                           PINE_Pin PINF_Pin PING_Pin RED1_Pin
                           AMBER1_Pin GREEN1_Pin RED2_Pin AMBER2_Pin
                           GREEN2_Pin */
  GPIO_InitStruct.Pin = PINA_Pin|PINB_Pin|PINC_Pin|PIND_Pin
 80015f4:	f247 73fe 	movw	r3, #30718	@ 0x77fe
 80015f8:	60bb      	str	r3, [r7, #8]
                          |PINE_Pin|PINF_Pin|PING_Pin|RED1_Pin
                          |AMBER1_Pin|GREEN1_Pin|RED2_Pin|AMBER2_Pin
                          |GREEN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015fa:	2301      	movs	r3, #1
 80015fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2302      	movs	r3, #2
 8001604:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0308 	add.w	r3, r7, #8
 800160a:	4619      	mov	r1, r3
 800160c:	4811      	ldr	r0, [pc, #68]	@ (8001654 <MX_GPIO_Init+0xbc>)
 800160e:	f000 fa5f 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUT0_Pin BUT1_Pin BUT2_Pin */
  GPIO_InitStruct.Pin = BUT0_Pin|BUT1_Pin|BUT2_Pin;
 8001612:	2307      	movs	r3, #7
 8001614:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800161a:	2301      	movs	r3, #1
 800161c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	4619      	mov	r1, r3
 8001624:	480c      	ldr	r0, [pc, #48]	@ (8001658 <MX_GPIO_Init+0xc0>)
 8001626:	f000 fa53 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin EN0_Pin EN1_Pin EN2_Pin
                           EN3_Pin */
  GPIO_InitStruct.Pin = LED_Pin|EN0_Pin|EN1_Pin|EN2_Pin
 800162a:	f640 0378 	movw	r3, #2168	@ 0x878
 800162e:	60bb      	str	r3, [r7, #8]
                          |EN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2302      	movs	r3, #2
 800163a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800163c:	f107 0308 	add.w	r3, r7, #8
 8001640:	4619      	mov	r1, r3
 8001642:	4805      	ldr	r0, [pc, #20]	@ (8001658 <MX_GPIO_Init+0xc0>)
 8001644:	f000 fa44 	bl	8001ad0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001648:	bf00      	nop
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000
 8001654:	40010800 	.word	0x40010800
 8001658:	40010c00 	.word	0x40010c00

0800165c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	runTime();
 8001664:	f7fe ff26 	bl	80004b4 <runTime>
	getKeyInput();
 8001668:	f7fe ff6e 	bl	8000548 <getKeyInput>
}
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <Error_Handler+0x8>

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <HAL_MspInit+0x5c>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	4a14      	ldr	r2, [pc, #80]	@ (80016dc <HAL_MspInit+0x5c>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6193      	str	r3, [r2, #24]
 8001692:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <HAL_MspInit+0x5c>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <HAL_MspInit+0x5c>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a0e      	ldr	r2, [pc, #56]	@ (80016dc <HAL_MspInit+0x5c>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <HAL_MspInit+0x5c>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80016b6:	4b0a      	ldr	r3, [pc, #40]	@ (80016e0 <HAL_MspInit+0x60>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <HAL_MspInit+0x60>)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010000 	.word	0x40010000

080016e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016f4:	d113      	bne.n	800171e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <HAL_TIM_Base_MspInit+0x44>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001728 <HAL_TIM_Base_MspInit+0x44>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	61d3      	str	r3, [r2, #28]
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <HAL_TIM_Base_MspInit+0x44>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	201c      	movs	r0, #28
 8001714:	f000 f9a5 	bl	8001a62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001718:	201c      	movs	r0, #28
 800171a:	f000 f9be 	bl	8001a9a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800171e:	bf00      	nop
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <NMI_Handler+0x4>

08001734 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <HardFault_Handler+0x4>

0800173c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <MemManage_Handler+0x4>

08001744 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <BusFault_Handler+0x4>

0800174c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <UsageFault_Handler+0x4>

08001754 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	bc80      	pop	{r7}
 8001776:	4770      	bx	lr

08001778 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800177c:	f000 f87e 	bl	800187c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001780:	bf00      	nop
 8001782:	bd80      	pop	{r7, pc}

08001784 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001788:	4802      	ldr	r0, [pc, #8]	@ (8001794 <TIM2_IRQHandler+0x10>)
 800178a:	f000 ffdf 	bl	800274c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000130 	.word	0x20000130

08001798 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a4:	f7ff fff8 	bl	8001798 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017a8:	480b      	ldr	r0, [pc, #44]	@ (80017d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017aa:	490c      	ldr	r1, [pc, #48]	@ (80017dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017ac:	4a0c      	ldr	r2, [pc, #48]	@ (80017e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b0:	e002      	b.n	80017b8 <LoopCopyDataInit>

080017b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017b6:	3304      	adds	r3, #4

080017b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017bc:	d3f9      	bcc.n	80017b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017be:	4a09      	ldr	r2, [pc, #36]	@ (80017e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017c0:	4c09      	ldr	r4, [pc, #36]	@ (80017e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c4:	e001      	b.n	80017ca <LoopFillZerobss>

080017c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017c8:	3204      	adds	r2, #4

080017ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017cc:	d3fb      	bcc.n	80017c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ce:	f001 fb05 	bl	8002ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017d2:	f7ff fe2d 	bl	8001430 <main>
  bx lr
 80017d6:	4770      	bx	lr
  ldr r0, =_sdata
 80017d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017dc:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80017e0:	08002e68 	.word	0x08002e68
  ldr r2, =_sbss
 80017e4:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 80017e8:	2000017c 	.word	0x2000017c

080017ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017ec:	e7fe      	b.n	80017ec <ADC1_2_IRQHandler>
	...

080017f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f4:	4b08      	ldr	r3, [pc, #32]	@ (8001818 <HAL_Init+0x28>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a07      	ldr	r2, [pc, #28]	@ (8001818 <HAL_Init+0x28>)
 80017fa:	f043 0310 	orr.w	r3, r3, #16
 80017fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001800:	2003      	movs	r0, #3
 8001802:	f000 f923 	bl	8001a4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001806:	200f      	movs	r0, #15
 8001808:	f000 f808 	bl	800181c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180c:	f7ff ff38 	bl	8001680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40022000 	.word	0x40022000

0800181c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001824:	4b12      	ldr	r3, [pc, #72]	@ (8001870 <HAL_InitTick+0x54>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <HAL_InitTick+0x58>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f93b 	bl	8001ab6 <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e00e      	b.n	8001868 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d80a      	bhi.n	8001866 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295
 8001858:	f000 f903 	bl	8001a62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800185c:	4a06      	ldr	r2, [pc, #24]	@ (8001878 <HAL_InitTick+0x5c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	200000b0 	.word	0x200000b0
 8001874:	200000b8 	.word	0x200000b8
 8001878:	200000b4 	.word	0x200000b4

0800187c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b05      	ldr	r3, [pc, #20]	@ (8001898 <HAL_IncTick+0x1c>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b05      	ldr	r3, [pc, #20]	@ (800189c <HAL_IncTick+0x20>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a03      	ldr	r2, [pc, #12]	@ (800189c <HAL_IncTick+0x20>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr
 8001898:	200000b8 	.word	0x200000b8
 800189c:	20000178 	.word	0x20000178

080018a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b02      	ldr	r3, [pc, #8]	@ (80018b0 <HAL_GetTick+0x10>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	20000178 	.word	0x20000178

080018b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f003 0307 	and.w	r3, r3, #7
 80018c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c4:	4b0c      	ldr	r3, [pc, #48]	@ (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ca:	68ba      	ldr	r2, [r7, #8]
 80018cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018d0:	4013      	ands	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e6:	4a04      	ldr	r2, [pc, #16]	@ (80018f8 <__NVIC_SetPriorityGrouping+0x44>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60d3      	str	r3, [r2, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bc80      	pop	{r7}
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001900:	4b04      	ldr	r3, [pc, #16]	@ (8001914 <__NVIC_GetPriorityGrouping+0x18>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	f003 0307 	and.w	r3, r3, #7
}
 800190a:	4618      	mov	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	2b00      	cmp	r3, #0
 8001928:	db0b      	blt.n	8001942 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	f003 021f 	and.w	r2, r3, #31
 8001930:	4906      	ldr	r1, [pc, #24]	@ (800194c <__NVIC_EnableIRQ+0x34>)
 8001932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	2001      	movs	r0, #1
 800193a:	fa00 f202 	lsl.w	r2, r0, r2
 800193e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100

08001950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800195c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001960:	2b00      	cmp	r3, #0
 8001962:	db0a      	blt.n	800197a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	490c      	ldr	r1, [pc, #48]	@ (800199c <__NVIC_SetPriority+0x4c>)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	0112      	lsls	r2, r2, #4
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	440b      	add	r3, r1
 8001974:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001978:	e00a      	b.n	8001990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	4908      	ldr	r1, [pc, #32]	@ (80019a0 <__NVIC_SetPriority+0x50>)
 8001980:	79fb      	ldrb	r3, [r7, #7]
 8001982:	f003 030f 	and.w	r3, r3, #15
 8001986:	3b04      	subs	r3, #4
 8001988:	0112      	lsls	r2, r2, #4
 800198a:	b2d2      	uxtb	r2, r2
 800198c:	440b      	add	r3, r1
 800198e:	761a      	strb	r2, [r3, #24]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	bc80      	pop	{r7}
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000e100 	.word	0xe000e100
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b089      	sub	sp, #36	@ 0x24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	f1c3 0307 	rsb	r3, r3, #7
 80019be:	2b04      	cmp	r3, #4
 80019c0:	bf28      	it	cs
 80019c2:	2304      	movcs	r3, #4
 80019c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	3304      	adds	r3, #4
 80019ca:	2b06      	cmp	r3, #6
 80019cc:	d902      	bls.n	80019d4 <NVIC_EncodePriority+0x30>
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3b03      	subs	r3, #3
 80019d2:	e000      	b.n	80019d6 <NVIC_EncodePriority+0x32>
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d8:	f04f 32ff 	mov.w	r2, #4294967295
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43da      	mvns	r2, r3
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	401a      	ands	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019ec:	f04f 31ff 	mov.w	r1, #4294967295
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa01 f303 	lsl.w	r3, r1, r3
 80019f6:	43d9      	mvns	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	4313      	orrs	r3, r2
         );
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3724      	adds	r7, #36	@ 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a18:	d301      	bcc.n	8001a1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e00f      	b.n	8001a3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a48 <SysTick_Config+0x40>)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a26:	210f      	movs	r1, #15
 8001a28:	f04f 30ff 	mov.w	r0, #4294967295
 8001a2c:	f7ff ff90 	bl	8001950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a30:	4b05      	ldr	r3, [pc, #20]	@ (8001a48 <SysTick_Config+0x40>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a36:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <SysTick_Config+0x40>)
 8001a38:	2207      	movs	r2, #7
 8001a3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	e000e010 	.word	0xe000e010

08001a4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff ff2d 	bl	80018b4 <__NVIC_SetPriorityGrouping>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	60b9      	str	r1, [r7, #8]
 8001a6c:	607a      	str	r2, [r7, #4]
 8001a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a74:	f7ff ff42 	bl	80018fc <__NVIC_GetPriorityGrouping>
 8001a78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	6978      	ldr	r0, [r7, #20]
 8001a80:	f7ff ff90 	bl	80019a4 <NVIC_EncodePriority>
 8001a84:	4602      	mov	r2, r0
 8001a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f7ff ff5f 	bl	8001950 <__NVIC_SetPriority>
}
 8001a92:	bf00      	nop
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff ff35 	bl	8001918 <__NVIC_EnableIRQ>
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}

08001ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffa2 	bl	8001a08 <SysTick_Config>
 8001ac4:	4603      	mov	r3, r0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b08b      	sub	sp, #44	@ 0x2c
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ae2:	e161      	b.n	8001da8 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	69fa      	ldr	r2, [r7, #28]
 8001af4:	4013      	ands	r3, r2
 8001af6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001af8:	69ba      	ldr	r2, [r7, #24]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	f040 8150 	bne.w	8001da2 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	4a97      	ldr	r2, [pc, #604]	@ (8001d64 <HAL_GPIO_Init+0x294>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d05e      	beq.n	8001bca <HAL_GPIO_Init+0xfa>
 8001b0c:	4a95      	ldr	r2, [pc, #596]	@ (8001d64 <HAL_GPIO_Init+0x294>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d875      	bhi.n	8001bfe <HAL_GPIO_Init+0x12e>
 8001b12:	4a95      	ldr	r2, [pc, #596]	@ (8001d68 <HAL_GPIO_Init+0x298>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d058      	beq.n	8001bca <HAL_GPIO_Init+0xfa>
 8001b18:	4a93      	ldr	r2, [pc, #588]	@ (8001d68 <HAL_GPIO_Init+0x298>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d86f      	bhi.n	8001bfe <HAL_GPIO_Init+0x12e>
 8001b1e:	4a93      	ldr	r2, [pc, #588]	@ (8001d6c <HAL_GPIO_Init+0x29c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d052      	beq.n	8001bca <HAL_GPIO_Init+0xfa>
 8001b24:	4a91      	ldr	r2, [pc, #580]	@ (8001d6c <HAL_GPIO_Init+0x29c>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d869      	bhi.n	8001bfe <HAL_GPIO_Init+0x12e>
 8001b2a:	4a91      	ldr	r2, [pc, #580]	@ (8001d70 <HAL_GPIO_Init+0x2a0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d04c      	beq.n	8001bca <HAL_GPIO_Init+0xfa>
 8001b30:	4a8f      	ldr	r2, [pc, #572]	@ (8001d70 <HAL_GPIO_Init+0x2a0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d863      	bhi.n	8001bfe <HAL_GPIO_Init+0x12e>
 8001b36:	4a8f      	ldr	r2, [pc, #572]	@ (8001d74 <HAL_GPIO_Init+0x2a4>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d046      	beq.n	8001bca <HAL_GPIO_Init+0xfa>
 8001b3c:	4a8d      	ldr	r2, [pc, #564]	@ (8001d74 <HAL_GPIO_Init+0x2a4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d85d      	bhi.n	8001bfe <HAL_GPIO_Init+0x12e>
 8001b42:	2b12      	cmp	r3, #18
 8001b44:	d82a      	bhi.n	8001b9c <HAL_GPIO_Init+0xcc>
 8001b46:	2b12      	cmp	r3, #18
 8001b48:	d859      	bhi.n	8001bfe <HAL_GPIO_Init+0x12e>
 8001b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8001b50 <HAL_GPIO_Init+0x80>)
 8001b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b50:	08001bcb 	.word	0x08001bcb
 8001b54:	08001ba5 	.word	0x08001ba5
 8001b58:	08001bb7 	.word	0x08001bb7
 8001b5c:	08001bf9 	.word	0x08001bf9
 8001b60:	08001bff 	.word	0x08001bff
 8001b64:	08001bff 	.word	0x08001bff
 8001b68:	08001bff 	.word	0x08001bff
 8001b6c:	08001bff 	.word	0x08001bff
 8001b70:	08001bff 	.word	0x08001bff
 8001b74:	08001bff 	.word	0x08001bff
 8001b78:	08001bff 	.word	0x08001bff
 8001b7c:	08001bff 	.word	0x08001bff
 8001b80:	08001bff 	.word	0x08001bff
 8001b84:	08001bff 	.word	0x08001bff
 8001b88:	08001bff 	.word	0x08001bff
 8001b8c:	08001bff 	.word	0x08001bff
 8001b90:	08001bff 	.word	0x08001bff
 8001b94:	08001bad 	.word	0x08001bad
 8001b98:	08001bc1 	.word	0x08001bc1
 8001b9c:	4a76      	ldr	r2, [pc, #472]	@ (8001d78 <HAL_GPIO_Init+0x2a8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d013      	beq.n	8001bca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ba2:	e02c      	b.n	8001bfe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	623b      	str	r3, [r7, #32]
          break;
 8001baa:	e029      	b.n	8001c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	623b      	str	r3, [r7, #32]
          break;
 8001bb4:	e024      	b.n	8001c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	3308      	adds	r3, #8
 8001bbc:	623b      	str	r3, [r7, #32]
          break;
 8001bbe:	e01f      	b.n	8001c00 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	330c      	adds	r3, #12
 8001bc6:	623b      	str	r3, [r7, #32]
          break;
 8001bc8:	e01a      	b.n	8001c00 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d102      	bne.n	8001bd8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	623b      	str	r3, [r7, #32]
          break;
 8001bd6:	e013      	b.n	8001c00 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d105      	bne.n	8001bec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be0:	2308      	movs	r3, #8
 8001be2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	69fa      	ldr	r2, [r7, #28]
 8001be8:	611a      	str	r2, [r3, #16]
          break;
 8001bea:	e009      	b.n	8001c00 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bec:	2308      	movs	r3, #8
 8001bee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	615a      	str	r2, [r3, #20]
          break;
 8001bf6:	e003      	b.n	8001c00 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	623b      	str	r3, [r7, #32]
          break;
 8001bfc:	e000      	b.n	8001c00 <HAL_GPIO_Init+0x130>
          break;
 8001bfe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	2bff      	cmp	r3, #255	@ 0xff
 8001c04:	d801      	bhi.n	8001c0a <HAL_GPIO_Init+0x13a>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	e001      	b.n	8001c0e <HAL_GPIO_Init+0x13e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	2bff      	cmp	r3, #255	@ 0xff
 8001c14:	d802      	bhi.n	8001c1c <HAL_GPIO_Init+0x14c>
 8001c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	e002      	b.n	8001c22 <HAL_GPIO_Init+0x152>
 8001c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1e:	3b08      	subs	r3, #8
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	210f      	movs	r1, #15
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	401a      	ands	r2, r3
 8001c34:	6a39      	ldr	r1, [r7, #32]
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3c:	431a      	orrs	r2, r3
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80a9 	beq.w	8001da2 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c50:	4b4a      	ldr	r3, [pc, #296]	@ (8001d7c <HAL_GPIO_Init+0x2ac>)
 8001c52:	699b      	ldr	r3, [r3, #24]
 8001c54:	4a49      	ldr	r2, [pc, #292]	@ (8001d7c <HAL_GPIO_Init+0x2ac>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6193      	str	r3, [r2, #24]
 8001c5c:	4b47      	ldr	r3, [pc, #284]	@ (8001d7c <HAL_GPIO_Init+0x2ac>)
 8001c5e:	699b      	ldr	r3, [r3, #24]
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c68:	4a45      	ldr	r2, [pc, #276]	@ (8001d80 <HAL_GPIO_Init+0x2b0>)
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	3302      	adds	r3, #2
 8001c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c74:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	220f      	movs	r2, #15
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a3d      	ldr	r2, [pc, #244]	@ (8001d84 <HAL_GPIO_Init+0x2b4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d00d      	beq.n	8001cb0 <HAL_GPIO_Init+0x1e0>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a3c      	ldr	r2, [pc, #240]	@ (8001d88 <HAL_GPIO_Init+0x2b8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d007      	beq.n	8001cac <HAL_GPIO_Init+0x1dc>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a3b      	ldr	r2, [pc, #236]	@ (8001d8c <HAL_GPIO_Init+0x2bc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d101      	bne.n	8001ca8 <HAL_GPIO_Init+0x1d8>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e004      	b.n	8001cb2 <HAL_GPIO_Init+0x1e2>
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e002      	b.n	8001cb2 <HAL_GPIO_Init+0x1e2>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <HAL_GPIO_Init+0x1e2>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001cb4:	f002 0203 	and.w	r2, r2, #3
 8001cb8:	0092      	lsls	r2, r2, #2
 8001cba:	4093      	lsls	r3, r2
 8001cbc:	68fa      	ldr	r2, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cc2:	492f      	ldr	r1, [pc, #188]	@ (8001d80 <HAL_GPIO_Init+0x2b0>)
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc6:	089b      	lsrs	r3, r3, #2
 8001cc8:	3302      	adds	r3, #2
 8001cca:	68fa      	ldr	r2, [r7, #12]
 8001ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d006      	beq.n	8001cea <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8001d90 <HAL_GPIO_Init+0x2c0>)
 8001cde:	689a      	ldr	r2, [r3, #8]
 8001ce0:	492b      	ldr	r1, [pc, #172]	@ (8001d90 <HAL_GPIO_Init+0x2c0>)
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
 8001ce8:	e006      	b.n	8001cf8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cea:	4b29      	ldr	r3, [pc, #164]	@ (8001d90 <HAL_GPIO_Init+0x2c0>)
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	4927      	ldr	r1, [pc, #156]	@ (8001d90 <HAL_GPIO_Init+0x2c0>)
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d006      	beq.n	8001d12 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d04:	4b22      	ldr	r3, [pc, #136]	@ (8001d90 <HAL_GPIO_Init+0x2c0>)
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	4921      	ldr	r1, [pc, #132]	@ (8001d90 <HAL_GPIO_Init+0x2c0>)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	60cb      	str	r3, [r1, #12]
 8001d10:	e006      	b.n	8001d20 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d12:	4b1f      	ldr	r3, [pc, #124]	@ (8001d90 <HAL_GPIO_Init+0x2c0>)
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	43db      	mvns	r3, r3
 8001d1a:	491d      	ldr	r1, [pc, #116]	@ (8001d90 <HAL_GPIO_Init+0x2c0>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d006      	beq.n	8001d3a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d2c:	4b18      	ldr	r3, [pc, #96]	@ (8001d90 <HAL_GPIO_Init+0x2c0>)
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	4917      	ldr	r1, [pc, #92]	@ (8001d90 <HAL_GPIO_Init+0x2c0>)
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
 8001d38:	e006      	b.n	8001d48 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d3a:	4b15      	ldr	r3, [pc, #84]	@ (8001d90 <HAL_GPIO_Init+0x2c0>)
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	4913      	ldr	r1, [pc, #76]	@ (8001d90 <HAL_GPIO_Init+0x2c0>)
 8001d44:	4013      	ands	r3, r2
 8001d46:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d01f      	beq.n	8001d94 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d54:	4b0e      	ldr	r3, [pc, #56]	@ (8001d90 <HAL_GPIO_Init+0x2c0>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	490d      	ldr	r1, [pc, #52]	@ (8001d90 <HAL_GPIO_Init+0x2c0>)
 8001d5a:	69bb      	ldr	r3, [r7, #24]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	600b      	str	r3, [r1, #0]
 8001d60:	e01f      	b.n	8001da2 <HAL_GPIO_Init+0x2d2>
 8001d62:	bf00      	nop
 8001d64:	10320000 	.word	0x10320000
 8001d68:	10310000 	.word	0x10310000
 8001d6c:	10220000 	.word	0x10220000
 8001d70:	10210000 	.word	0x10210000
 8001d74:	10120000 	.word	0x10120000
 8001d78:	10110000 	.word	0x10110000
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40010000 	.word	0x40010000
 8001d84:	40010800 	.word	0x40010800
 8001d88:	40010c00 	.word	0x40010c00
 8001d8c:	40011000 	.word	0x40011000
 8001d90:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d94:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc4 <HAL_GPIO_Init+0x2f4>)
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	4909      	ldr	r1, [pc, #36]	@ (8001dc4 <HAL_GPIO_Init+0x2f4>)
 8001d9e:	4013      	ands	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	3301      	adds	r3, #1
 8001da6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dae:	fa22 f303 	lsr.w	r3, r2, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f47f ae96 	bne.w	8001ae4 <HAL_GPIO_Init+0x14>
  }
}
 8001db8:	bf00      	nop
 8001dba:	bf00      	nop
 8001dbc:	372c      	adds	r7, #44	@ 0x2c
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bc80      	pop	{r7}
 8001dc2:	4770      	bx	lr
 8001dc4:	40010400 	.word	0x40010400

08001dc8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	887b      	ldrh	r3, [r7, #2]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d002      	beq.n	8001de6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001de0:	2301      	movs	r3, #1
 8001de2:	73fb      	strb	r3, [r7, #15]
 8001de4:	e001      	b.n	8001dea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bc80      	pop	{r7}
 8001df4:	4770      	bx	lr

08001df6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001df6:	b480      	push	{r7}
 8001df8:	b083      	sub	sp, #12
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	6078      	str	r0, [r7, #4]
 8001dfe:	460b      	mov	r3, r1
 8001e00:	807b      	strh	r3, [r7, #2]
 8001e02:	4613      	mov	r3, r2
 8001e04:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e06:	787b      	ldrb	r3, [r7, #1]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e0c:	887a      	ldrh	r2, [r7, #2]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e12:	e003      	b.n	8001e1c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e14:	887b      	ldrh	r3, [r7, #2]
 8001e16:	041a      	lsls	r2, r3, #16
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	611a      	str	r2, [r3, #16]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr

08001e26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e26:	b480      	push	{r7}
 8001e28:	b085      	sub	sp, #20
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e38:	887a      	ldrh	r2, [r7, #2]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	041a      	lsls	r2, r3, #16
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	43d9      	mvns	r1, r3
 8001e44:	887b      	ldrh	r3, [r7, #2]
 8001e46:	400b      	ands	r3, r1
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	611a      	str	r2, [r3, #16]
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b086      	sub	sp, #24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e272      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 8087 	beq.w	8001f86 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e78:	4b92      	ldr	r3, [pc, #584]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b04      	cmp	r3, #4
 8001e82:	d00c      	beq.n	8001e9e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e84:	4b8f      	ldr	r3, [pc, #572]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f003 030c 	and.w	r3, r3, #12
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d112      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5e>
 8001e90:	4b8c      	ldr	r3, [pc, #560]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e9c:	d10b      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9e:	4b89      	ldr	r3, [pc, #548]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d06c      	beq.n	8001f84 <HAL_RCC_OscConfig+0x12c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d168      	bne.n	8001f84 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e24c      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x76>
 8001ec0:	4b80      	ldr	r3, [pc, #512]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a7f      	ldr	r2, [pc, #508]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eca:	6013      	str	r3, [r2, #0]
 8001ecc:	e02e      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x98>
 8001ed6:	4b7b      	ldr	r3, [pc, #492]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a7a      	ldr	r2, [pc, #488]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	4b78      	ldr	r3, [pc, #480]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a77      	ldr	r2, [pc, #476]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e01d      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0xbc>
 8001efa:	4b72      	ldr	r3, [pc, #456]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a71      	ldr	r2, [pc, #452]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b6f      	ldr	r3, [pc, #444]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a6e      	ldr	r2, [pc, #440]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e00b      	b.n	8001f2c <HAL_RCC_OscConfig+0xd4>
 8001f14:	4b6b      	ldr	r3, [pc, #428]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a6a      	ldr	r2, [pc, #424]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b68      	ldr	r3, [pc, #416]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a67      	ldr	r2, [pc, #412]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f2a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d013      	beq.n	8001f5c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff fcb4 	bl	80018a0 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7ff fcb0 	bl	80018a0 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	@ 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e200      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	4b5d      	ldr	r3, [pc, #372]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0xe4>
 8001f5a:	e014      	b.n	8001f86 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff fca0 	bl	80018a0 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff fc9c 	bl	80018a0 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	@ 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1ec      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	4b53      	ldr	r3, [pc, #332]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0x10c>
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d063      	beq.n	800205a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f92:	4b4c      	ldr	r3, [pc, #304]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f9e:	4b49      	ldr	r3, [pc, #292]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d11c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x18c>
 8001faa:	4b46      	ldr	r3, [pc, #280]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d116      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	4b43      	ldr	r3, [pc, #268]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_RCC_OscConfig+0x176>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691b      	ldr	r3, [r3, #16]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e1c0      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fce:	4b3d      	ldr	r3, [pc, #244]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4939      	ldr	r1, [pc, #228]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	e03a      	b.n	800205a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	691b      	ldr	r3, [r3, #16]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d020      	beq.n	800202e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fec:	4b36      	ldr	r3, [pc, #216]	@ (80020c8 <HAL_RCC_OscConfig+0x270>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff2:	f7ff fc55 	bl	80018a0 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ffa:	f7ff fc51 	bl	80018a0 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e1a1      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200c:	4b2d      	ldr	r3, [pc, #180]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	4b2a      	ldr	r3, [pc, #168]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4927      	ldr	r1, [pc, #156]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
 800202c:	e015      	b.n	800205a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202e:	4b26      	ldr	r3, [pc, #152]	@ (80020c8 <HAL_RCC_OscConfig+0x270>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7ff fc34 	bl	80018a0 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203c:	f7ff fc30 	bl	80018a0 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e180      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d03a      	beq.n	80020dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d019      	beq.n	80020a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206e:	4b17      	ldr	r3, [pc, #92]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002074:	f7ff fc14 	bl	80018a0 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800207c:	f7ff fc10 	bl	80018a0 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e160      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208e:	4b0d      	ldr	r3, [pc, #52]	@ (80020c4 <HAL_RCC_OscConfig+0x26c>)
 8002090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800209a:	2001      	movs	r0, #1
 800209c:	f000 fa9c 	bl	80025d8 <RCC_Delay>
 80020a0:	e01c      	b.n	80020dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a2:	4b0a      	ldr	r3, [pc, #40]	@ (80020cc <HAL_RCC_OscConfig+0x274>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a8:	f7ff fbfa 	bl	80018a0 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ae:	e00f      	b.n	80020d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020b0:	f7ff fbf6 	bl	80018a0 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d908      	bls.n	80020d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e146      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
 80020c2:	bf00      	nop
 80020c4:	40021000 	.word	0x40021000
 80020c8:	42420000 	.word	0x42420000
 80020cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020d0:	4b92      	ldr	r3, [pc, #584]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1e9      	bne.n	80020b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0304 	and.w	r3, r3, #4
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f000 80a6 	beq.w	8002236 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ea:	2300      	movs	r3, #0
 80020ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ee:	4b8b      	ldr	r3, [pc, #556]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10d      	bne.n	8002116 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020fa:	4b88      	ldr	r3, [pc, #544]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	4a87      	ldr	r2, [pc, #540]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002100:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002104:	61d3      	str	r3, [r2, #28]
 8002106:	4b85      	ldr	r3, [pc, #532]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002112:	2301      	movs	r3, #1
 8002114:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002116:	4b82      	ldr	r3, [pc, #520]	@ (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800211e:	2b00      	cmp	r3, #0
 8002120:	d118      	bne.n	8002154 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002122:	4b7f      	ldr	r3, [pc, #508]	@ (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a7e      	ldr	r2, [pc, #504]	@ (8002320 <HAL_RCC_OscConfig+0x4c8>)
 8002128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800212c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800212e:	f7ff fbb7 	bl	80018a0 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002136:	f7ff fbb3 	bl	80018a0 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b64      	cmp	r3, #100	@ 0x64
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e103      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002148:	4b75      	ldr	r3, [pc, #468]	@ (8002320 <HAL_RCC_OscConfig+0x4c8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0f0      	beq.n	8002136 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d106      	bne.n	800216a <HAL_RCC_OscConfig+0x312>
 800215c:	4b6f      	ldr	r3, [pc, #444]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4a6e      	ldr	r2, [pc, #440]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6213      	str	r3, [r2, #32]
 8002168:	e02d      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10c      	bne.n	800218c <HAL_RCC_OscConfig+0x334>
 8002172:	4b6a      	ldr	r3, [pc, #424]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a69      	ldr	r2, [pc, #420]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002178:	f023 0301 	bic.w	r3, r3, #1
 800217c:	6213      	str	r3, [r2, #32]
 800217e:	4b67      	ldr	r3, [pc, #412]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002180:	6a1b      	ldr	r3, [r3, #32]
 8002182:	4a66      	ldr	r2, [pc, #408]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002184:	f023 0304 	bic.w	r3, r3, #4
 8002188:	6213      	str	r3, [r2, #32]
 800218a:	e01c      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	2b05      	cmp	r3, #5
 8002192:	d10c      	bne.n	80021ae <HAL_RCC_OscConfig+0x356>
 8002194:	4b61      	ldr	r3, [pc, #388]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a60      	ldr	r2, [pc, #384]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 800219a:	f043 0304 	orr.w	r3, r3, #4
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	4b5e      	ldr	r3, [pc, #376]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021a2:	6a1b      	ldr	r3, [r3, #32]
 80021a4:	4a5d      	ldr	r2, [pc, #372]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	f043 0301 	orr.w	r3, r3, #1
 80021aa:	6213      	str	r3, [r2, #32]
 80021ac:	e00b      	b.n	80021c6 <HAL_RCC_OscConfig+0x36e>
 80021ae:	4b5b      	ldr	r3, [pc, #364]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a5a      	ldr	r2, [pc, #360]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f023 0301 	bic.w	r3, r3, #1
 80021b8:	6213      	str	r3, [r2, #32]
 80021ba:	4b58      	ldr	r3, [pc, #352]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	6a1b      	ldr	r3, [r3, #32]
 80021be:	4a57      	ldr	r2, [pc, #348]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021c0:	f023 0304 	bic.w	r3, r3, #4
 80021c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d015      	beq.n	80021fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ce:	f7ff fb67 	bl	80018a0 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7ff fb63 	bl	80018a0 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e0b1      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	4b4b      	ldr	r3, [pc, #300]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	f003 0302 	and.w	r3, r3, #2
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d0ee      	beq.n	80021d6 <HAL_RCC_OscConfig+0x37e>
 80021f8:	e014      	b.n	8002224 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021fa:	f7ff fb51 	bl	80018a0 <HAL_GetTick>
 80021fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002200:	e00a      	b.n	8002218 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002202:	f7ff fb4d 	bl	80018a0 <HAL_GetTick>
 8002206:	4602      	mov	r2, r0
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002210:	4293      	cmp	r3, r2
 8002212:	d901      	bls.n	8002218 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002214:	2303      	movs	r3, #3
 8002216:	e09b      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002218:	4b40      	ldr	r3, [pc, #256]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	f003 0302 	and.w	r3, r3, #2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d1ee      	bne.n	8002202 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002224:	7dfb      	ldrb	r3, [r7, #23]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d105      	bne.n	8002236 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800222a:	4b3c      	ldr	r3, [pc, #240]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	4a3b      	ldr	r2, [pc, #236]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002230:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002234:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 8087 	beq.w	800234e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002240:	4b36      	ldr	r3, [pc, #216]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f003 030c 	and.w	r3, r3, #12
 8002248:	2b08      	cmp	r3, #8
 800224a:	d061      	beq.n	8002310 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	2b02      	cmp	r3, #2
 8002252:	d146      	bne.n	80022e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002254:	4b33      	ldr	r3, [pc, #204]	@ (8002324 <HAL_RCC_OscConfig+0x4cc>)
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225a:	f7ff fb21 	bl	80018a0 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002262:	f7ff fb1d 	bl	80018a0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e06d      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002274:	4b29      	ldr	r3, [pc, #164]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d1f0      	bne.n	8002262 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002288:	d108      	bne.n	800229c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800228a:	4b24      	ldr	r3, [pc, #144]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	4921      	ldr	r1, [pc, #132]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229c:	4b1f      	ldr	r3, [pc, #124]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6a19      	ldr	r1, [r3, #32]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ac:	430b      	orrs	r3, r1
 80022ae:	491b      	ldr	r1, [pc, #108]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022b6:	2201      	movs	r2, #1
 80022b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ba:	f7ff faf1 	bl	80018a0 <HAL_GetTick>
 80022be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c2:	f7ff faed 	bl	80018a0 <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e03d      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022d4:	4b11      	ldr	r3, [pc, #68]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x46a>
 80022e0:	e035      	b.n	800234e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022e2:	4b10      	ldr	r3, [pc, #64]	@ (8002324 <HAL_RCC_OscConfig+0x4cc>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022e8:	f7ff fada 	bl	80018a0 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ee:	e008      	b.n	8002302 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f0:	f7ff fad6 	bl	80018a0 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d901      	bls.n	8002302 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e026      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002302:	4b06      	ldr	r3, [pc, #24]	@ (800231c <HAL_RCC_OscConfig+0x4c4>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f0      	bne.n	80022f0 <HAL_RCC_OscConfig+0x498>
 800230e:	e01e      	b.n	800234e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	69db      	ldr	r3, [r3, #28]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d107      	bne.n	8002328 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e019      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
 800231c:	40021000 	.word	0x40021000
 8002320:	40007000 	.word	0x40007000
 8002324:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002328:	4b0b      	ldr	r3, [pc, #44]	@ (8002358 <HAL_RCC_OscConfig+0x500>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	429a      	cmp	r2, r3
 800233a:	d106      	bne.n	800234a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	40021000 	.word	0x40021000

0800235c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0d0      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002370:	4b6a      	ldr	r3, [pc, #424]	@ (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d910      	bls.n	80023a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b67      	ldr	r3, [pc, #412]	@ (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f023 0207 	bic.w	r2, r3, #7
 8002386:	4965      	ldr	r1, [pc, #404]	@ (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	4313      	orrs	r3, r2
 800238c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	4b63      	ldr	r3, [pc, #396]	@ (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0307 	and.w	r3, r3, #7
 8002396:	683a      	ldr	r2, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d001      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0b8      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d020      	beq.n	80023ee <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0304 	and.w	r3, r3, #4
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b8:	4b59      	ldr	r3, [pc, #356]	@ (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a58      	ldr	r2, [pc, #352]	@ (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023c2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d005      	beq.n	80023dc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023d0:	4b53      	ldr	r3, [pc, #332]	@ (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	4a52      	ldr	r2, [pc, #328]	@ (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023d6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023da:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023dc:	4b50      	ldr	r3, [pc, #320]	@ (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	494d      	ldr	r1, [pc, #308]	@ (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d040      	beq.n	800247c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4b47      	ldr	r3, [pc, #284]	@ (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d115      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07f      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241a:	4b41      	ldr	r3, [pc, #260]	@ (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e073      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242a:	4b3d      	ldr	r3, [pc, #244]	@ (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e06b      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243a:	4b39      	ldr	r3, [pc, #228]	@ (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f023 0203 	bic.w	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4936      	ldr	r1, [pc, #216]	@ (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 8002448:	4313      	orrs	r3, r2
 800244a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800244c:	f7ff fa28 	bl	80018a0 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	e00a      	b.n	800246a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002454:	f7ff fa24 	bl	80018a0 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e053      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	4b2d      	ldr	r3, [pc, #180]	@ (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 020c 	and.w	r2, r3, #12
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	429a      	cmp	r2, r3
 800247a:	d1eb      	bne.n	8002454 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800247c:	4b27      	ldr	r3, [pc, #156]	@ (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d210      	bcs.n	80024ac <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b24      	ldr	r3, [pc, #144]	@ (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f023 0207 	bic.w	r2, r3, #7
 8002492:	4922      	ldr	r1, [pc, #136]	@ (800251c <HAL_RCC_ClockConfig+0x1c0>)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800249a:	4b20      	ldr	r3, [pc, #128]	@ (800251c <HAL_RCC_ClockConfig+0x1c0>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d001      	beq.n	80024ac <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e032      	b.n	8002512 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b8:	4b19      	ldr	r3, [pc, #100]	@ (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	4916      	ldr	r1, [pc, #88]	@ (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024d6:	4b12      	ldr	r3, [pc, #72]	@ (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	00db      	lsls	r3, r3, #3
 80024e4:	490e      	ldr	r1, [pc, #56]	@ (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ea:	f000 f821 	bl	8002530 <HAL_RCC_GetSysClockFreq>
 80024ee:	4602      	mov	r2, r0
 80024f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	091b      	lsrs	r3, r3, #4
 80024f6:	f003 030f 	and.w	r3, r3, #15
 80024fa:	490a      	ldr	r1, [pc, #40]	@ (8002524 <HAL_RCC_ClockConfig+0x1c8>)
 80024fc:	5ccb      	ldrb	r3, [r1, r3]
 80024fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002502:	4a09      	ldr	r2, [pc, #36]	@ (8002528 <HAL_RCC_ClockConfig+0x1cc>)
 8002504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002506:	4b09      	ldr	r3, [pc, #36]	@ (800252c <HAL_RCC_ClockConfig+0x1d0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff f986 	bl	800181c <HAL_InitTick>

  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	4618      	mov	r0, r3
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	40022000 	.word	0x40022000
 8002520:	40021000 	.word	0x40021000
 8002524:	08002e3c 	.word	0x08002e3c
 8002528:	200000b0 	.word	0x200000b0
 800252c:	200000b4 	.word	0x200000b4

08002530 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002536:	2300      	movs	r3, #0
 8002538:	60fb      	str	r3, [r7, #12]
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	2300      	movs	r3, #0
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002546:	2300      	movs	r3, #0
 8002548:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800254a:	4b1e      	ldr	r3, [pc, #120]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x94>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b04      	cmp	r3, #4
 8002558:	d002      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x30>
 800255a:	2b08      	cmp	r3, #8
 800255c:	d003      	beq.n	8002566 <HAL_RCC_GetSysClockFreq+0x36>
 800255e:	e027      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002560:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002562:	613b      	str	r3, [r7, #16]
      break;
 8002564:	e027      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	0c9b      	lsrs	r3, r3, #18
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	4a17      	ldr	r2, [pc, #92]	@ (80025cc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002570:	5cd3      	ldrb	r3, [r2, r3]
 8002572:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d010      	beq.n	80025a0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800257e:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	0c5b      	lsrs	r3, r3, #17
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	4a11      	ldr	r2, [pc, #68]	@ (80025d0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800258a:	5cd3      	ldrb	r3, [r2, r3]
 800258c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a0d      	ldr	r2, [pc, #52]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002592:	fb03 f202 	mul.w	r2, r3, r2
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	fbb2 f3f3 	udiv	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e004      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a0c      	ldr	r2, [pc, #48]	@ (80025d4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80025a4:	fb02 f303 	mul.w	r3, r2, r3
 80025a8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	613b      	str	r3, [r7, #16]
      break;
 80025ae:	e002      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025b0:	4b05      	ldr	r3, [pc, #20]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0x98>)
 80025b2:	613b      	str	r3, [r7, #16]
      break;
 80025b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025b6:	693b      	ldr	r3, [r7, #16]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000
 80025c8:	007a1200 	.word	0x007a1200
 80025cc:	08002e4c 	.word	0x08002e4c
 80025d0:	08002e5c 	.word	0x08002e5c
 80025d4:	003d0900 	.word	0x003d0900

080025d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025e0:	4b0a      	ldr	r3, [pc, #40]	@ (800260c <RCC_Delay+0x34>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002610 <RCC_Delay+0x38>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	0a5b      	lsrs	r3, r3, #9
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	fb02 f303 	mul.w	r3, r2, r3
 80025f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025f4:	bf00      	nop
  }
  while (Delay --);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1e5a      	subs	r2, r3, #1
 80025fa:	60fa      	str	r2, [r7, #12]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1f9      	bne.n	80025f4 <RCC_Delay+0x1c>
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	3714      	adds	r7, #20
 8002606:	46bd      	mov	sp, r7
 8002608:	bc80      	pop	{r7}
 800260a:	4770      	bx	lr
 800260c:	200000b0 	.word	0x200000b0
 8002610:	10624dd3 	.word	0x10624dd3

08002614 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e041      	b.n	80026aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d106      	bne.n	8002640 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff f852 	bl	80016e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2202      	movs	r2, #2
 8002644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3304      	adds	r3, #4
 8002650:	4619      	mov	r1, r3
 8002652:	4610      	mov	r0, r2
 8002654:	f000 fa56 	bl	8002b04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b085      	sub	sp, #20
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	d001      	beq.n	80026cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e035      	b.n	8002738 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68da      	ldr	r2, [r3, #12]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f042 0201 	orr.w	r2, r2, #1
 80026e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a16      	ldr	r2, [pc, #88]	@ (8002744 <HAL_TIM_Base_Start_IT+0x90>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d009      	beq.n	8002702 <HAL_TIM_Base_Start_IT+0x4e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026f6:	d004      	beq.n	8002702 <HAL_TIM_Base_Start_IT+0x4e>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a12      	ldr	r2, [pc, #72]	@ (8002748 <HAL_TIM_Base_Start_IT+0x94>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d111      	bne.n	8002726 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	2b06      	cmp	r3, #6
 8002712:	d010      	beq.n	8002736 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002724:	e007      	b.n	8002736 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f042 0201 	orr.w	r2, r2, #1
 8002734:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3714      	adds	r7, #20
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40012c00 	.word	0x40012c00
 8002748:	40000400 	.word	0x40000400

0800274c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	691b      	ldr	r3, [r3, #16]
 8002762:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b00      	cmp	r3, #0
 800276c:	d020      	beq.n	80027b0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f003 0302 	and.w	r3, r3, #2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d01b      	beq.n	80027b0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f06f 0202 	mvn.w	r2, #2
 8002780:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	699b      	ldr	r3, [r3, #24]
 800278e:	f003 0303 	and.w	r3, r3, #3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d003      	beq.n	800279e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f998 	bl	8002acc <HAL_TIM_IC_CaptureCallback>
 800279c:	e005      	b.n	80027aa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f98b 	bl	8002aba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f000 f99a 	bl	8002ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2200      	movs	r2, #0
 80027ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f003 0304 	and.w	r3, r3, #4
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d020      	beq.n	80027fc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01b      	beq.n	80027fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f06f 0204 	mvn.w	r2, #4
 80027cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2202      	movs	r2, #2
 80027d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d003      	beq.n	80027ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f000 f972 	bl	8002acc <HAL_TIM_IC_CaptureCallback>
 80027e8:	e005      	b.n	80027f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f000 f965 	bl	8002aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f974 	bl	8002ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f003 0308 	and.w	r3, r3, #8
 8002802:	2b00      	cmp	r3, #0
 8002804:	d020      	beq.n	8002848 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d01b      	beq.n	8002848 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f06f 0208 	mvn.w	r2, #8
 8002818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2204      	movs	r2, #4
 800281e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	69db      	ldr	r3, [r3, #28]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 f94c 	bl	8002acc <HAL_TIM_IC_CaptureCallback>
 8002834:	e005      	b.n	8002842 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f93f 	bl	8002aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f000 f94e 	bl	8002ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	2b00      	cmp	r3, #0
 8002850:	d020      	beq.n	8002894 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01b      	beq.n	8002894 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f06f 0210 	mvn.w	r2, #16
 8002864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2208      	movs	r2, #8
 800286a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	69db      	ldr	r3, [r3, #28]
 8002872:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f926 	bl	8002acc <HAL_TIM_IC_CaptureCallback>
 8002880:	e005      	b.n	800288e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f919 	bl	8002aba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f928 	bl	8002ade <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2200      	movs	r2, #0
 8002892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d00c      	beq.n	80028b8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0201 	mvn.w	r2, #1
 80028b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7fe fed2 	bl	800165c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00c      	beq.n	80028dc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80028d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fa6f 	bl	8002dba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00c      	beq.n	8002900 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d007      	beq.n	8002900 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80028f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 f8f8 	bl	8002af0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	f003 0320 	and.w	r3, r3, #32
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00c      	beq.n	8002924 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f003 0320 	and.w	r3, r3, #32
 8002910:	2b00      	cmp	r3, #0
 8002912:	d007      	beq.n	8002924 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f06f 0220 	mvn.w	r2, #32
 800291c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fa42 	bl	8002da8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002924:	bf00      	nop
 8002926:	3710      	adds	r7, #16
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_TIM_ConfigClockSource+0x1c>
 8002944:	2302      	movs	r3, #2
 8002946:	e0b4      	b.n	8002ab2 <HAL_TIM_ConfigClockSource+0x186>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2202      	movs	r2, #2
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800296e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68ba      	ldr	r2, [r7, #8]
 8002976:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002980:	d03e      	beq.n	8002a00 <HAL_TIM_ConfigClockSource+0xd4>
 8002982:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002986:	f200 8087 	bhi.w	8002a98 <HAL_TIM_ConfigClockSource+0x16c>
 800298a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800298e:	f000 8086 	beq.w	8002a9e <HAL_TIM_ConfigClockSource+0x172>
 8002992:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002996:	d87f      	bhi.n	8002a98 <HAL_TIM_ConfigClockSource+0x16c>
 8002998:	2b70      	cmp	r3, #112	@ 0x70
 800299a:	d01a      	beq.n	80029d2 <HAL_TIM_ConfigClockSource+0xa6>
 800299c:	2b70      	cmp	r3, #112	@ 0x70
 800299e:	d87b      	bhi.n	8002a98 <HAL_TIM_ConfigClockSource+0x16c>
 80029a0:	2b60      	cmp	r3, #96	@ 0x60
 80029a2:	d050      	beq.n	8002a46 <HAL_TIM_ConfigClockSource+0x11a>
 80029a4:	2b60      	cmp	r3, #96	@ 0x60
 80029a6:	d877      	bhi.n	8002a98 <HAL_TIM_ConfigClockSource+0x16c>
 80029a8:	2b50      	cmp	r3, #80	@ 0x50
 80029aa:	d03c      	beq.n	8002a26 <HAL_TIM_ConfigClockSource+0xfa>
 80029ac:	2b50      	cmp	r3, #80	@ 0x50
 80029ae:	d873      	bhi.n	8002a98 <HAL_TIM_ConfigClockSource+0x16c>
 80029b0:	2b40      	cmp	r3, #64	@ 0x40
 80029b2:	d058      	beq.n	8002a66 <HAL_TIM_ConfigClockSource+0x13a>
 80029b4:	2b40      	cmp	r3, #64	@ 0x40
 80029b6:	d86f      	bhi.n	8002a98 <HAL_TIM_ConfigClockSource+0x16c>
 80029b8:	2b30      	cmp	r3, #48	@ 0x30
 80029ba:	d064      	beq.n	8002a86 <HAL_TIM_ConfigClockSource+0x15a>
 80029bc:	2b30      	cmp	r3, #48	@ 0x30
 80029be:	d86b      	bhi.n	8002a98 <HAL_TIM_ConfigClockSource+0x16c>
 80029c0:	2b20      	cmp	r3, #32
 80029c2:	d060      	beq.n	8002a86 <HAL_TIM_ConfigClockSource+0x15a>
 80029c4:	2b20      	cmp	r3, #32
 80029c6:	d867      	bhi.n	8002a98 <HAL_TIM_ConfigClockSource+0x16c>
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d05c      	beq.n	8002a86 <HAL_TIM_ConfigClockSource+0x15a>
 80029cc:	2b10      	cmp	r3, #16
 80029ce:	d05a      	beq.n	8002a86 <HAL_TIM_ConfigClockSource+0x15a>
 80029d0:	e062      	b.n	8002a98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80029e2:	f000 f96a 	bl	8002cba <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80029f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	609a      	str	r2, [r3, #8]
      break;
 80029fe:	e04f      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002a10:	f000 f953 	bl	8002cba <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	689a      	ldr	r2, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a22:	609a      	str	r2, [r3, #8]
      break;
 8002a24:	e03c      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a32:	461a      	mov	r2, r3
 8002a34:	f000 f8ca 	bl	8002bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2150      	movs	r1, #80	@ 0x50
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f921 	bl	8002c86 <TIM_ITRx_SetConfig>
      break;
 8002a44:	e02c      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a52:	461a      	mov	r2, r3
 8002a54:	f000 f8e8 	bl	8002c28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2160      	movs	r1, #96	@ 0x60
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f000 f911 	bl	8002c86 <TIM_ITRx_SetConfig>
      break;
 8002a64:	e01c      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a72:	461a      	mov	r2, r3
 8002a74:	f000 f8aa 	bl	8002bcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2140      	movs	r1, #64	@ 0x40
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f000 f901 	bl	8002c86 <TIM_ITRx_SetConfig>
      break;
 8002a84:	e00c      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4610      	mov	r0, r2
 8002a92:	f000 f8f8 	bl	8002c86 <TIM_ITRx_SetConfig>
      break;
 8002a96:	e003      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a9c:	e000      	b.n	8002aa0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002a9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bc80      	pop	{r7}
 8002aee:	4770      	bx	lr

08002af0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002af8:	bf00      	nop
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr
	...

08002b04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	4a2b      	ldr	r2, [pc, #172]	@ (8002bc4 <TIM_Base_SetConfig+0xc0>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d007      	beq.n	8002b2c <TIM_Base_SetConfig+0x28>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b22:	d003      	beq.n	8002b2c <TIM_Base_SetConfig+0x28>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a28      	ldr	r2, [pc, #160]	@ (8002bc8 <TIM_Base_SetConfig+0xc4>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d108      	bne.n	8002b3e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a20      	ldr	r2, [pc, #128]	@ (8002bc4 <TIM_Base_SetConfig+0xc0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d007      	beq.n	8002b56 <TIM_Base_SetConfig+0x52>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b4c:	d003      	beq.n	8002b56 <TIM_Base_SetConfig+0x52>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a1d      	ldr	r2, [pc, #116]	@ (8002bc8 <TIM_Base_SetConfig+0xc4>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d108      	bne.n	8002b68 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc4 <TIM_Base_SetConfig+0xc0>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d103      	bne.n	8002b9c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691a      	ldr	r2, [r3, #16]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0301 	and.w	r3, r3, #1
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d005      	beq.n	8002bba <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	f023 0201 	bic.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	611a      	str	r2, [r3, #16]
  }
}
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bc80      	pop	{r7}
 8002bc2:	4770      	bx	lr
 8002bc4:	40012c00 	.word	0x40012c00
 8002bc8:	40000400 	.word	0x40000400

08002bcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b087      	sub	sp, #28
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	f023 0201 	bic.w	r2, r3, #1
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f023 030a 	bic.w	r3, r3, #10
 8002c08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	621a      	str	r2, [r3, #32]
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bc80      	pop	{r7}
 8002c26:	4770      	bx	lr

08002c28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b087      	sub	sp, #28
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	f023 0210 	bic.w	r2, r3, #16
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002c52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	031b      	lsls	r3, r3, #12
 8002c58:	693a      	ldr	r2, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002c64:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	621a      	str	r2, [r3, #32]
}
 8002c7c:	bf00      	nop
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr

08002c86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b085      	sub	sp, #20
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c9e:	683a      	ldr	r2, [r7, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	f043 0307 	orr.w	r3, r3, #7
 8002ca8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	609a      	str	r2, [r3, #8]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr

08002cba <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b087      	sub	sp, #28
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002cd4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	021a      	lsls	r2, r3, #8
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	697a      	ldr	r2, [r7, #20]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	697a      	ldr	r2, [r7, #20]
 8002cec:	609a      	str	r2, [r3, #8]
}
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e041      	b.n	8002d94 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a14      	ldr	r2, [pc, #80]	@ (8002da0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d009      	beq.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d5c:	d004      	beq.n	8002d68 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a10      	ldr	r2, [pc, #64]	@ (8002da4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d10c      	bne.n	8002d82 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d6e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	68ba      	ldr	r2, [r7, #8]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68ba      	ldr	r2, [r7, #8]
 8002d80:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bc80      	pop	{r7}
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	40012c00 	.word	0x40012c00
 8002da4:	40000400 	.word	0x40000400

08002da8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002db0:	bf00      	nop
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002dc2:	bf00      	nop
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bc80      	pop	{r7}
 8002dca:	4770      	bx	lr

08002dcc <memset>:
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4402      	add	r2, r0
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d100      	bne.n	8002dd6 <memset+0xa>
 8002dd4:	4770      	bx	lr
 8002dd6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dda:	e7f9      	b.n	8002dd0 <memset+0x4>

08002ddc <__libc_init_array>:
 8002ddc:	b570      	push	{r4, r5, r6, lr}
 8002dde:	2600      	movs	r6, #0
 8002de0:	4d0c      	ldr	r5, [pc, #48]	@ (8002e14 <__libc_init_array+0x38>)
 8002de2:	4c0d      	ldr	r4, [pc, #52]	@ (8002e18 <__libc_init_array+0x3c>)
 8002de4:	1b64      	subs	r4, r4, r5
 8002de6:	10a4      	asrs	r4, r4, #2
 8002de8:	42a6      	cmp	r6, r4
 8002dea:	d109      	bne.n	8002e00 <__libc_init_array+0x24>
 8002dec:	f000 f81a 	bl	8002e24 <_init>
 8002df0:	2600      	movs	r6, #0
 8002df2:	4d0a      	ldr	r5, [pc, #40]	@ (8002e1c <__libc_init_array+0x40>)
 8002df4:	4c0a      	ldr	r4, [pc, #40]	@ (8002e20 <__libc_init_array+0x44>)
 8002df6:	1b64      	subs	r4, r4, r5
 8002df8:	10a4      	asrs	r4, r4, #2
 8002dfa:	42a6      	cmp	r6, r4
 8002dfc:	d105      	bne.n	8002e0a <__libc_init_array+0x2e>
 8002dfe:	bd70      	pop	{r4, r5, r6, pc}
 8002e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e04:	4798      	blx	r3
 8002e06:	3601      	adds	r6, #1
 8002e08:	e7ee      	b.n	8002de8 <__libc_init_array+0xc>
 8002e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e0e:	4798      	blx	r3
 8002e10:	3601      	adds	r6, #1
 8002e12:	e7f2      	b.n	8002dfa <__libc_init_array+0x1e>
 8002e14:	08002e60 	.word	0x08002e60
 8002e18:	08002e60 	.word	0x08002e60
 8002e1c:	08002e60 	.word	0x08002e60
 8002e20:	08002e64 	.word	0x08002e64

08002e24 <_init>:
 8002e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e26:	bf00      	nop
 8002e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e2a:	bc08      	pop	{r3}
 8002e2c:	469e      	mov	lr, r3
 8002e2e:	4770      	bx	lr

08002e30 <_fini>:
 8002e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e32:	bf00      	nop
 8002e34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e36:	bc08      	pop	{r3}
 8002e38:	469e      	mov	lr, r3
 8002e3a:	4770      	bx	lr
