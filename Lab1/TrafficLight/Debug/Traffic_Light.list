
Traffic_Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018e8  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080019f4  080019f4  000029f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a18  08001a18  0000300c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a18  08001a18  0000300c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a18  08001a18  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a18  08001a18  00002a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a1c  08001a1c  00002a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001a20  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001a2c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001a2c  0000302c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002906  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e3a  00000000  00000000  0000593b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003f0  00000000  00000000  00006778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000002d4  00000000  00000000  00006b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015663  00000000  00000000  00006e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004ab4  00000000  00000000  0001c49f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079c14  00000000  00000000  00020f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009ab67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dc8  00000000  00000000  0009abac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0009b974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080019dc 	.word	0x080019dc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080019dc 	.word	0x080019dc

0800014c <display7SEG>:

#ifndef SRC_EXERCISE_4_H_
#define SRC_EXERCISE_4_H_
#include "main.h"

void display7SEG(int num){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	switch(num){
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b09      	cmp	r3, #9
 8000158:	f200 81c8 	bhi.w	80004ec <display7SEG+0x3a0>
 800015c:	a201      	add	r2, pc, #4	@ (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	0800018d 	.word	0x0800018d
 8000168:	080001e3 	.word	0x080001e3
 800016c:	08000239 	.word	0x08000239
 8000170:	0800028f 	.word	0x0800028f
 8000174:	080002e5 	.word	0x080002e5
 8000178:	0800033b 	.word	0x0800033b
 800017c:	08000391 	.word	0x08000391
 8000180:	080003e7 	.word	0x080003e7
 8000184:	0800043d 	.word	0x0800043d
 8000188:	08000493 	.word	0x08000493
	case 0:
		HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, RESET);
 800018c:	2200      	movs	r2, #0
 800018e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000192:	48d5      	ldr	r0, [pc, #852]	@ (80004e8 <display7SEG+0x39c>)
 8000194:	f001 f800 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, RESET);
 8000198:	2200      	movs	r2, #0
 800019a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800019e:	48d2      	ldr	r0, [pc, #840]	@ (80004e8 <display7SEG+0x39c>)
 80001a0:	f000 fffa 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 80001a4:	2200      	movs	r2, #0
 80001a6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80001aa:	48cf      	ldr	r0, [pc, #828]	@ (80004e8 <display7SEG+0x39c>)
 80001ac:	f000 fff4 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, RESET);
 80001b0:	2200      	movs	r2, #0
 80001b2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80001b6:	48cc      	ldr	r0, [pc, #816]	@ (80004e8 <display7SEG+0x39c>)
 80001b8:	f000 ffee 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, RESET);
 80001bc:	2200      	movs	r2, #0
 80001be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001c2:	48c9      	ldr	r0, [pc, #804]	@ (80004e8 <display7SEG+0x39c>)
 80001c4:	f000 ffe8 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, RESET);
 80001c8:	2200      	movs	r2, #0
 80001ca:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80001ce:	48c6      	ldr	r0, [pc, #792]	@ (80004e8 <display7SEG+0x39c>)
 80001d0:	f000 ffe2 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, SET);
 80001d4:	2201      	movs	r2, #1
 80001d6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001da:	48c3      	ldr	r0, [pc, #780]	@ (80004e8 <display7SEG+0x39c>)
 80001dc:	f000 ffdc 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 80001e0:	e185      	b.n	80004ee <display7SEG+0x3a2>
	case 1:
		HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, SET);
 80001e2:	2201      	movs	r2, #1
 80001e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80001e8:	48bf      	ldr	r0, [pc, #764]	@ (80004e8 <display7SEG+0x39c>)
 80001ea:	f000 ffd5 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, RESET);
 80001ee:	2200      	movs	r2, #0
 80001f0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001f4:	48bc      	ldr	r0, [pc, #752]	@ (80004e8 <display7SEG+0x39c>)
 80001f6:	f000 ffcf 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 80001fa:	2200      	movs	r2, #0
 80001fc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000200:	48b9      	ldr	r0, [pc, #740]	@ (80004e8 <display7SEG+0x39c>)
 8000202:	f000 ffc9 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, SET);
 8000206:	2201      	movs	r2, #1
 8000208:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800020c:	48b6      	ldr	r0, [pc, #728]	@ (80004e8 <display7SEG+0x39c>)
 800020e:	f000 ffc3 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, SET);
 8000212:	2201      	movs	r2, #1
 8000214:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000218:	48b3      	ldr	r0, [pc, #716]	@ (80004e8 <display7SEG+0x39c>)
 800021a:	f000 ffbd 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, SET);
 800021e:	2201      	movs	r2, #1
 8000220:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000224:	48b0      	ldr	r0, [pc, #704]	@ (80004e8 <display7SEG+0x39c>)
 8000226:	f000 ffb7 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, SET);
 800022a:	2201      	movs	r2, #1
 800022c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000230:	48ad      	ldr	r0, [pc, #692]	@ (80004e8 <display7SEG+0x39c>)
 8000232:	f000 ffb1 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 8000236:	e15a      	b.n	80004ee <display7SEG+0x3a2>
	case 2:
		HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, RESET);
 8000238:	2200      	movs	r2, #0
 800023a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800023e:	48aa      	ldr	r0, [pc, #680]	@ (80004e8 <display7SEG+0x39c>)
 8000240:	f000 ffaa 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, RESET);
 8000244:	2200      	movs	r2, #0
 8000246:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800024a:	48a7      	ldr	r0, [pc, #668]	@ (80004e8 <display7SEG+0x39c>)
 800024c:	f000 ffa4 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, SET);
 8000250:	2201      	movs	r2, #1
 8000252:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000256:	48a4      	ldr	r0, [pc, #656]	@ (80004e8 <display7SEG+0x39c>)
 8000258:	f000 ff9e 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, RESET);
 800025c:	2200      	movs	r2, #0
 800025e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000262:	48a1      	ldr	r0, [pc, #644]	@ (80004e8 <display7SEG+0x39c>)
 8000264:	f000 ff98 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800026e:	489e      	ldr	r0, [pc, #632]	@ (80004e8 <display7SEG+0x39c>)
 8000270:	f000 ff92 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, SET);
 8000274:	2201      	movs	r2, #1
 8000276:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800027a:	489b      	ldr	r0, [pc, #620]	@ (80004e8 <display7SEG+0x39c>)
 800027c:	f000 ff8c 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000286:	4898      	ldr	r0, [pc, #608]	@ (80004e8 <display7SEG+0x39c>)
 8000288:	f000 ff86 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 800028c:	e12f      	b.n	80004ee <display7SEG+0x3a2>
	case 3:
		HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, RESET);
 800028e:	2200      	movs	r2, #0
 8000290:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000294:	4894      	ldr	r0, [pc, #592]	@ (80004e8 <display7SEG+0x39c>)
 8000296:	f000 ff7f 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, RESET);
 800029a:	2200      	movs	r2, #0
 800029c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002a0:	4891      	ldr	r0, [pc, #580]	@ (80004e8 <display7SEG+0x39c>)
 80002a2:	f000 ff79 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 80002a6:	2200      	movs	r2, #0
 80002a8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80002ac:	488e      	ldr	r0, [pc, #568]	@ (80004e8 <display7SEG+0x39c>)
 80002ae:	f000 ff73 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, RESET);
 80002b2:	2200      	movs	r2, #0
 80002b4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002b8:	488b      	ldr	r0, [pc, #556]	@ (80004e8 <display7SEG+0x39c>)
 80002ba:	f000 ff6d 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, SET);
 80002be:	2201      	movs	r2, #1
 80002c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002c4:	4888      	ldr	r0, [pc, #544]	@ (80004e8 <display7SEG+0x39c>)
 80002c6:	f000 ff67 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, SET);
 80002ca:	2201      	movs	r2, #1
 80002cc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80002d0:	4885      	ldr	r0, [pc, #532]	@ (80004e8 <display7SEG+0x39c>)
 80002d2:	f000 ff61 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, RESET);
 80002d6:	2200      	movs	r2, #0
 80002d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80002dc:	4882      	ldr	r0, [pc, #520]	@ (80004e8 <display7SEG+0x39c>)
 80002de:	f000 ff5b 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 80002e2:	e104      	b.n	80004ee <display7SEG+0x3a2>
	case 4:
		HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, SET);
 80002e4:	2201      	movs	r2, #1
 80002e6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80002ea:	487f      	ldr	r0, [pc, #508]	@ (80004e8 <display7SEG+0x39c>)
 80002ec:	f000 ff54 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, RESET);
 80002f0:	2200      	movs	r2, #0
 80002f2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80002f6:	487c      	ldr	r0, [pc, #496]	@ (80004e8 <display7SEG+0x39c>)
 80002f8:	f000 ff4e 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 80002fc:	2200      	movs	r2, #0
 80002fe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000302:	4879      	ldr	r0, [pc, #484]	@ (80004e8 <display7SEG+0x39c>)
 8000304:	f000 ff48 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, SET);
 8000308:	2201      	movs	r2, #1
 800030a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800030e:	4876      	ldr	r0, [pc, #472]	@ (80004e8 <display7SEG+0x39c>)
 8000310:	f000 ff42 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, SET);
 8000314:	2201      	movs	r2, #1
 8000316:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800031a:	4873      	ldr	r0, [pc, #460]	@ (80004e8 <display7SEG+0x39c>)
 800031c:	f000 ff3c 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000326:	4870      	ldr	r0, [pc, #448]	@ (80004e8 <display7SEG+0x39c>)
 8000328:	f000 ff36 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, RESET);
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000332:	486d      	ldr	r0, [pc, #436]	@ (80004e8 <display7SEG+0x39c>)
 8000334:	f000 ff30 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 8000338:	e0d9      	b.n	80004ee <display7SEG+0x3a2>
	case 5:
		HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000340:	4869      	ldr	r0, [pc, #420]	@ (80004e8 <display7SEG+0x39c>)
 8000342:	f000 ff29 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, SET);
 8000346:	2201      	movs	r2, #1
 8000348:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800034c:	4866      	ldr	r0, [pc, #408]	@ (80004e8 <display7SEG+0x39c>)
 800034e:	f000 ff23 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 8000352:	2200      	movs	r2, #0
 8000354:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000358:	4863      	ldr	r0, [pc, #396]	@ (80004e8 <display7SEG+0x39c>)
 800035a:	f000 ff1d 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000364:	4860      	ldr	r0, [pc, #384]	@ (80004e8 <display7SEG+0x39c>)
 8000366:	f000 ff17 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, SET);
 800036a:	2201      	movs	r2, #1
 800036c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000370:	485d      	ldr	r0, [pc, #372]	@ (80004e8 <display7SEG+0x39c>)
 8000372:	f000 ff11 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, RESET);
 8000376:	2200      	movs	r2, #0
 8000378:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800037c:	485a      	ldr	r0, [pc, #360]	@ (80004e8 <display7SEG+0x39c>)
 800037e:	f000 ff0b 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, RESET);
 8000382:	2200      	movs	r2, #0
 8000384:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000388:	4857      	ldr	r0, [pc, #348]	@ (80004e8 <display7SEG+0x39c>)
 800038a:	f000 ff05 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 800038e:	e0ae      	b.n	80004ee <display7SEG+0x3a2>
	case 6:
		HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000396:	4854      	ldr	r0, [pc, #336]	@ (80004e8 <display7SEG+0x39c>)
 8000398:	f000 fefe 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, SET);
 800039c:	2201      	movs	r2, #1
 800039e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003a2:	4851      	ldr	r0, [pc, #324]	@ (80004e8 <display7SEG+0x39c>)
 80003a4:	f000 fef8 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 80003a8:	2200      	movs	r2, #0
 80003aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80003ae:	484e      	ldr	r0, [pc, #312]	@ (80004e8 <display7SEG+0x39c>)
 80003b0:	f000 fef2 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80003ba:	484b      	ldr	r0, [pc, #300]	@ (80004e8 <display7SEG+0x39c>)
 80003bc:	f000 feec 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c6:	4848      	ldr	r0, [pc, #288]	@ (80004e8 <display7SEG+0x39c>)
 80003c8:	f000 fee6 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, RESET);
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80003d2:	4845      	ldr	r0, [pc, #276]	@ (80004e8 <display7SEG+0x39c>)
 80003d4:	f000 fee0 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80003de:	4842      	ldr	r0, [pc, #264]	@ (80004e8 <display7SEG+0x39c>)
 80003e0:	f000 feda 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 80003e4:	e083      	b.n	80004ee <display7SEG+0x3a2>
	case 7:
		HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, RESET);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80003ec:	483e      	ldr	r0, [pc, #248]	@ (80004e8 <display7SEG+0x39c>)
 80003ee:	f000 fed3 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80003f8:	483b      	ldr	r0, [pc, #236]	@ (80004e8 <display7SEG+0x39c>)
 80003fa:	f000 fecd 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 80003fe:	2200      	movs	r2, #0
 8000400:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000404:	4838      	ldr	r0, [pc, #224]	@ (80004e8 <display7SEG+0x39c>)
 8000406:	f000 fec7 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, SET);
 800040a:	2201      	movs	r2, #1
 800040c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000410:	4835      	ldr	r0, [pc, #212]	@ (80004e8 <display7SEG+0x39c>)
 8000412:	f000 fec1 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, SET);
 8000416:	2201      	movs	r2, #1
 8000418:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800041c:	4832      	ldr	r0, [pc, #200]	@ (80004e8 <display7SEG+0x39c>)
 800041e:	f000 febb 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, SET);
 8000422:	2201      	movs	r2, #1
 8000424:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000428:	482f      	ldr	r0, [pc, #188]	@ (80004e8 <display7SEG+0x39c>)
 800042a:	f000 feb5 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, SET);
 800042e:	2201      	movs	r2, #1
 8000430:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000434:	482c      	ldr	r0, [pc, #176]	@ (80004e8 <display7SEG+0x39c>)
 8000436:	f000 feaf 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 800043a:	e058      	b.n	80004ee <display7SEG+0x3a2>
	case 8:
		HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, RESET);
 800043c:	2200      	movs	r2, #0
 800043e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000442:	4829      	ldr	r0, [pc, #164]	@ (80004e8 <display7SEG+0x39c>)
 8000444:	f000 fea8 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800044e:	4826      	ldr	r0, [pc, #152]	@ (80004e8 <display7SEG+0x39c>)
 8000450:	f000 fea2 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 8000454:	2200      	movs	r2, #0
 8000456:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800045a:	4823      	ldr	r0, [pc, #140]	@ (80004e8 <display7SEG+0x39c>)
 800045c:	f000 fe9c 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, RESET);
 8000460:	2200      	movs	r2, #0
 8000462:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000466:	4820      	ldr	r0, [pc, #128]	@ (80004e8 <display7SEG+0x39c>)
 8000468:	f000 fe96 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, RESET);
 800046c:	2200      	movs	r2, #0
 800046e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000472:	481d      	ldr	r0, [pc, #116]	@ (80004e8 <display7SEG+0x39c>)
 8000474:	f000 fe90 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, RESET);
 8000478:	2200      	movs	r2, #0
 800047a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800047e:	481a      	ldr	r0, [pc, #104]	@ (80004e8 <display7SEG+0x39c>)
 8000480:	f000 fe8a 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, RESET);
 8000484:	2200      	movs	r2, #0
 8000486:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800048a:	4817      	ldr	r0, [pc, #92]	@ (80004e8 <display7SEG+0x39c>)
 800048c:	f000 fe84 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 8000490:	e02d      	b.n	80004ee <display7SEG+0x3a2>
	case 9:
		HAL_GPIO_WritePin(PINA_GPIO_Port, PINA_Pin, RESET);
 8000492:	2200      	movs	r2, #0
 8000494:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000498:	4813      	ldr	r0, [pc, #76]	@ (80004e8 <display7SEG+0x39c>)
 800049a:	f000 fe7d 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB_GPIO_Port, PINB_Pin, RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80004a4:	4810      	ldr	r0, [pc, #64]	@ (80004e8 <display7SEG+0x39c>)
 80004a6:	f000 fe77 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC_GPIO_Port, PINC_Pin, RESET);
 80004aa:	2200      	movs	r2, #0
 80004ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80004b0:	480d      	ldr	r0, [pc, #52]	@ (80004e8 <display7SEG+0x39c>)
 80004b2:	f000 fe71 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND_GPIO_Port, PIND_Pin, RESET);
 80004b6:	2200      	movs	r2, #0
 80004b8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004bc:	480a      	ldr	r0, [pc, #40]	@ (80004e8 <display7SEG+0x39c>)
 80004be:	f000 fe6b 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE_GPIO_Port, PINE_Pin, SET);
 80004c2:	2201      	movs	r2, #1
 80004c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004c8:	4807      	ldr	r0, [pc, #28]	@ (80004e8 <display7SEG+0x39c>)
 80004ca:	f000 fe65 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF_GPIO_Port, PINF_Pin, RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004d4:	4804      	ldr	r0, [pc, #16]	@ (80004e8 <display7SEG+0x39c>)
 80004d6:	f000 fe5f 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING_GPIO_Port, PING_Pin, RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004e0:	4801      	ldr	r0, [pc, #4]	@ (80004e8 <display7SEG+0x39c>)
 80004e2:	f000 fe59 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 80004e6:	e002      	b.n	80004ee <display7SEG+0x3a2>
 80004e8:	40010800 	.word	0x40010800
	default:
		break;
 80004ec:	bf00      	nop
	}
}
 80004ee:	bf00      	nop
 80004f0:	3708      	adds	r7, #8
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop

080004f8 <display7SEG1>:

void display7SEG1(int num){
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	switch(num){
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	2b09      	cmp	r3, #9
 8000504:	f200 8180 	bhi.w	8000808 <display7SEG1+0x310>
 8000508:	a201      	add	r2, pc, #4	@ (adr r2, 8000510 <display7SEG1+0x18>)
 800050a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800050e:	bf00      	nop
 8000510:	08000539 	.word	0x08000539
 8000514:	08000581 	.word	0x08000581
 8000518:	080005c9 	.word	0x080005c9
 800051c:	08000611 	.word	0x08000611
 8000520:	08000659 	.word	0x08000659
 8000524:	080006a1 	.word	0x080006a1
 8000528:	080006e9 	.word	0x080006e9
 800052c:	08000731 	.word	0x08000731
 8000530:	08000779 	.word	0x08000779
 8000534:	080007c1 	.word	0x080007c1
	case 0:
		HAL_GPIO_WritePin(PINA1_GPIO_Port, PINA1_Pin, RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2101      	movs	r1, #1
 800053c:	48b5      	ldr	r0, [pc, #724]	@ (8000814 <display7SEG1+0x31c>)
 800053e:	f000 fe2b 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB1_GPIO_Port, PINB1_Pin, RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2102      	movs	r1, #2
 8000546:	48b3      	ldr	r0, [pc, #716]	@ (8000814 <display7SEG1+0x31c>)
 8000548:	f000 fe26 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC1_GPIO_Port, PINC1_Pin, RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	2104      	movs	r1, #4
 8000550:	48b0      	ldr	r0, [pc, #704]	@ (8000814 <display7SEG1+0x31c>)
 8000552:	f000 fe21 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND1_GPIO_Port, PIND1_Pin, RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2108      	movs	r1, #8
 800055a:	48ae      	ldr	r0, [pc, #696]	@ (8000814 <display7SEG1+0x31c>)
 800055c:	f000 fe1c 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE1_GPIO_Port, PINE1_Pin, RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2110      	movs	r1, #16
 8000564:	48ab      	ldr	r0, [pc, #684]	@ (8000814 <display7SEG1+0x31c>)
 8000566:	f000 fe17 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF1_GPIO_Port, PINF1_Pin, RESET);
 800056a:	2200      	movs	r2, #0
 800056c:	2120      	movs	r1, #32
 800056e:	48a9      	ldr	r0, [pc, #676]	@ (8000814 <display7SEG1+0x31c>)
 8000570:	f000 fe12 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING1_GPIO_Port, PING1_Pin, SET);
 8000574:	2201      	movs	r2, #1
 8000576:	2140      	movs	r1, #64	@ 0x40
 8000578:	48a6      	ldr	r0, [pc, #664]	@ (8000814 <display7SEG1+0x31c>)
 800057a:	f000 fe0d 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 800057e:	e144      	b.n	800080a <display7SEG1+0x312>
	case 1:
		HAL_GPIO_WritePin(PINA1_GPIO_Port, PINA1_Pin, SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2101      	movs	r1, #1
 8000584:	48a3      	ldr	r0, [pc, #652]	@ (8000814 <display7SEG1+0x31c>)
 8000586:	f000 fe07 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB1_GPIO_Port, PINB1_Pin, RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2102      	movs	r1, #2
 800058e:	48a1      	ldr	r0, [pc, #644]	@ (8000814 <display7SEG1+0x31c>)
 8000590:	f000 fe02 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC1_GPIO_Port, PINC1_Pin, RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2104      	movs	r1, #4
 8000598:	489e      	ldr	r0, [pc, #632]	@ (8000814 <display7SEG1+0x31c>)
 800059a:	f000 fdfd 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND1_GPIO_Port, PIND1_Pin, SET);
 800059e:	2201      	movs	r2, #1
 80005a0:	2108      	movs	r1, #8
 80005a2:	489c      	ldr	r0, [pc, #624]	@ (8000814 <display7SEG1+0x31c>)
 80005a4:	f000 fdf8 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE1_GPIO_Port, PINE1_Pin, SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2110      	movs	r1, #16
 80005ac:	4899      	ldr	r0, [pc, #612]	@ (8000814 <display7SEG1+0x31c>)
 80005ae:	f000 fdf3 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF1_GPIO_Port, PINF1_Pin, SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2120      	movs	r1, #32
 80005b6:	4897      	ldr	r0, [pc, #604]	@ (8000814 <display7SEG1+0x31c>)
 80005b8:	f000 fdee 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING1_GPIO_Port, PING1_Pin, SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	2140      	movs	r1, #64	@ 0x40
 80005c0:	4894      	ldr	r0, [pc, #592]	@ (8000814 <display7SEG1+0x31c>)
 80005c2:	f000 fde9 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 80005c6:	e120      	b.n	800080a <display7SEG1+0x312>
	case 2:
		HAL_GPIO_WritePin(PINA1_GPIO_Port, PINA1_Pin, RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2101      	movs	r1, #1
 80005cc:	4891      	ldr	r0, [pc, #580]	@ (8000814 <display7SEG1+0x31c>)
 80005ce:	f000 fde3 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB1_GPIO_Port, PINB1_Pin, RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2102      	movs	r1, #2
 80005d6:	488f      	ldr	r0, [pc, #572]	@ (8000814 <display7SEG1+0x31c>)
 80005d8:	f000 fdde 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC1_GPIO_Port, PINC1_Pin, SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2104      	movs	r1, #4
 80005e0:	488c      	ldr	r0, [pc, #560]	@ (8000814 <display7SEG1+0x31c>)
 80005e2:	f000 fdd9 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND1_GPIO_Port, PIND1_Pin, RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	2108      	movs	r1, #8
 80005ea:	488a      	ldr	r0, [pc, #552]	@ (8000814 <display7SEG1+0x31c>)
 80005ec:	f000 fdd4 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE1_GPIO_Port, PINE1_Pin, RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2110      	movs	r1, #16
 80005f4:	4887      	ldr	r0, [pc, #540]	@ (8000814 <display7SEG1+0x31c>)
 80005f6:	f000 fdcf 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF1_GPIO_Port, PINF1_Pin, SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	2120      	movs	r1, #32
 80005fe:	4885      	ldr	r0, [pc, #532]	@ (8000814 <display7SEG1+0x31c>)
 8000600:	f000 fdca 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING1_GPIO_Port, PING1_Pin, RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2140      	movs	r1, #64	@ 0x40
 8000608:	4882      	ldr	r0, [pc, #520]	@ (8000814 <display7SEG1+0x31c>)
 800060a:	f000 fdc5 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 800060e:	e0fc      	b.n	800080a <display7SEG1+0x312>
	case 3:
		HAL_GPIO_WritePin(PINA1_GPIO_Port, PINA1_Pin, RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2101      	movs	r1, #1
 8000614:	487f      	ldr	r0, [pc, #508]	@ (8000814 <display7SEG1+0x31c>)
 8000616:	f000 fdbf 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB1_GPIO_Port, PINB1_Pin, RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2102      	movs	r1, #2
 800061e:	487d      	ldr	r0, [pc, #500]	@ (8000814 <display7SEG1+0x31c>)
 8000620:	f000 fdba 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC1_GPIO_Port, PINC1_Pin, RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2104      	movs	r1, #4
 8000628:	487a      	ldr	r0, [pc, #488]	@ (8000814 <display7SEG1+0x31c>)
 800062a:	f000 fdb5 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND1_GPIO_Port, PIND1_Pin, RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2108      	movs	r1, #8
 8000632:	4878      	ldr	r0, [pc, #480]	@ (8000814 <display7SEG1+0x31c>)
 8000634:	f000 fdb0 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE1_GPIO_Port, PINE1_Pin, SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2110      	movs	r1, #16
 800063c:	4875      	ldr	r0, [pc, #468]	@ (8000814 <display7SEG1+0x31c>)
 800063e:	f000 fdab 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF1_GPIO_Port, PINF1_Pin, SET);
 8000642:	2201      	movs	r2, #1
 8000644:	2120      	movs	r1, #32
 8000646:	4873      	ldr	r0, [pc, #460]	@ (8000814 <display7SEG1+0x31c>)
 8000648:	f000 fda6 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING1_GPIO_Port, PING1_Pin, RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2140      	movs	r1, #64	@ 0x40
 8000650:	4870      	ldr	r0, [pc, #448]	@ (8000814 <display7SEG1+0x31c>)
 8000652:	f000 fda1 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 8000656:	e0d8      	b.n	800080a <display7SEG1+0x312>
	case 4:
		HAL_GPIO_WritePin(PINA1_GPIO_Port, PINA1_Pin, SET);
 8000658:	2201      	movs	r2, #1
 800065a:	2101      	movs	r1, #1
 800065c:	486d      	ldr	r0, [pc, #436]	@ (8000814 <display7SEG1+0x31c>)
 800065e:	f000 fd9b 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB1_GPIO_Port, PINB1_Pin, RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2102      	movs	r1, #2
 8000666:	486b      	ldr	r0, [pc, #428]	@ (8000814 <display7SEG1+0x31c>)
 8000668:	f000 fd96 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC1_GPIO_Port, PINC1_Pin, RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2104      	movs	r1, #4
 8000670:	4868      	ldr	r0, [pc, #416]	@ (8000814 <display7SEG1+0x31c>)
 8000672:	f000 fd91 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND1_GPIO_Port, PIND1_Pin, SET);
 8000676:	2201      	movs	r2, #1
 8000678:	2108      	movs	r1, #8
 800067a:	4866      	ldr	r0, [pc, #408]	@ (8000814 <display7SEG1+0x31c>)
 800067c:	f000 fd8c 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE1_GPIO_Port, PINE1_Pin, SET);
 8000680:	2201      	movs	r2, #1
 8000682:	2110      	movs	r1, #16
 8000684:	4863      	ldr	r0, [pc, #396]	@ (8000814 <display7SEG1+0x31c>)
 8000686:	f000 fd87 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF1_GPIO_Port, PINF1_Pin, RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2120      	movs	r1, #32
 800068e:	4861      	ldr	r0, [pc, #388]	@ (8000814 <display7SEG1+0x31c>)
 8000690:	f000 fd82 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING1_GPIO_Port, PING1_Pin, RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2140      	movs	r1, #64	@ 0x40
 8000698:	485e      	ldr	r0, [pc, #376]	@ (8000814 <display7SEG1+0x31c>)
 800069a:	f000 fd7d 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 800069e:	e0b4      	b.n	800080a <display7SEG1+0x312>
	case 5:
		HAL_GPIO_WritePin(PINA1_GPIO_Port, PINA1_Pin, RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2101      	movs	r1, #1
 80006a4:	485b      	ldr	r0, [pc, #364]	@ (8000814 <display7SEG1+0x31c>)
 80006a6:	f000 fd77 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB1_GPIO_Port, PINB1_Pin, SET);
 80006aa:	2201      	movs	r2, #1
 80006ac:	2102      	movs	r1, #2
 80006ae:	4859      	ldr	r0, [pc, #356]	@ (8000814 <display7SEG1+0x31c>)
 80006b0:	f000 fd72 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC1_GPIO_Port, PINC1_Pin, RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2104      	movs	r1, #4
 80006b8:	4856      	ldr	r0, [pc, #344]	@ (8000814 <display7SEG1+0x31c>)
 80006ba:	f000 fd6d 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND1_GPIO_Port, PIND1_Pin, RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2108      	movs	r1, #8
 80006c2:	4854      	ldr	r0, [pc, #336]	@ (8000814 <display7SEG1+0x31c>)
 80006c4:	f000 fd68 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE1_GPIO_Port, PINE1_Pin, SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2110      	movs	r1, #16
 80006cc:	4851      	ldr	r0, [pc, #324]	@ (8000814 <display7SEG1+0x31c>)
 80006ce:	f000 fd63 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF1_GPIO_Port, PINF1_Pin, RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2120      	movs	r1, #32
 80006d6:	484f      	ldr	r0, [pc, #316]	@ (8000814 <display7SEG1+0x31c>)
 80006d8:	f000 fd5e 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING1_GPIO_Port, PING1_Pin, RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2140      	movs	r1, #64	@ 0x40
 80006e0:	484c      	ldr	r0, [pc, #304]	@ (8000814 <display7SEG1+0x31c>)
 80006e2:	f000 fd59 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 80006e6:	e090      	b.n	800080a <display7SEG1+0x312>
	case 6:
		HAL_GPIO_WritePin(PINA1_GPIO_Port, PINA1_Pin, RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2101      	movs	r1, #1
 80006ec:	4849      	ldr	r0, [pc, #292]	@ (8000814 <display7SEG1+0x31c>)
 80006ee:	f000 fd53 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB1_GPIO_Port, PINB1_Pin, SET);
 80006f2:	2201      	movs	r2, #1
 80006f4:	2102      	movs	r1, #2
 80006f6:	4847      	ldr	r0, [pc, #284]	@ (8000814 <display7SEG1+0x31c>)
 80006f8:	f000 fd4e 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC1_GPIO_Port, PINC1_Pin, RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2104      	movs	r1, #4
 8000700:	4844      	ldr	r0, [pc, #272]	@ (8000814 <display7SEG1+0x31c>)
 8000702:	f000 fd49 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND1_GPIO_Port, PIND1_Pin, RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2108      	movs	r1, #8
 800070a:	4842      	ldr	r0, [pc, #264]	@ (8000814 <display7SEG1+0x31c>)
 800070c:	f000 fd44 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE1_GPIO_Port, PINE1_Pin, RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2110      	movs	r1, #16
 8000714:	483f      	ldr	r0, [pc, #252]	@ (8000814 <display7SEG1+0x31c>)
 8000716:	f000 fd3f 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF1_GPIO_Port, PINF1_Pin, RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2120      	movs	r1, #32
 800071e:	483d      	ldr	r0, [pc, #244]	@ (8000814 <display7SEG1+0x31c>)
 8000720:	f000 fd3a 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING1_GPIO_Port, PING1_Pin, RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2140      	movs	r1, #64	@ 0x40
 8000728:	483a      	ldr	r0, [pc, #232]	@ (8000814 <display7SEG1+0x31c>)
 800072a:	f000 fd35 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 800072e:	e06c      	b.n	800080a <display7SEG1+0x312>
	case 7:
		HAL_GPIO_WritePin(PINA1_GPIO_Port, PINA1_Pin, RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2101      	movs	r1, #1
 8000734:	4837      	ldr	r0, [pc, #220]	@ (8000814 <display7SEG1+0x31c>)
 8000736:	f000 fd2f 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB1_GPIO_Port, PINB1_Pin, RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2102      	movs	r1, #2
 800073e:	4835      	ldr	r0, [pc, #212]	@ (8000814 <display7SEG1+0x31c>)
 8000740:	f000 fd2a 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC1_GPIO_Port, PINC1_Pin, RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2104      	movs	r1, #4
 8000748:	4832      	ldr	r0, [pc, #200]	@ (8000814 <display7SEG1+0x31c>)
 800074a:	f000 fd25 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND1_GPIO_Port, PIND1_Pin, SET);
 800074e:	2201      	movs	r2, #1
 8000750:	2108      	movs	r1, #8
 8000752:	4830      	ldr	r0, [pc, #192]	@ (8000814 <display7SEG1+0x31c>)
 8000754:	f000 fd20 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE1_GPIO_Port, PINE1_Pin, SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2110      	movs	r1, #16
 800075c:	482d      	ldr	r0, [pc, #180]	@ (8000814 <display7SEG1+0x31c>)
 800075e:	f000 fd1b 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF1_GPIO_Port, PINF1_Pin, SET);
 8000762:	2201      	movs	r2, #1
 8000764:	2120      	movs	r1, #32
 8000766:	482b      	ldr	r0, [pc, #172]	@ (8000814 <display7SEG1+0x31c>)
 8000768:	f000 fd16 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING1_GPIO_Port, PING1_Pin, SET);
 800076c:	2201      	movs	r2, #1
 800076e:	2140      	movs	r1, #64	@ 0x40
 8000770:	4828      	ldr	r0, [pc, #160]	@ (8000814 <display7SEG1+0x31c>)
 8000772:	f000 fd11 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 8000776:	e048      	b.n	800080a <display7SEG1+0x312>
	case 8:
		HAL_GPIO_WritePin(PINA1_GPIO_Port, PINA1_Pin, RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	2101      	movs	r1, #1
 800077c:	4825      	ldr	r0, [pc, #148]	@ (8000814 <display7SEG1+0x31c>)
 800077e:	f000 fd0b 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB1_GPIO_Port, PINB1_Pin, RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	2102      	movs	r1, #2
 8000786:	4823      	ldr	r0, [pc, #140]	@ (8000814 <display7SEG1+0x31c>)
 8000788:	f000 fd06 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC1_GPIO_Port, PINC1_Pin, RESET);
 800078c:	2200      	movs	r2, #0
 800078e:	2104      	movs	r1, #4
 8000790:	4820      	ldr	r0, [pc, #128]	@ (8000814 <display7SEG1+0x31c>)
 8000792:	f000 fd01 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND1_GPIO_Port, PIND1_Pin, RESET);
 8000796:	2200      	movs	r2, #0
 8000798:	2108      	movs	r1, #8
 800079a:	481e      	ldr	r0, [pc, #120]	@ (8000814 <display7SEG1+0x31c>)
 800079c:	f000 fcfc 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE1_GPIO_Port, PINE1_Pin, RESET);
 80007a0:	2200      	movs	r2, #0
 80007a2:	2110      	movs	r1, #16
 80007a4:	481b      	ldr	r0, [pc, #108]	@ (8000814 <display7SEG1+0x31c>)
 80007a6:	f000 fcf7 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF1_GPIO_Port, PINF1_Pin, RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	4819      	ldr	r0, [pc, #100]	@ (8000814 <display7SEG1+0x31c>)
 80007b0:	f000 fcf2 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING1_GPIO_Port, PING1_Pin, RESET);
 80007b4:	2200      	movs	r2, #0
 80007b6:	2140      	movs	r1, #64	@ 0x40
 80007b8:	4816      	ldr	r0, [pc, #88]	@ (8000814 <display7SEG1+0x31c>)
 80007ba:	f000 fced 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 80007be:	e024      	b.n	800080a <display7SEG1+0x312>
	case 9:
		HAL_GPIO_WritePin(PINA1_GPIO_Port, PINA1_Pin, RESET);
 80007c0:	2200      	movs	r2, #0
 80007c2:	2101      	movs	r1, #1
 80007c4:	4813      	ldr	r0, [pc, #76]	@ (8000814 <display7SEG1+0x31c>)
 80007c6:	f000 fce7 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINB1_GPIO_Port, PINB1_Pin, RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2102      	movs	r1, #2
 80007ce:	4811      	ldr	r0, [pc, #68]	@ (8000814 <display7SEG1+0x31c>)
 80007d0:	f000 fce2 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINC1_GPIO_Port, PINC1_Pin, RESET);
 80007d4:	2200      	movs	r2, #0
 80007d6:	2104      	movs	r1, #4
 80007d8:	480e      	ldr	r0, [pc, #56]	@ (8000814 <display7SEG1+0x31c>)
 80007da:	f000 fcdd 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PIND1_GPIO_Port, PIND1_Pin, RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	2108      	movs	r1, #8
 80007e2:	480c      	ldr	r0, [pc, #48]	@ (8000814 <display7SEG1+0x31c>)
 80007e4:	f000 fcd8 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINE1_GPIO_Port, PINE1_Pin, SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2110      	movs	r1, #16
 80007ec:	4809      	ldr	r0, [pc, #36]	@ (8000814 <display7SEG1+0x31c>)
 80007ee:	f000 fcd3 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PINF1_GPIO_Port, PINF1_Pin, RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2120      	movs	r1, #32
 80007f6:	4807      	ldr	r0, [pc, #28]	@ (8000814 <display7SEG1+0x31c>)
 80007f8:	f000 fcce 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(PING1_GPIO_Port, PING1_Pin, RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2140      	movs	r1, #64	@ 0x40
 8000800:	4804      	ldr	r0, [pc, #16]	@ (8000814 <display7SEG1+0x31c>)
 8000802:	f000 fcc9 	bl	8001198 <HAL_GPIO_WritePin>
		break;
 8000806:	e000      	b.n	800080a <display7SEG1+0x312>
	default:
		break;
 8000808:	bf00      	nop
	}
}
 800080a:	bf00      	nop
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40010c00 	.word	0x40010c00

08000818 <Traffic_Light1>:
#ifndef SRC_EXERCISE_5_H_
#define SRC_EXERCISE_5_H_
#include "main.h"
#include "Exercise_4.h"

void Traffic_Light1(int count){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
	if(count - 5 > 0){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b05      	cmp	r3, #5
 8000824:	dd14      	ble.n	8000850 <Traffic_Light1+0x38>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2108      	movs	r1, #8
 800082a:	4822      	ldr	r0, [pc, #136]	@ (80008b4 <Traffic_Light1+0x9c>)
 800082c:	f000 fcb4 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000830:	2201      	movs	r2, #1
 8000832:	2110      	movs	r1, #16
 8000834:	481f      	ldr	r0, [pc, #124]	@ (80008b4 <Traffic_Light1+0x9c>)
 8000836:	f000 fcaf 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 800083a:	2201      	movs	r2, #1
 800083c:	2120      	movs	r1, #32
 800083e:	481d      	ldr	r0, [pc, #116]	@ (80008b4 <Traffic_Light1+0x9c>)
 8000840:	f000 fcaa 	bl	8001198 <HAL_GPIO_WritePin>
//		else{
//			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
//			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
//			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
//		}
		display7SEG(count - 5);
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3b05      	subs	r3, #5
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff fc7f 	bl	800014c <display7SEG>
		display7SEG(count);
//		HAL_Delay(10);
//		display7SEG1(count);
	}
//	HAL_Delay(1000);
}
 800084e:	e02c      	b.n	80008aa <Traffic_Light1+0x92>
	else if(count - 2 > 0){
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b02      	cmp	r3, #2
 8000854:	dd14      	ble.n	8000880 <Traffic_Light1+0x68>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000856:	2201      	movs	r2, #1
 8000858:	2108      	movs	r1, #8
 800085a:	4816      	ldr	r0, [pc, #88]	@ (80008b4 <Traffic_Light1+0x9c>)
 800085c:	f000 fc9c 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2110      	movs	r1, #16
 8000864:	4813      	ldr	r0, [pc, #76]	@ (80008b4 <Traffic_Light1+0x9c>)
 8000866:	f000 fc97 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	2120      	movs	r1, #32
 800086e:	4811      	ldr	r0, [pc, #68]	@ (80008b4 <Traffic_Light1+0x9c>)
 8000870:	f000 fc92 	bl	8001198 <HAL_GPIO_WritePin>
		display7SEG(count - 2);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	3b02      	subs	r3, #2
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fc67 	bl	800014c <display7SEG>
}
 800087e:	e014      	b.n	80008aa <Traffic_Light1+0x92>
	else if(count > 0){
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	dd11      	ble.n	80008aa <Traffic_Light1+0x92>
		HAL_GPIO_WritePin(RED1_GPIO_Port, RED1_Pin, SET);
 8000886:	2201      	movs	r2, #1
 8000888:	2108      	movs	r1, #8
 800088a:	480a      	ldr	r0, [pc, #40]	@ (80008b4 <Traffic_Light1+0x9c>)
 800088c:	f000 fc84 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW1_GPIO_Port, YELLOW1_Pin, RESET);
 8000890:	2200      	movs	r2, #0
 8000892:	2110      	movs	r1, #16
 8000894:	4807      	ldr	r0, [pc, #28]	@ (80008b4 <Traffic_Light1+0x9c>)
 8000896:	f000 fc7f 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN1_GPIO_Port, GREEN1_Pin, SET);
 800089a:	2201      	movs	r2, #1
 800089c:	2120      	movs	r1, #32
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <Traffic_Light1+0x9c>)
 80008a0:	f000 fc7a 	bl	8001198 <HAL_GPIO_WritePin>
		display7SEG(count);
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff fc51 	bl	800014c <display7SEG>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40010800 	.word	0x40010800

080008b8 <Traffic_Light2>:
void Traffic_Light2(int count){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
	if(count - 5 > 0){
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b05      	cmp	r3, #5
 80008c4:	dd15      	ble.n	80008f2 <Traffic_Light2+0x3a>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, RESET);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2140      	movs	r1, #64	@ 0x40
 80008ca:	4823      	ldr	r0, [pc, #140]	@ (8000958 <Traffic_Light2+0xa0>)
 80008cc:	f000 fc64 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 80008d0:	2201      	movs	r2, #1
 80008d2:	2180      	movs	r1, #128	@ 0x80
 80008d4:	4820      	ldr	r0, [pc, #128]	@ (8000958 <Traffic_Light2+0xa0>)
 80008d6:	f000 fc5f 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 80008da:	2201      	movs	r2, #1
 80008dc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008e0:	481d      	ldr	r0, [pc, #116]	@ (8000958 <Traffic_Light2+0xa0>)
 80008e2:	f000 fc59 	bl	8001198 <HAL_GPIO_WritePin>
//		else{
//			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
//			HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
//			HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
//		}
		display7SEG1(count - 5);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3b05      	subs	r3, #5
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe04 	bl	80004f8 <display7SEG1>
		display7SEG1(count);
//		HAL_Delay(10);
//		display7SEG1(count);
	}
//	HAL_Delay(1000);
}
 80008f0:	e02e      	b.n	8000950 <Traffic_Light2+0x98>
	else if(count - 2 > 0){
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b02      	cmp	r3, #2
 80008f6:	dd15      	ble.n	8000924 <Traffic_Light2+0x6c>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	2140      	movs	r1, #64	@ 0x40
 80008fc:	4816      	ldr	r0, [pc, #88]	@ (8000958 <Traffic_Light2+0xa0>)
 80008fe:	f000 fc4b 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, SET);
 8000902:	2201      	movs	r2, #1
 8000904:	2180      	movs	r1, #128	@ 0x80
 8000906:	4814      	ldr	r0, [pc, #80]	@ (8000958 <Traffic_Light2+0xa0>)
 8000908:	f000 fc46 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, RESET);
 800090c:	2200      	movs	r2, #0
 800090e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000912:	4811      	ldr	r0, [pc, #68]	@ (8000958 <Traffic_Light2+0xa0>)
 8000914:	f000 fc40 	bl	8001198 <HAL_GPIO_WritePin>
		display7SEG1(count - 2);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3b02      	subs	r3, #2
 800091c:	4618      	mov	r0, r3
 800091e:	f7ff fdeb 	bl	80004f8 <display7SEG1>
}
 8000922:	e015      	b.n	8000950 <Traffic_Light2+0x98>
	else if(count > 0){
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2b00      	cmp	r3, #0
 8000928:	dd12      	ble.n	8000950 <Traffic_Light2+0x98>
		HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, SET);
 800092a:	2201      	movs	r2, #1
 800092c:	2140      	movs	r1, #64	@ 0x40
 800092e:	480a      	ldr	r0, [pc, #40]	@ (8000958 <Traffic_Light2+0xa0>)
 8000930:	f000 fc32 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(YELLOW2_GPIO_Port, YELLOW2_Pin, RESET);
 8000934:	2200      	movs	r2, #0
 8000936:	2180      	movs	r1, #128	@ 0x80
 8000938:	4807      	ldr	r0, [pc, #28]	@ (8000958 <Traffic_Light2+0xa0>)
 800093a:	f000 fc2d 	bl	8001198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN2_GPIO_Port, GREEN2_Pin, SET);
 800093e:	2201      	movs	r2, #1
 8000940:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000944:	4804      	ldr	r0, [pc, #16]	@ (8000958 <Traffic_Light2+0xa0>)
 8000946:	f000 fc27 	bl	8001198 <HAL_GPIO_WritePin>
		display7SEG1(count);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff fdd4 	bl	80004f8 <display7SEG1>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	40010800 	.word	0x40010800

0800095c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000962:	f000 f933 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000966:	f000 f821 	bl	80009ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096a:	f000 f85b 	bl	8000a24 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int count1 = 10, count2 = 5;
 800096e:	230a      	movs	r3, #10
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	2305      	movs	r3, #5
 8000974:	603b      	str	r3, [r7, #0]
  while (1)
  {
	  Traffic_Light1(count1--);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	1e5a      	subs	r2, r3, #1
 800097a:	607a      	str	r2, [r7, #4]
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff ff4b 	bl	8000818 <Traffic_Light1>
//	  HAL_Delay(10);
	  Traffic_Light2(count2--);
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	1e5a      	subs	r2, r3, #1
 8000986:	603a      	str	r2, [r7, #0]
 8000988:	4618      	mov	r0, r3
 800098a:	f7ff ff95 	bl	80008b8 <Traffic_Light2>
	  if(count1 == 0) count1 = 10;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d101      	bne.n	8000998 <main+0x3c>
 8000994:	230a      	movs	r3, #10
 8000996:	607b      	str	r3, [r7, #4]
	  if(count2 == 0) count2 = 10;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d101      	bne.n	80009a2 <main+0x46>
 800099e:	230a      	movs	r3, #10
 80009a0:	603b      	str	r3, [r7, #0]
	  HAL_Delay(1000);
 80009a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009a6:	f000 f973 	bl	8000c90 <HAL_Delay>
	  Traffic_Light1(count1--);
 80009aa:	e7e4      	b.n	8000976 <main+0x1a>

080009ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b090      	sub	sp, #64	@ 0x40
 80009b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009b2:	f107 0318 	add.w	r3, r7, #24
 80009b6:	2228      	movs	r2, #40	@ 0x28
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f000 ffe2 	bl	8001984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c0:	1d3b      	adds	r3, r7, #4
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009d2:	2301      	movs	r3, #1
 80009d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009d6:	2310      	movs	r3, #16
 80009d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009da:	2300      	movs	r3, #0
 80009dc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009de:	f107 0318 	add.w	r3, r7, #24
 80009e2:	4618      	mov	r0, r3
 80009e4:	f000 fbf0 	bl	80011c8 <HAL_RCC_OscConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80009ee:	f000 f86d 	bl	8000acc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f2:	230f      	movs	r3, #15
 80009f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a06:	1d3b      	adds	r3, r7, #4
 8000a08:	2100      	movs	r1, #0
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 fe5e 	bl	80016cc <HAL_RCC_ClockConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000a16:	f000 f859 	bl	8000acc <Error_Handler>
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	3740      	adds	r7, #64	@ 0x40
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a2a:	f107 0308 	add.w	r3, r7, #8
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a38:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a3a:	699b      	ldr	r3, [r3, #24]
 8000a3c:	4a20      	ldr	r2, [pc, #128]	@ (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a3e:	f043 0304 	orr.w	r3, r3, #4
 8000a42:	6193      	str	r3, [r2, #24]
 8000a44:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a46:	699b      	ldr	r3, [r3, #24]
 8000a48:	f003 0304 	and.w	r3, r3, #4
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	4a1a      	ldr	r2, [pc, #104]	@ (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a56:	f043 0308 	orr.w	r3, r3, #8
 8000a5a:	6193      	str	r3, [r2, #24]
 8000a5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <MX_GPIO_Init+0x9c>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	f003 0308 	and.w	r3, r3, #8
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000a68:	2200      	movs	r2, #0
 8000a6a:	f64f 71f8 	movw	r1, #65528	@ 0xfff8
 8000a6e:	4815      	ldr	r0, [pc, #84]	@ (8000ac4 <MX_GPIO_Init+0xa0>)
 8000a70:	f000 fb92 	bl	8001198 <HAL_GPIO_WritePin>
                          |YELLOW2_Pin|GREEN2_Pin|PINA_Pin|PINB_Pin
                          |PINC_Pin|PIND_Pin|PINE_Pin|PINF_Pin
                          |PING_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, PINA1_Pin|PINB1_Pin|PINC1_Pin|PIND1_Pin
 8000a74:	2200      	movs	r2, #0
 8000a76:	217f      	movs	r1, #127	@ 0x7f
 8000a78:	4813      	ldr	r0, [pc, #76]	@ (8000ac8 <MX_GPIO_Init+0xa4>)
 8000a7a:	f000 fb8d 	bl	8001198 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED1_Pin YELLOW1_Pin GREEN1_Pin RED2_Pin
                           YELLOW2_Pin GREEN2_Pin PINA_Pin PINB_Pin
                           PINC_Pin PIND_Pin PINE_Pin PINF_Pin
                           PING_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YELLOW1_Pin|GREEN1_Pin|RED2_Pin
 8000a7e:	f64f 73f8 	movw	r3, #65528	@ 0xfff8
 8000a82:	60bb      	str	r3, [r7, #8]
                          |YELLOW2_Pin|GREEN2_Pin|PINA_Pin|PINB_Pin
                          |PINC_Pin|PIND_Pin|PINE_Pin|PINF_Pin
                          |PING_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	2301      	movs	r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	4619      	mov	r1, r3
 8000a96:	480b      	ldr	r0, [pc, #44]	@ (8000ac4 <MX_GPIO_Init+0xa0>)
 8000a98:	f000 fa02 	bl	8000ea0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PINA1_Pin PINB1_Pin PINC1_Pin PIND1_Pin
                           PINE1_Pin PINF1_Pin PING1_Pin */
  GPIO_InitStruct.Pin = PINA1_Pin|PINB1_Pin|PINC1_Pin|PIND1_Pin
 8000a9c:	237f      	movs	r3, #127	@ 0x7f
 8000a9e:	60bb      	str	r3, [r7, #8]
                          |PINE1_Pin|PINF1_Pin|PING1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aac:	f107 0308 	add.w	r3, r7, #8
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4805      	ldr	r0, [pc, #20]	@ (8000ac8 <MX_GPIO_Init+0xa4>)
 8000ab4:	f000 f9f4 	bl	8000ea0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ab8:	bf00      	nop
 8000aba:	3718      	adds	r7, #24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40010800 	.word	0x40010800
 8000ac8:	40010c00 	.word	0x40010c00

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad0:	b672      	cpsid	i
}
 8000ad2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <Error_Handler+0x8>

08000ad8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ade:	4b0e      	ldr	r3, [pc, #56]	@ (8000b18 <HAL_MspInit+0x40>)
 8000ae0:	699b      	ldr	r3, [r3, #24]
 8000ae2:	4a0d      	ldr	r2, [pc, #52]	@ (8000b18 <HAL_MspInit+0x40>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6193      	str	r3, [r2, #24]
 8000aea:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <HAL_MspInit+0x40>)
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af6:	4b08      	ldr	r3, [pc, #32]	@ (8000b18 <HAL_MspInit+0x40>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	4a07      	ldr	r2, [pc, #28]	@ (8000b18 <HAL_MspInit+0x40>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	61d3      	str	r3, [r2, #28]
 8000b02:	4b05      	ldr	r3, [pc, #20]	@ (8000b18 <HAL_MspInit+0x40>)
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	370c      	adds	r7, #12
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bc80      	pop	{r7}
 8000b16:	4770      	bx	lr
 8000b18:	40021000 	.word	0x40021000

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <NMI_Handler+0x4>

08000b24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <HardFault_Handler+0x4>

08000b2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <MemManage_Handler+0x4>

08000b34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <BusFault_Handler+0x4>

08000b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b40:	bf00      	nop
 8000b42:	e7fd      	b.n	8000b40 <UsageFault_Handler+0x4>

08000b44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr

08000b5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr

08000b68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b6c:	f000 f874 	bl	8000c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b80:	f7ff fff8 	bl	8000b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b84:	480b      	ldr	r0, [pc, #44]	@ (8000bb4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b86:	490c      	ldr	r1, [pc, #48]	@ (8000bb8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b88:	4a0c      	ldr	r2, [pc, #48]	@ (8000bbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b8c:	e002      	b.n	8000b94 <LoopCopyDataInit>

08000b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b92:	3304      	adds	r3, #4

08000b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b98:	d3f9      	bcc.n	8000b8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9a:	4a09      	ldr	r2, [pc, #36]	@ (8000bc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b9c:	4c09      	ldr	r4, [pc, #36]	@ (8000bc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba0:	e001      	b.n	8000ba6 <LoopFillZerobss>

08000ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba4:	3204      	adds	r2, #4

08000ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba8:	d3fb      	bcc.n	8000ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000baa:	f000 fef3 	bl	8001994 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bae:	f7ff fed5 	bl	800095c <main>
  bx lr
 8000bb2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000bbc:	08001a20 	.word	0x08001a20
  ldr r2, =_sbss
 8000bc0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bc4:	2000002c 	.word	0x2000002c

08000bc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC1_2_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <HAL_Init+0x28>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	@ (8000bf4 <HAL_Init+0x28>)
 8000bd6:	f043 0310 	orr.w	r3, r3, #16
 8000bda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f92b 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	200f      	movs	r0, #15
 8000be4:	f000 f808 	bl	8000bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff ff76 	bl	8000ad8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40022000 	.word	0x40022000

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c00:	4b12      	ldr	r3, [pc, #72]	@ (8000c4c <HAL_InitTick+0x54>)
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <HAL_InitTick+0x58>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f935 	bl	8000e86 <HAL_SYSTICK_Config>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
 8000c24:	e00e      	b.n	8000c44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b0f      	cmp	r3, #15
 8000c2a:	d80a      	bhi.n	8000c42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	6879      	ldr	r1, [r7, #4]
 8000c30:	f04f 30ff 	mov.w	r0, #4294967295
 8000c34:	f000 f90b 	bl	8000e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c38:	4a06      	ldr	r2, [pc, #24]	@ (8000c54 <HAL_InitTick+0x5c>)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e000      	b.n	8000c44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	20000000 	.word	0x20000000
 8000c50:	20000008 	.word	0x20000008
 8000c54:	20000004 	.word	0x20000004

08000c58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c5c:	4b05      	ldr	r3, [pc, #20]	@ (8000c74 <HAL_IncTick+0x1c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	461a      	mov	r2, r3
 8000c62:	4b05      	ldr	r3, [pc, #20]	@ (8000c78 <HAL_IncTick+0x20>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4413      	add	r3, r2
 8000c68:	4a03      	ldr	r2, [pc, #12]	@ (8000c78 <HAL_IncTick+0x20>)
 8000c6a:	6013      	str	r3, [r2, #0]
}
 8000c6c:	bf00      	nop
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr
 8000c74:	20000008 	.word	0x20000008
 8000c78:	20000028 	.word	0x20000028

08000c7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b02      	ldr	r3, [pc, #8]	@ (8000c8c <HAL_GetTick+0x10>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bc80      	pop	{r7}
 8000c8a:	4770      	bx	lr
 8000c8c:	20000028 	.word	0x20000028

08000c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c98:	f7ff fff0 	bl	8000c7c <HAL_GetTick>
 8000c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca8:	d005      	beq.n	8000cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000caa:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd4 <HAL_Delay+0x44>)
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cb6:	bf00      	nop
 8000cb8:	f7ff ffe0 	bl	8000c7c <HAL_GetTick>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	68bb      	ldr	r3, [r7, #8]
 8000cc0:	1ad3      	subs	r3, r2, r3
 8000cc2:	68fa      	ldr	r2, [r7, #12]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d8f7      	bhi.n	8000cb8 <HAL_Delay+0x28>
  {
  }
}
 8000cc8:	bf00      	nop
 8000cca:	bf00      	nop
 8000ccc:	3710      	adds	r7, #16
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000008 	.word	0x20000008

08000cd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f003 0307 	and.w	r3, r3, #7
 8000ce6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cee:	68ba      	ldr	r2, [r7, #8]
 8000cf0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d0a:	4a04      	ldr	r2, [pc, #16]	@ (8000d1c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	60d3      	str	r3, [r2, #12]
}
 8000d10:	bf00      	nop
 8000d12:	3714      	adds	r7, #20
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000ed00 	.word	0xe000ed00

08000d20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d24:	4b04      	ldr	r3, [pc, #16]	@ (8000d38 <__NVIC_GetPriorityGrouping+0x18>)
 8000d26:	68db      	ldr	r3, [r3, #12]
 8000d28:	0a1b      	lsrs	r3, r3, #8
 8000d2a:	f003 0307 	and.w	r3, r3, #7
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	@ (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	@ (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	@ 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	@ 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e04:	d301      	bcc.n	8000e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00f      	b.n	8000e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <SysTick_Config+0x40>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e12:	210f      	movs	r1, #15
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f7ff ff90 	bl	8000d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	@ (8000e34 <SysTick_Config+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	@ (8000e34 <SysTick_Config+0x40>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff49 	bl	8000cd8 <__NVIC_SetPriorityGrouping>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e60:	f7ff ff5e 	bl	8000d20 <__NVIC_GetPriorityGrouping>
 8000e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff ff90 	bl	8000d90 <NVIC_EncodePriority>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff5f 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff ffb0 	bl	8000df4 <SysTick_Config>
 8000e94:	4603      	mov	r3, r0
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b08b      	sub	sp, #44	@ 0x2c
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	e161      	b.n	8001178 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	69fa      	ldr	r2, [r7, #28]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	f040 8150 	bne.w	8001172 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	4a97      	ldr	r2, [pc, #604]	@ (8001134 <HAL_GPIO_Init+0x294>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d05e      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000edc:	4a95      	ldr	r2, [pc, #596]	@ (8001134 <HAL_GPIO_Init+0x294>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d875      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000ee2:	4a95      	ldr	r2, [pc, #596]	@ (8001138 <HAL_GPIO_Init+0x298>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d058      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000ee8:	4a93      	ldr	r2, [pc, #588]	@ (8001138 <HAL_GPIO_Init+0x298>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d86f      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000eee:	4a93      	ldr	r2, [pc, #588]	@ (800113c <HAL_GPIO_Init+0x29c>)
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d052      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000ef4:	4a91      	ldr	r2, [pc, #580]	@ (800113c <HAL_GPIO_Init+0x29c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d869      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000efa:	4a91      	ldr	r2, [pc, #580]	@ (8001140 <HAL_GPIO_Init+0x2a0>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d04c      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000f00:	4a8f      	ldr	r2, [pc, #572]	@ (8001140 <HAL_GPIO_Init+0x2a0>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d863      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000f06:	4a8f      	ldr	r2, [pc, #572]	@ (8001144 <HAL_GPIO_Init+0x2a4>)
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d046      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
 8000f0c:	4a8d      	ldr	r2, [pc, #564]	@ (8001144 <HAL_GPIO_Init+0x2a4>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d85d      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000f12:	2b12      	cmp	r3, #18
 8000f14:	d82a      	bhi.n	8000f6c <HAL_GPIO_Init+0xcc>
 8000f16:	2b12      	cmp	r3, #18
 8000f18:	d859      	bhi.n	8000fce <HAL_GPIO_Init+0x12e>
 8000f1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000f20 <HAL_GPIO_Init+0x80>)
 8000f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f20:	08000f9b 	.word	0x08000f9b
 8000f24:	08000f75 	.word	0x08000f75
 8000f28:	08000f87 	.word	0x08000f87
 8000f2c:	08000fc9 	.word	0x08000fc9
 8000f30:	08000fcf 	.word	0x08000fcf
 8000f34:	08000fcf 	.word	0x08000fcf
 8000f38:	08000fcf 	.word	0x08000fcf
 8000f3c:	08000fcf 	.word	0x08000fcf
 8000f40:	08000fcf 	.word	0x08000fcf
 8000f44:	08000fcf 	.word	0x08000fcf
 8000f48:	08000fcf 	.word	0x08000fcf
 8000f4c:	08000fcf 	.word	0x08000fcf
 8000f50:	08000fcf 	.word	0x08000fcf
 8000f54:	08000fcf 	.word	0x08000fcf
 8000f58:	08000fcf 	.word	0x08000fcf
 8000f5c:	08000fcf 	.word	0x08000fcf
 8000f60:	08000fcf 	.word	0x08000fcf
 8000f64:	08000f7d 	.word	0x08000f7d
 8000f68:	08000f91 	.word	0x08000f91
 8000f6c:	4a76      	ldr	r2, [pc, #472]	@ (8001148 <HAL_GPIO_Init+0x2a8>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f72:	e02c      	b.n	8000fce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	623b      	str	r3, [r7, #32]
          break;
 8000f7a:	e029      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	3304      	adds	r3, #4
 8000f82:	623b      	str	r3, [r7, #32]
          break;
 8000f84:	e024      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	3308      	adds	r3, #8
 8000f8c:	623b      	str	r3, [r7, #32]
          break;
 8000f8e:	e01f      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	330c      	adds	r3, #12
 8000f96:	623b      	str	r3, [r7, #32]
          break;
 8000f98:	e01a      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d102      	bne.n	8000fa8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	623b      	str	r3, [r7, #32]
          break;
 8000fa6:	e013      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	d105      	bne.n	8000fbc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fb0:	2308      	movs	r3, #8
 8000fb2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	69fa      	ldr	r2, [r7, #28]
 8000fb8:	611a      	str	r2, [r3, #16]
          break;
 8000fba:	e009      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	615a      	str	r2, [r3, #20]
          break;
 8000fc6:	e003      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
          break;
 8000fcc:	e000      	b.n	8000fd0 <HAL_GPIO_Init+0x130>
          break;
 8000fce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	2bff      	cmp	r3, #255	@ 0xff
 8000fd4:	d801      	bhi.n	8000fda <HAL_GPIO_Init+0x13a>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	e001      	b.n	8000fde <HAL_GPIO_Init+0x13e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	2bff      	cmp	r3, #255	@ 0xff
 8000fe4:	d802      	bhi.n	8000fec <HAL_GPIO_Init+0x14c>
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	e002      	b.n	8000ff2 <HAL_GPIO_Init+0x152>
 8000fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fee:	3b08      	subs	r3, #8
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	210f      	movs	r1, #15
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8001000:	43db      	mvns	r3, r3
 8001002:	401a      	ands	r2, r3
 8001004:	6a39      	ldr	r1, [r7, #32]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	431a      	orrs	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101a:	2b00      	cmp	r3, #0
 800101c:	f000 80a9 	beq.w	8001172 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001020:	4b4a      	ldr	r3, [pc, #296]	@ (800114c <HAL_GPIO_Init+0x2ac>)
 8001022:	699b      	ldr	r3, [r3, #24]
 8001024:	4a49      	ldr	r2, [pc, #292]	@ (800114c <HAL_GPIO_Init+0x2ac>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b47      	ldr	r3, [pc, #284]	@ (800114c <HAL_GPIO_Init+0x2ac>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	60bb      	str	r3, [r7, #8]
 8001036:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001038:	4a45      	ldr	r2, [pc, #276]	@ (8001150 <HAL_GPIO_Init+0x2b0>)
 800103a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103c:	089b      	lsrs	r3, r3, #2
 800103e:	3302      	adds	r3, #2
 8001040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001044:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001048:	f003 0303 	and.w	r3, r3, #3
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	220f      	movs	r2, #15
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	43db      	mvns	r3, r3
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4013      	ands	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a3d      	ldr	r2, [pc, #244]	@ (8001154 <HAL_GPIO_Init+0x2b4>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d00d      	beq.n	8001080 <HAL_GPIO_Init+0x1e0>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a3c      	ldr	r2, [pc, #240]	@ (8001158 <HAL_GPIO_Init+0x2b8>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d007      	beq.n	800107c <HAL_GPIO_Init+0x1dc>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	4a3b      	ldr	r2, [pc, #236]	@ (800115c <HAL_GPIO_Init+0x2bc>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d101      	bne.n	8001078 <HAL_GPIO_Init+0x1d8>
 8001074:	2302      	movs	r3, #2
 8001076:	e004      	b.n	8001082 <HAL_GPIO_Init+0x1e2>
 8001078:	2303      	movs	r3, #3
 800107a:	e002      	b.n	8001082 <HAL_GPIO_Init+0x1e2>
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <HAL_GPIO_Init+0x1e2>
 8001080:	2300      	movs	r3, #0
 8001082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001084:	f002 0203 	and.w	r2, r2, #3
 8001088:	0092      	lsls	r2, r2, #2
 800108a:	4093      	lsls	r3, r2
 800108c:	68fa      	ldr	r2, [r7, #12]
 800108e:	4313      	orrs	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001092:	492f      	ldr	r1, [pc, #188]	@ (8001150 <HAL_GPIO_Init+0x2b0>)
 8001094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001096:	089b      	lsrs	r3, r3, #2
 8001098:	3302      	adds	r3, #2
 800109a:	68fa      	ldr	r2, [r7, #12]
 800109c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d006      	beq.n	80010ba <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001160 <HAL_GPIO_Init+0x2c0>)
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	492b      	ldr	r1, [pc, #172]	@ (8001160 <HAL_GPIO_Init+0x2c0>)
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	608b      	str	r3, [r1, #8]
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010ba:	4b29      	ldr	r3, [pc, #164]	@ (8001160 <HAL_GPIO_Init+0x2c0>)
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	43db      	mvns	r3, r3
 80010c2:	4927      	ldr	r1, [pc, #156]	@ (8001160 <HAL_GPIO_Init+0x2c0>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d006      	beq.n	80010e2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010d4:	4b22      	ldr	r3, [pc, #136]	@ (8001160 <HAL_GPIO_Init+0x2c0>)
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	4921      	ldr	r1, [pc, #132]	@ (8001160 <HAL_GPIO_Init+0x2c0>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	60cb      	str	r3, [r1, #12]
 80010e0:	e006      	b.n	80010f0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010e2:	4b1f      	ldr	r3, [pc, #124]	@ (8001160 <HAL_GPIO_Init+0x2c0>)
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	69bb      	ldr	r3, [r7, #24]
 80010e8:	43db      	mvns	r3, r3
 80010ea:	491d      	ldr	r1, [pc, #116]	@ (8001160 <HAL_GPIO_Init+0x2c0>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010fc:	4b18      	ldr	r3, [pc, #96]	@ (8001160 <HAL_GPIO_Init+0x2c0>)
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	4917      	ldr	r1, [pc, #92]	@ (8001160 <HAL_GPIO_Init+0x2c0>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
 8001108:	e006      	b.n	8001118 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800110a:	4b15      	ldr	r3, [pc, #84]	@ (8001160 <HAL_GPIO_Init+0x2c0>)
 800110c:	685a      	ldr	r2, [r3, #4]
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	43db      	mvns	r3, r3
 8001112:	4913      	ldr	r1, [pc, #76]	@ (8001160 <HAL_GPIO_Init+0x2c0>)
 8001114:	4013      	ands	r3, r2
 8001116:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001120:	2b00      	cmp	r3, #0
 8001122:	d01f      	beq.n	8001164 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001124:	4b0e      	ldr	r3, [pc, #56]	@ (8001160 <HAL_GPIO_Init+0x2c0>)
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	490d      	ldr	r1, [pc, #52]	@ (8001160 <HAL_GPIO_Init+0x2c0>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	600b      	str	r3, [r1, #0]
 8001130:	e01f      	b.n	8001172 <HAL_GPIO_Init+0x2d2>
 8001132:	bf00      	nop
 8001134:	10320000 	.word	0x10320000
 8001138:	10310000 	.word	0x10310000
 800113c:	10220000 	.word	0x10220000
 8001140:	10210000 	.word	0x10210000
 8001144:	10120000 	.word	0x10120000
 8001148:	10110000 	.word	0x10110000
 800114c:	40021000 	.word	0x40021000
 8001150:	40010000 	.word	0x40010000
 8001154:	40010800 	.word	0x40010800
 8001158:	40010c00 	.word	0x40010c00
 800115c:	40011000 	.word	0x40011000
 8001160:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001164:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <HAL_GPIO_Init+0x2f4>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	43db      	mvns	r3, r3
 800116c:	4909      	ldr	r1, [pc, #36]	@ (8001194 <HAL_GPIO_Init+0x2f4>)
 800116e:	4013      	ands	r3, r2
 8001170:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001174:	3301      	adds	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117e:	fa22 f303 	lsr.w	r3, r2, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	f47f ae96 	bne.w	8000eb4 <HAL_GPIO_Init+0x14>
  }
}
 8001188:	bf00      	nop
 800118a:	bf00      	nop
 800118c:	372c      	adds	r7, #44	@ 0x2c
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr
 8001194:	40010400 	.word	0x40010400

08001198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
 80011a4:	4613      	mov	r3, r2
 80011a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011a8:	787b      	ldrb	r3, [r7, #1]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ae:	887a      	ldrh	r2, [r7, #2]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011b4:	e003      	b.n	80011be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	041a      	lsls	r2, r3, #16
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	611a      	str	r2, [r3, #16]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bc80      	pop	{r7}
 80011c6:	4770      	bx	lr

080011c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b086      	sub	sp, #24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e272      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 8087 	beq.w	80012f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011e8:	4b92      	ldr	r3, [pc, #584]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	d00c      	beq.n	800120e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011f4:	4b8f      	ldr	r3, [pc, #572]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 030c 	and.w	r3, r3, #12
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d112      	bne.n	8001226 <HAL_RCC_OscConfig+0x5e>
 8001200:	4b8c      	ldr	r3, [pc, #560]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800120c:	d10b      	bne.n	8001226 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800120e:	4b89      	ldr	r3, [pc, #548]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d06c      	beq.n	80012f4 <HAL_RCC_OscConfig+0x12c>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d168      	bne.n	80012f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e24c      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800122e:	d106      	bne.n	800123e <HAL_RCC_OscConfig+0x76>
 8001230:	4b80      	ldr	r3, [pc, #512]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a7f      	ldr	r2, [pc, #508]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001236:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	e02e      	b.n	800129c <HAL_RCC_OscConfig+0xd4>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d10c      	bne.n	8001260 <HAL_RCC_OscConfig+0x98>
 8001246:	4b7b      	ldr	r3, [pc, #492]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a7a      	ldr	r2, [pc, #488]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 800124c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4b78      	ldr	r3, [pc, #480]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a77      	ldr	r2, [pc, #476]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001258:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	e01d      	b.n	800129c <HAL_RCC_OscConfig+0xd4>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001268:	d10c      	bne.n	8001284 <HAL_RCC_OscConfig+0xbc>
 800126a:	4b72      	ldr	r3, [pc, #456]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a71      	ldr	r2, [pc, #452]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001270:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	4b6f      	ldr	r3, [pc, #444]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a6e      	ldr	r2, [pc, #440]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 800127c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	e00b      	b.n	800129c <HAL_RCC_OscConfig+0xd4>
 8001284:	4b6b      	ldr	r3, [pc, #428]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a6a      	ldr	r2, [pc, #424]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 800128a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	4b68      	ldr	r3, [pc, #416]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a67      	ldr	r2, [pc, #412]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001296:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800129a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d013      	beq.n	80012cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012a4:	f7ff fcea 	bl	8000c7c <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012aa:	e008      	b.n	80012be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012ac:	f7ff fce6 	bl	8000c7c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	2b64      	cmp	r3, #100	@ 0x64
 80012b8:	d901      	bls.n	80012be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80012ba:	2303      	movs	r3, #3
 80012bc:	e200      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012be:	4b5d      	ldr	r3, [pc, #372]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f0      	beq.n	80012ac <HAL_RCC_OscConfig+0xe4>
 80012ca:	e014      	b.n	80012f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fcd6 	bl	8000c7c <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff fcd2 	bl	8000c7c <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	@ 0x64
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e1ec      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012e6:	4b53      	ldr	r3, [pc, #332]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f0      	bne.n	80012d4 <HAL_RCC_OscConfig+0x10c>
 80012f2:	e000      	b.n	80012f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d063      	beq.n	80013ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001302:	4b4c      	ldr	r3, [pc, #304]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f003 030c 	and.w	r3, r3, #12
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00b      	beq.n	8001326 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800130e:	4b49      	ldr	r3, [pc, #292]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b08      	cmp	r3, #8
 8001318:	d11c      	bne.n	8001354 <HAL_RCC_OscConfig+0x18c>
 800131a:	4b46      	ldr	r3, [pc, #280]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d116      	bne.n	8001354 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001326:	4b43      	ldr	r3, [pc, #268]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b00      	cmp	r3, #0
 8001330:	d005      	beq.n	800133e <HAL_RCC_OscConfig+0x176>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	691b      	ldr	r3, [r3, #16]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d001      	beq.n	800133e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e1c0      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133e:	4b3d      	ldr	r3, [pc, #244]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	695b      	ldr	r3, [r3, #20]
 800134a:	00db      	lsls	r3, r3, #3
 800134c:	4939      	ldr	r1, [pc, #228]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001352:	e03a      	b.n	80013ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	691b      	ldr	r3, [r3, #16]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d020      	beq.n	800139e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800135c:	4b36      	ldr	r3, [pc, #216]	@ (8001438 <HAL_RCC_OscConfig+0x270>)
 800135e:	2201      	movs	r2, #1
 8001360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001362:	f7ff fc8b 	bl	8000c7c <HAL_GetTick>
 8001366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001368:	e008      	b.n	800137c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800136a:	f7ff fc87 	bl	8000c7c <HAL_GetTick>
 800136e:	4602      	mov	r2, r0
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	2b02      	cmp	r3, #2
 8001376:	d901      	bls.n	800137c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001378:	2303      	movs	r3, #3
 800137a:	e1a1      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137c:	4b2d      	ldr	r3, [pc, #180]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b00      	cmp	r3, #0
 8001386:	d0f0      	beq.n	800136a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001388:	4b2a      	ldr	r3, [pc, #168]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	00db      	lsls	r3, r3, #3
 8001396:	4927      	ldr	r1, [pc, #156]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001398:	4313      	orrs	r3, r2
 800139a:	600b      	str	r3, [r1, #0]
 800139c:	e015      	b.n	80013ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800139e:	4b26      	ldr	r3, [pc, #152]	@ (8001438 <HAL_RCC_OscConfig+0x270>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fc6a 	bl	8000c7c <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013ac:	f7ff fc66 	bl	8000c7c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e180      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013be:	4b1d      	ldr	r3, [pc, #116]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f003 0308 	and.w	r3, r3, #8
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d03a      	beq.n	800144c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d019      	beq.n	8001412 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013de:	4b17      	ldr	r3, [pc, #92]	@ (800143c <HAL_RCC_OscConfig+0x274>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013e4:	f7ff fc4a 	bl	8000c7c <HAL_GetTick>
 80013e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013ea:	e008      	b.n	80013fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ec:	f7ff fc46 	bl	8000c7c <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d901      	bls.n	80013fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80013fa:	2303      	movs	r3, #3
 80013fc:	e160      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001434 <HAL_RCC_OscConfig+0x26c>)
 8001400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d0f0      	beq.n	80013ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800140a:	2001      	movs	r0, #1
 800140c:	f000 fa9c 	bl	8001948 <RCC_Delay>
 8001410:	e01c      	b.n	800144c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001412:	4b0a      	ldr	r3, [pc, #40]	@ (800143c <HAL_RCC_OscConfig+0x274>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001418:	f7ff fc30 	bl	8000c7c <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800141e:	e00f      	b.n	8001440 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001420:	f7ff fc2c 	bl	8000c7c <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d908      	bls.n	8001440 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e146      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f8>
 8001432:	bf00      	nop
 8001434:	40021000 	.word	0x40021000
 8001438:	42420000 	.word	0x42420000
 800143c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001440:	4b92      	ldr	r3, [pc, #584]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 8001442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1e9      	bne.n	8001420 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0304 	and.w	r3, r3, #4
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 80a6 	beq.w	80015a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800145e:	4b8b      	ldr	r3, [pc, #556]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d10d      	bne.n	8001486 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	4b88      	ldr	r3, [pc, #544]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 800146c:	69db      	ldr	r3, [r3, #28]
 800146e:	4a87      	ldr	r2, [pc, #540]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001474:	61d3      	str	r3, [r2, #28]
 8001476:	4b85      	ldr	r3, [pc, #532]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 8001478:	69db      	ldr	r3, [r3, #28]
 800147a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147e:	60bb      	str	r3, [r7, #8]
 8001480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001482:	2301      	movs	r3, #1
 8001484:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001486:	4b82      	ldr	r3, [pc, #520]	@ (8001690 <HAL_RCC_OscConfig+0x4c8>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148e:	2b00      	cmp	r3, #0
 8001490:	d118      	bne.n	80014c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001492:	4b7f      	ldr	r3, [pc, #508]	@ (8001690 <HAL_RCC_OscConfig+0x4c8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a7e      	ldr	r2, [pc, #504]	@ (8001690 <HAL_RCC_OscConfig+0x4c8>)
 8001498:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800149c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800149e:	f7ff fbed 	bl	8000c7c <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014a6:	f7ff fbe9 	bl	8000c7c <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b64      	cmp	r3, #100	@ 0x64
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e103      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014b8:	4b75      	ldr	r3, [pc, #468]	@ (8001690 <HAL_RCC_OscConfig+0x4c8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d0f0      	beq.n	80014a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	2b01      	cmp	r3, #1
 80014ca:	d106      	bne.n	80014da <HAL_RCC_OscConfig+0x312>
 80014cc:	4b6f      	ldr	r3, [pc, #444]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	4a6e      	ldr	r2, [pc, #440]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6213      	str	r3, [r2, #32]
 80014d8:	e02d      	b.n	8001536 <HAL_RCC_OscConfig+0x36e>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d10c      	bne.n	80014fc <HAL_RCC_OscConfig+0x334>
 80014e2:	4b6a      	ldr	r3, [pc, #424]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	4a69      	ldr	r2, [pc, #420]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	6213      	str	r3, [r2, #32]
 80014ee:	4b67      	ldr	r3, [pc, #412]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 80014f0:	6a1b      	ldr	r3, [r3, #32]
 80014f2:	4a66      	ldr	r2, [pc, #408]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	f023 0304 	bic.w	r3, r3, #4
 80014f8:	6213      	str	r3, [r2, #32]
 80014fa:	e01c      	b.n	8001536 <HAL_RCC_OscConfig+0x36e>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	2b05      	cmp	r3, #5
 8001502:	d10c      	bne.n	800151e <HAL_RCC_OscConfig+0x356>
 8001504:	4b61      	ldr	r3, [pc, #388]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 8001506:	6a1b      	ldr	r3, [r3, #32]
 8001508:	4a60      	ldr	r2, [pc, #384]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 800150a:	f043 0304 	orr.w	r3, r3, #4
 800150e:	6213      	str	r3, [r2, #32]
 8001510:	4b5e      	ldr	r3, [pc, #376]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4a5d      	ldr	r2, [pc, #372]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6213      	str	r3, [r2, #32]
 800151c:	e00b      	b.n	8001536 <HAL_RCC_OscConfig+0x36e>
 800151e:	4b5b      	ldr	r3, [pc, #364]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 8001520:	6a1b      	ldr	r3, [r3, #32]
 8001522:	4a5a      	ldr	r2, [pc, #360]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 8001524:	f023 0301 	bic.w	r3, r3, #1
 8001528:	6213      	str	r3, [r2, #32]
 800152a:	4b58      	ldr	r3, [pc, #352]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4a57      	ldr	r2, [pc, #348]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 8001530:	f023 0304 	bic.w	r3, r3, #4
 8001534:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d015      	beq.n	800156a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800153e:	f7ff fb9d 	bl	8000c7c <HAL_GetTick>
 8001542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001544:	e00a      	b.n	800155c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001546:	f7ff fb99 	bl	8000c7c <HAL_GetTick>
 800154a:	4602      	mov	r2, r0
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	1ad3      	subs	r3, r2, r3
 8001550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001554:	4293      	cmp	r3, r2
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e0b1      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800155c:	4b4b      	ldr	r3, [pc, #300]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0ee      	beq.n	8001546 <HAL_RCC_OscConfig+0x37e>
 8001568:	e014      	b.n	8001594 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800156a:	f7ff fb87 	bl	8000c7c <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001570:	e00a      	b.n	8001588 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001572:	f7ff fb83 	bl	8000c7c <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001580:	4293      	cmp	r3, r2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e09b      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001588:	4b40      	ldr	r3, [pc, #256]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 800158a:	6a1b      	ldr	r3, [r3, #32]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1ee      	bne.n	8001572 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001594:	7dfb      	ldrb	r3, [r7, #23]
 8001596:	2b01      	cmp	r3, #1
 8001598:	d105      	bne.n	80015a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159a:	4b3c      	ldr	r3, [pc, #240]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4a3b      	ldr	r2, [pc, #236]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 8087 	beq.w	80016be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b0:	4b36      	ldr	r3, [pc, #216]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 030c 	and.w	r3, r3, #12
 80015b8:	2b08      	cmp	r3, #8
 80015ba:	d061      	beq.n	8001680 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	2b02      	cmp	r3, #2
 80015c2:	d146      	bne.n	8001652 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c4:	4b33      	ldr	r3, [pc, #204]	@ (8001694 <HAL_RCC_OscConfig+0x4cc>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ca:	f7ff fb57 	bl	8000c7c <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d2:	f7ff fb53 	bl	8000c7c <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e06d      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e4:	4b29      	ldr	r3, [pc, #164]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1f0      	bne.n	80015d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015f8:	d108      	bne.n	800160c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80015fa:	4b24      	ldr	r3, [pc, #144]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	4921      	ldr	r1, [pc, #132]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 8001608:	4313      	orrs	r3, r2
 800160a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800160c:	4b1f      	ldr	r3, [pc, #124]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a19      	ldr	r1, [r3, #32]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800161c:	430b      	orrs	r3, r1
 800161e:	491b      	ldr	r1, [pc, #108]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 8001620:	4313      	orrs	r3, r2
 8001622:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001624:	4b1b      	ldr	r3, [pc, #108]	@ (8001694 <HAL_RCC_OscConfig+0x4cc>)
 8001626:	2201      	movs	r2, #1
 8001628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800162a:	f7ff fb27 	bl	8000c7c <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001632:	f7ff fb23 	bl	8000c7c <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e03d      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001644:	4b11      	ldr	r3, [pc, #68]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x46a>
 8001650:	e035      	b.n	80016be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001652:	4b10      	ldr	r3, [pc, #64]	@ (8001694 <HAL_RCC_OscConfig+0x4cc>)
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001658:	f7ff fb10 	bl	8000c7c <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001660:	f7ff fb0c 	bl	8000c7c <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e026      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_RCC_OscConfig+0x4c4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x498>
 800167e:	e01e      	b.n	80016be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d107      	bne.n	8001698 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e019      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f8>
 800168c:	40021000 	.word	0x40021000
 8001690:	40007000 	.word	0x40007000
 8001694:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001698:	4b0b      	ldr	r3, [pc, #44]	@ (80016c8 <HAL_RCC_OscConfig+0x500>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a1b      	ldr	r3, [r3, #32]
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d106      	bne.n	80016ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d001      	beq.n	80016be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e000      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40021000 	.word	0x40021000

080016cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b084      	sub	sp, #16
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d101      	bne.n	80016e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e0d0      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016e0:	4b6a      	ldr	r3, [pc, #424]	@ (800188c <HAL_RCC_ClockConfig+0x1c0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d910      	bls.n	8001710 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ee:	4b67      	ldr	r3, [pc, #412]	@ (800188c <HAL_RCC_ClockConfig+0x1c0>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f023 0207 	bic.w	r2, r3, #7
 80016f6:	4965      	ldr	r1, [pc, #404]	@ (800188c <HAL_RCC_ClockConfig+0x1c0>)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fe:	4b63      	ldr	r3, [pc, #396]	@ (800188c <HAL_RCC_ClockConfig+0x1c0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	683a      	ldr	r2, [r7, #0]
 8001708:	429a      	cmp	r2, r3
 800170a:	d001      	beq.n	8001710 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e0b8      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0302 	and.w	r3, r3, #2
 8001718:	2b00      	cmp	r3, #0
 800171a:	d020      	beq.n	800175e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d005      	beq.n	8001734 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001728:	4b59      	ldr	r3, [pc, #356]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a58      	ldr	r2, [pc, #352]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800172e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001732:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001740:	4b53      	ldr	r3, [pc, #332]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	4a52      	ldr	r2, [pc, #328]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800174a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800174c:	4b50      	ldr	r3, [pc, #320]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	494d      	ldr	r1, [pc, #308]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800175a:	4313      	orrs	r3, r2
 800175c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	2b00      	cmp	r3, #0
 8001768:	d040      	beq.n	80017ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d107      	bne.n	8001782 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001772:	4b47      	ldr	r3, [pc, #284]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d115      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e07f      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d107      	bne.n	800179a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800178a:	4b41      	ldr	r3, [pc, #260]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d109      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e073      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800179a:	4b3d      	ldr	r3, [pc, #244]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e06b      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017aa:	4b39      	ldr	r3, [pc, #228]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f023 0203 	bic.w	r2, r3, #3
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4936      	ldr	r1, [pc, #216]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 80017b8:	4313      	orrs	r3, r2
 80017ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017bc:	f7ff fa5e 	bl	8000c7c <HAL_GetTick>
 80017c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c2:	e00a      	b.n	80017da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c4:	f7ff fa5a 	bl	8000c7c <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e053      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017da:	4b2d      	ldr	r3, [pc, #180]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 020c 	and.w	r2, r3, #12
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d1eb      	bne.n	80017c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017ec:	4b27      	ldr	r3, [pc, #156]	@ (800188c <HAL_RCC_ClockConfig+0x1c0>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d210      	bcs.n	800181c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b24      	ldr	r3, [pc, #144]	@ (800188c <HAL_RCC_ClockConfig+0x1c0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f023 0207 	bic.w	r2, r3, #7
 8001802:	4922      	ldr	r1, [pc, #136]	@ (800188c <HAL_RCC_ClockConfig+0x1c0>)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	4313      	orrs	r3, r2
 8001808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800180a:	4b20      	ldr	r3, [pc, #128]	@ (800188c <HAL_RCC_ClockConfig+0x1c0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0307 	and.w	r3, r3, #7
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	429a      	cmp	r2, r3
 8001816:	d001      	beq.n	800181c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e032      	b.n	8001882 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f003 0304 	and.w	r3, r3, #4
 8001824:	2b00      	cmp	r3, #0
 8001826:	d008      	beq.n	800183a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001828:	4b19      	ldr	r3, [pc, #100]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	4916      	ldr	r1, [pc, #88]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001836:	4313      	orrs	r3, r2
 8001838:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	2b00      	cmp	r3, #0
 8001844:	d009      	beq.n	800185a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001846:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	00db      	lsls	r3, r3, #3
 8001854:	490e      	ldr	r1, [pc, #56]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	4313      	orrs	r3, r2
 8001858:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800185a:	f000 f821 	bl	80018a0 <HAL_RCC_GetSysClockFreq>
 800185e:	4602      	mov	r2, r0
 8001860:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <HAL_RCC_ClockConfig+0x1c4>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	091b      	lsrs	r3, r3, #4
 8001866:	f003 030f 	and.w	r3, r3, #15
 800186a:	490a      	ldr	r1, [pc, #40]	@ (8001894 <HAL_RCC_ClockConfig+0x1c8>)
 800186c:	5ccb      	ldrb	r3, [r1, r3]
 800186e:	fa22 f303 	lsr.w	r3, r2, r3
 8001872:	4a09      	ldr	r2, [pc, #36]	@ (8001898 <HAL_RCC_ClockConfig+0x1cc>)
 8001874:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001876:	4b09      	ldr	r3, [pc, #36]	@ (800189c <HAL_RCC_ClockConfig+0x1d0>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f7ff f9bc 	bl	8000bf8 <HAL_InitTick>

  return HAL_OK;
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40022000 	.word	0x40022000
 8001890:	40021000 	.word	0x40021000
 8001894:	080019f4 	.word	0x080019f4
 8001898:	20000000 	.word	0x20000000
 800189c:	20000004 	.word	0x20000004

080018a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
 80018aa:	2300      	movs	r3, #0
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80018ba:	4b1e      	ldr	r3, [pc, #120]	@ (8001934 <HAL_RCC_GetSysClockFreq+0x94>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b04      	cmp	r3, #4
 80018c8:	d002      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x30>
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d003      	beq.n	80018d6 <HAL_RCC_GetSysClockFreq+0x36>
 80018ce:	e027      	b.n	8001920 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <HAL_RCC_GetSysClockFreq+0x98>)
 80018d2:	613b      	str	r3, [r7, #16]
      break;
 80018d4:	e027      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	0c9b      	lsrs	r3, r3, #18
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	4a17      	ldr	r2, [pc, #92]	@ (800193c <HAL_RCC_GetSysClockFreq+0x9c>)
 80018e0:	5cd3      	ldrb	r3, [r2, r3]
 80018e2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d010      	beq.n	8001910 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80018ee:	4b11      	ldr	r3, [pc, #68]	@ (8001934 <HAL_RCC_GetSysClockFreq+0x94>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	0c5b      	lsrs	r3, r3, #17
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	4a11      	ldr	r2, [pc, #68]	@ (8001940 <HAL_RCC_GetSysClockFreq+0xa0>)
 80018fa:	5cd3      	ldrb	r3, [r2, r3]
 80018fc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a0d      	ldr	r2, [pc, #52]	@ (8001938 <HAL_RCC_GetSysClockFreq+0x98>)
 8001902:	fb03 f202 	mul.w	r2, r3, r2
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	fbb2 f3f3 	udiv	r3, r2, r3
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e004      	b.n	800191a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a0c      	ldr	r2, [pc, #48]	@ (8001944 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001914:	fb02 f303 	mul.w	r3, r2, r3
 8001918:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	613b      	str	r3, [r7, #16]
      break;
 800191e:	e002      	b.n	8001926 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001920:	4b05      	ldr	r3, [pc, #20]	@ (8001938 <HAL_RCC_GetSysClockFreq+0x98>)
 8001922:	613b      	str	r3, [r7, #16]
      break;
 8001924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001926:	693b      	ldr	r3, [r7, #16]
}
 8001928:	4618      	mov	r0, r3
 800192a:	371c      	adds	r7, #28
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000
 8001938:	007a1200 	.word	0x007a1200
 800193c:	08001a04 	.word	0x08001a04
 8001940:	08001a14 	.word	0x08001a14
 8001944:	003d0900 	.word	0x003d0900

08001948 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001950:	4b0a      	ldr	r3, [pc, #40]	@ (800197c <RCC_Delay+0x34>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a0a      	ldr	r2, [pc, #40]	@ (8001980 <RCC_Delay+0x38>)
 8001956:	fba2 2303 	umull	r2, r3, r2, r3
 800195a:	0a5b      	lsrs	r3, r3, #9
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	fb02 f303 	mul.w	r3, r2, r3
 8001962:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001964:	bf00      	nop
  }
  while (Delay --);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	1e5a      	subs	r2, r3, #1
 800196a:	60fa      	str	r2, [r7, #12]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d1f9      	bne.n	8001964 <RCC_Delay+0x1c>
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	20000000 	.word	0x20000000
 8001980:	10624dd3 	.word	0x10624dd3

08001984 <memset>:
 8001984:	4603      	mov	r3, r0
 8001986:	4402      	add	r2, r0
 8001988:	4293      	cmp	r3, r2
 800198a:	d100      	bne.n	800198e <memset+0xa>
 800198c:	4770      	bx	lr
 800198e:	f803 1b01 	strb.w	r1, [r3], #1
 8001992:	e7f9      	b.n	8001988 <memset+0x4>

08001994 <__libc_init_array>:
 8001994:	b570      	push	{r4, r5, r6, lr}
 8001996:	2600      	movs	r6, #0
 8001998:	4d0c      	ldr	r5, [pc, #48]	@ (80019cc <__libc_init_array+0x38>)
 800199a:	4c0d      	ldr	r4, [pc, #52]	@ (80019d0 <__libc_init_array+0x3c>)
 800199c:	1b64      	subs	r4, r4, r5
 800199e:	10a4      	asrs	r4, r4, #2
 80019a0:	42a6      	cmp	r6, r4
 80019a2:	d109      	bne.n	80019b8 <__libc_init_array+0x24>
 80019a4:	f000 f81a 	bl	80019dc <_init>
 80019a8:	2600      	movs	r6, #0
 80019aa:	4d0a      	ldr	r5, [pc, #40]	@ (80019d4 <__libc_init_array+0x40>)
 80019ac:	4c0a      	ldr	r4, [pc, #40]	@ (80019d8 <__libc_init_array+0x44>)
 80019ae:	1b64      	subs	r4, r4, r5
 80019b0:	10a4      	asrs	r4, r4, #2
 80019b2:	42a6      	cmp	r6, r4
 80019b4:	d105      	bne.n	80019c2 <__libc_init_array+0x2e>
 80019b6:	bd70      	pop	{r4, r5, r6, pc}
 80019b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80019bc:	4798      	blx	r3
 80019be:	3601      	adds	r6, #1
 80019c0:	e7ee      	b.n	80019a0 <__libc_init_array+0xc>
 80019c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80019c6:	4798      	blx	r3
 80019c8:	3601      	adds	r6, #1
 80019ca:	e7f2      	b.n	80019b2 <__libc_init_array+0x1e>
 80019cc:	08001a18 	.word	0x08001a18
 80019d0:	08001a18 	.word	0x08001a18
 80019d4:	08001a18 	.word	0x08001a18
 80019d8:	08001a1c 	.word	0x08001a1c

080019dc <_init>:
 80019dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019de:	bf00      	nop
 80019e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019e2:	bc08      	pop	{r3}
 80019e4:	469e      	mov	lr, r3
 80019e6:	4770      	bx	lr

080019e8 <_fini>:
 80019e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ea:	bf00      	nop
 80019ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019ee:	bc08      	pop	{r3}
 80019f0:	469e      	mov	lr, r3
 80019f2:	4770      	bx	lr
